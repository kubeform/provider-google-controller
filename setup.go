/*
Copyright AppsCode Inc. and Contributors

Licensed under the AppsCode Free Trial License 1.0.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://github.com/appscode/licenses/raw/1.0.0/AppsCode-Free-Trial-1.0.0.md

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package main

import (
	"context"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/gobuffalo/flect"
	"github.com/hashicorp/terraform-provider-google/google"
	auditlib "go.bytebuilders.dev/audit/lib"
	arv1 "k8s.io/api/admissionregistration/v1"
	"k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
	informers "k8s.io/apiextensions-apiserver/pkg/client/informers/externalversions"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	admissionregistrationv1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1"
	"k8s.io/client-go/tools/cache"
	"k8s.io/klog/v2"
	accesscontextv1alpha1 "kubeform.dev/provider-google-api/apis/accesscontext/v1alpha1"
	activev1alpha1 "kubeform.dev/provider-google-api/apis/active/v1alpha1"
	apigeev1alpha1 "kubeform.dev/provider-google-api/apis/apigee/v1alpha1"
	appenginev1alpha1 "kubeform.dev/provider-google-api/apis/appengine/v1alpha1"
	bigqueryv1alpha1 "kubeform.dev/provider-google-api/apis/bigquery/v1alpha1"
	bigtablev1alpha1 "kubeform.dev/provider-google-api/apis/bigtable/v1alpha1"
	billingaccountv1alpha1 "kubeform.dev/provider-google-api/apis/billingaccount/v1alpha1"
	billingbudgetv1alpha1 "kubeform.dev/provider-google-api/apis/billingbudget/v1alpha1"
	billingsubaccountv1alpha1 "kubeform.dev/provider-google-api/apis/billingsubaccount/v1alpha1"
	binaryauthorizationv1alpha1 "kubeform.dev/provider-google-api/apis/binaryauthorization/v1alpha1"
	cloudv1alpha1 "kubeform.dev/provider-google-api/apis/cloud/v1alpha1"
	cloudbuildv1alpha1 "kubeform.dev/provider-google-api/apis/cloudbuild/v1alpha1"
	cloudfunctionsfunctionv1alpha1 "kubeform.dev/provider-google-api/apis/cloudfunctionsfunction/v1alpha1"
	cloudiotv1alpha1 "kubeform.dev/provider-google-api/apis/cloudiot/v1alpha1"
	composerv1alpha1 "kubeform.dev/provider-google-api/apis/composer/v1alpha1"
	computev1alpha1 "kubeform.dev/provider-google-api/apis/compute/v1alpha1"
	containerv1alpha1 "kubeform.dev/provider-google-api/apis/container/v1alpha1"
	datav1alpha1 "kubeform.dev/provider-google-api/apis/data/v1alpha1"
	dataflowv1alpha1 "kubeform.dev/provider-google-api/apis/dataflow/v1alpha1"
	dataprocv1alpha1 "kubeform.dev/provider-google-api/apis/dataproc/v1alpha1"
	datastorev1alpha1 "kubeform.dev/provider-google-api/apis/datastore/v1alpha1"
	deploymentv1alpha1 "kubeform.dev/provider-google-api/apis/deployment/v1alpha1"
	dialogflowv1alpha1 "kubeform.dev/provider-google-api/apis/dialogflow/v1alpha1"
	dnsv1alpha1 "kubeform.dev/provider-google-api/apis/dns/v1alpha1"
	endpointsv1alpha1 "kubeform.dev/provider-google-api/apis/endpoints/v1alpha1"
	eventarcv1alpha1 "kubeform.dev/provider-google-api/apis/eventarc/v1alpha1"
	filestorev1alpha1 "kubeform.dev/provider-google-api/apis/filestore/v1alpha1"
	firestorev1alpha1 "kubeform.dev/provider-google-api/apis/firestore/v1alpha1"
	folderv1alpha1 "kubeform.dev/provider-google-api/apis/folder/v1alpha1"
	gamev1alpha1 "kubeform.dev/provider-google-api/apis/game/v1alpha1"
	healthcarev1alpha1 "kubeform.dev/provider-google-api/apis/healthcare/v1alpha1"
	iapv1alpha1 "kubeform.dev/provider-google-api/apis/iap/v1alpha1"
	identityv1alpha1 "kubeform.dev/provider-google-api/apis/identity/v1alpha1"
	kmsv1alpha1 "kubeform.dev/provider-google-api/apis/kms/v1alpha1"
	loggingv1alpha1 "kubeform.dev/provider-google-api/apis/logging/v1alpha1"
	memcachev1alpha1 "kubeform.dev/provider-google-api/apis/memcache/v1alpha1"
	mlv1alpha1 "kubeform.dev/provider-google-api/apis/ml/v1alpha1"
	monitoringv1alpha1 "kubeform.dev/provider-google-api/apis/monitoring/v1alpha1"
	networkv1alpha1 "kubeform.dev/provider-google-api/apis/network/v1alpha1"
	notebooksv1alpha1 "kubeform.dev/provider-google-api/apis/notebooks/v1alpha1"
	organizationv1alpha1 "kubeform.dev/provider-google-api/apis/organization/v1alpha1"
	osv1alpha1 "kubeform.dev/provider-google-api/apis/os/v1alpha1"
	projectv1alpha1 "kubeform.dev/provider-google-api/apis/project/v1alpha1"
	pubsubv1alpha1 "kubeform.dev/provider-google-api/apis/pubsub/v1alpha1"
	redisv1alpha1 "kubeform.dev/provider-google-api/apis/redis/v1alpha1"
	resourcev1alpha1 "kubeform.dev/provider-google-api/apis/resource/v1alpha1"
	runtimeconfigv1alpha1 "kubeform.dev/provider-google-api/apis/runtimeconfig/v1alpha1"
	sccv1alpha1 "kubeform.dev/provider-google-api/apis/scc/v1alpha1"
	secretv1alpha1 "kubeform.dev/provider-google-api/apis/secret/v1alpha1"
	servicev1alpha1 "kubeform.dev/provider-google-api/apis/service/v1alpha1"
	sourcereporepositoryv1alpha1 "kubeform.dev/provider-google-api/apis/sourcereporepository/v1alpha1"
	spannerv1alpha1 "kubeform.dev/provider-google-api/apis/spanner/v1alpha1"
	sqlv1alpha1 "kubeform.dev/provider-google-api/apis/sql/v1alpha1"
	storagev1alpha1 "kubeform.dev/provider-google-api/apis/storage/v1alpha1"
	tagsv1alpha1 "kubeform.dev/provider-google-api/apis/tags/v1alpha1"
	tpuv1alpha1 "kubeform.dev/provider-google-api/apis/tpu/v1alpha1"
	vertexv1alpha1 "kubeform.dev/provider-google-api/apis/vertex/v1alpha1"
	vpcv1alpha1 "kubeform.dev/provider-google-api/apis/vpc/v1alpha1"
	workflowsv1alpha1 "kubeform.dev/provider-google-api/apis/workflows/v1alpha1"
	controllersaccesscontext "kubeform.dev/provider-google-controller/controllers/accesscontext"
	controllersactive "kubeform.dev/provider-google-controller/controllers/active"
	controllersapigee "kubeform.dev/provider-google-controller/controllers/apigee"
	controllersappengine "kubeform.dev/provider-google-controller/controllers/appengine"
	controllersbigquery "kubeform.dev/provider-google-controller/controllers/bigquery"
	controllersbigtable "kubeform.dev/provider-google-controller/controllers/bigtable"
	controllersbillingaccount "kubeform.dev/provider-google-controller/controllers/billingaccount"
	controllersbillingbudget "kubeform.dev/provider-google-controller/controllers/billingbudget"
	controllersbillingsubaccount "kubeform.dev/provider-google-controller/controllers/billingsubaccount"
	controllersbinaryauthorization "kubeform.dev/provider-google-controller/controllers/binaryauthorization"
	controllerscloud "kubeform.dev/provider-google-controller/controllers/cloud"
	controllerscloudbuild "kubeform.dev/provider-google-controller/controllers/cloudbuild"
	controllerscloudfunctionsfunction "kubeform.dev/provider-google-controller/controllers/cloudfunctionsfunction"
	controllerscloudiot "kubeform.dev/provider-google-controller/controllers/cloudiot"
	controllerscomposer "kubeform.dev/provider-google-controller/controllers/composer"
	controllerscompute "kubeform.dev/provider-google-controller/controllers/compute"
	controllerscontainer "kubeform.dev/provider-google-controller/controllers/container"
	controllersdata "kubeform.dev/provider-google-controller/controllers/data"
	controllersdataflow "kubeform.dev/provider-google-controller/controllers/dataflow"
	controllersdataproc "kubeform.dev/provider-google-controller/controllers/dataproc"
	controllersdatastore "kubeform.dev/provider-google-controller/controllers/datastore"
	controllersdeployment "kubeform.dev/provider-google-controller/controllers/deployment"
	controllersdialogflow "kubeform.dev/provider-google-controller/controllers/dialogflow"
	controllersdns "kubeform.dev/provider-google-controller/controllers/dns"
	controllersendpoints "kubeform.dev/provider-google-controller/controllers/endpoints"
	controllerseventarc "kubeform.dev/provider-google-controller/controllers/eventarc"
	controllersfilestore "kubeform.dev/provider-google-controller/controllers/filestore"
	controllersfirestore "kubeform.dev/provider-google-controller/controllers/firestore"
	controllersfolder "kubeform.dev/provider-google-controller/controllers/folder"
	controllersgame "kubeform.dev/provider-google-controller/controllers/game"
	controllershealthcare "kubeform.dev/provider-google-controller/controllers/healthcare"
	controllersiap "kubeform.dev/provider-google-controller/controllers/iap"
	controllersidentity "kubeform.dev/provider-google-controller/controllers/identity"
	controllerskms "kubeform.dev/provider-google-controller/controllers/kms"
	controllerslogging "kubeform.dev/provider-google-controller/controllers/logging"
	controllersmemcache "kubeform.dev/provider-google-controller/controllers/memcache"
	controllersml "kubeform.dev/provider-google-controller/controllers/ml"
	controllersmonitoring "kubeform.dev/provider-google-controller/controllers/monitoring"
	controllersnetwork "kubeform.dev/provider-google-controller/controllers/network"
	controllersnotebooks "kubeform.dev/provider-google-controller/controllers/notebooks"
	controllersorganization "kubeform.dev/provider-google-controller/controllers/organization"
	controllersos "kubeform.dev/provider-google-controller/controllers/os"
	controllersproject "kubeform.dev/provider-google-controller/controllers/project"
	controllerspubsub "kubeform.dev/provider-google-controller/controllers/pubsub"
	controllersredis "kubeform.dev/provider-google-controller/controllers/redis"
	controllersresource "kubeform.dev/provider-google-controller/controllers/resource"
	controllersruntimeconfig "kubeform.dev/provider-google-controller/controllers/runtimeconfig"
	controllersscc "kubeform.dev/provider-google-controller/controllers/scc"
	controllerssecret "kubeform.dev/provider-google-controller/controllers/secret"
	controllersservice "kubeform.dev/provider-google-controller/controllers/service"
	controllerssourcereporepository "kubeform.dev/provider-google-controller/controllers/sourcereporepository"
	controllersspanner "kubeform.dev/provider-google-controller/controllers/spanner"
	controllerssql "kubeform.dev/provider-google-controller/controllers/sql"
	controllersstorage "kubeform.dev/provider-google-controller/controllers/storage"
	controllerstags "kubeform.dev/provider-google-controller/controllers/tags"
	controllerstpu "kubeform.dev/provider-google-controller/controllers/tpu"
	controllersvertex "kubeform.dev/provider-google-controller/controllers/vertex"
	controllersvpc "kubeform.dev/provider-google-controller/controllers/vpc"
	controllersworkflows "kubeform.dev/provider-google-controller/controllers/workflows"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/manager"
)

var runningControllers = struct {
	sync.RWMutex
	mp map[schema.GroupVersionKind]bool
}{mp: make(map[schema.GroupVersionKind]bool)}

func watchCRD(ctx context.Context, crdClient *clientset.Clientset, vwcClient *admissionregistrationv1.AdmissionregistrationV1Client, stopCh <-chan struct{}, mgr manager.Manager, auditor *auditlib.EventPublisher, watchOnlyDefault bool) error {
	informerFactory := informers.NewSharedInformerFactory(crdClient, time.Second*30)
	i := informerFactory.Apiextensions().V1beta1().CustomResourceDefinitions().Informer()
	l := informerFactory.Apiextensions().V1beta1().CustomResourceDefinitions().Lister()

	i.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			var key string
			key, err := cache.MetaNamespaceKeyFunc(obj)
			if err != nil {
				klog.Error(err)
				return
			}

			_, name, err := cache.SplitMetaNamespaceKey(key)
			if err != nil {
				klog.Error(err)
				return
			}

			crd, err := l.Get(name)
			if err != nil {
				klog.Error(err)
				return
			}
			if strings.Contains(crd.Spec.Group, "google.kubeform.com") {
				gvk := schema.GroupVersionKind{
					Group:   crd.Spec.Group,
					Version: crd.Spec.Version,
					Kind:    crd.Spec.Names.Kind,
				}

				// check whether this gvk came before, if no then start the controller
				runningControllers.RLock()
				_, ok := runningControllers.mp[gvk]
				runningControllers.RUnlock()

				if !ok {
					runningControllers.Lock()
					runningControllers.mp[gvk] = true
					runningControllers.Unlock()

					if enableValidatingWebhook {
						// add dynamic ValidatingWebhookConfiguration

						// create empty VWC if the group has come for the first time
						err := createEmptyVWC(vwcClient, gvk)
						if err != nil {
							klog.Error(err)
							return
						}

						// update
						err = updateVWC(vwcClient, gvk)
						if err != nil {
							klog.Error(err)
							return
						}

						err = SetupWebhook(mgr, gvk)
						if err != nil {
							setupLog.Error(err, "unable to enable webhook")
							os.Exit(1)
						}
					}

					err = SetupManager(ctx, mgr, gvk, auditor, watchOnlyDefault)
					if err != nil {
						setupLog.Error(err, "unable to start manager")
						os.Exit(1)
					}
				}
			}
		},
	})

	informerFactory.Start(stopCh)

	return nil
}

func createEmptyVWC(vwcClient *admissionregistrationv1.AdmissionregistrationV1Client, gvk schema.GroupVersionKind) error {
	vwcName := strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-") + "-vwc"
	_, err := vwcClient.ValidatingWebhookConfigurations().Get(context.TODO(), vwcName, metav1.GetOptions{})
	if err == nil || !(errors.IsNotFound(err)) {
		return err
	}

	emptyVWC := &arv1.ValidatingWebhookConfiguration{
		TypeMeta: metav1.TypeMeta{
			Kind:       "ValidatingWebhookConfiguration",
			APIVersion: "admissionregistration.k8s.io/v1",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-") + "-vwc",
			Labels: map[string]string{
				"app.kubernetes.io/instance": "google.kubeform.com",
				"app.kubernetes.io/part-of":  "kubeform.com",
			},
		},
	}
	_, err = vwcClient.ValidatingWebhookConfigurations().Create(context.TODO(), emptyVWC, metav1.CreateOptions{})
	if err != nil {
		return err
	}

	return nil
}

func updateVWC(vwcClient *admissionregistrationv1.AdmissionregistrationV1Client, gvk schema.GroupVersionKind) error {
	vwcName := strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-") + "-vwc"
	vwc, err := vwcClient.ValidatingWebhookConfigurations().Get(context.TODO(), vwcName, metav1.GetOptions{})
	if err != nil {
		return err
	}

	path := "/validate-" + strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-") + "-v1alpha1-" + strings.ToLower(gvk.Kind)
	fail := arv1.Fail
	sideEffects := arv1.SideEffectClassNone
	admissionReviewVersions := []string{"v1"}

	rules := []arv1.RuleWithOperations{
		{
			Operations: []arv1.OperationType{
				arv1.Create,
				arv1.Update,
				arv1.Delete,
			},
			Rule: arv1.Rule{
				APIGroups:   []string{strings.ToLower(gvk.Group)},
				APIVersions: []string{gvk.Version},
				Resources:   []string{strings.ToLower(flect.Pluralize(gvk.Kind))},
			},
		},
	}

	data, err := ioutil.ReadFile("/tmp/k8s-webhook-server/serving-certs/ca.crt")
	if err != nil {
		return err
	}

	name := strings.ToLower(gvk.Kind) + "." + gvk.Group
	for _, webhook := range vwc.Webhooks {
		if webhook.Name == name {
			return nil
		}
	}

	newWebhook := arv1.ValidatingWebhook{
		Name: name,
		ClientConfig: arv1.WebhookClientConfig{
			Service: &arv1.ServiceReference{
				Namespace: webhookNamespace,
				Name:      webhookName,
				Path:      &path,
			},
			CABundle: data,
		},
		Rules:                   rules,
		FailurePolicy:           &fail,
		SideEffects:             &sideEffects,
		AdmissionReviewVersions: admissionReviewVersions,
	}

	vwc.Webhooks = append(vwc.Webhooks, newWebhook)

	_, err = vwcClient.ValidatingWebhookConfigurations().Update(context.TODO(), vwc, metav1.UpdateOptions{})
	if err != nil {
		return err
	}

	return nil
}

func SetupManager(ctx context.Context, mgr manager.Manager, gvk schema.GroupVersionKind, auditor *auditlib.EventPublisher, watchOnlyDefault bool) error {
	switch gvk {
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerAccessLevel",
	}:
		if err := (&controllersaccesscontext.ManagerAccessLevelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerAccessLevel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_access_context_manager_access_level"],
			TypeName:         "google_access_context_manager_access_level",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerAccessLevel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerAccessLevelCondition",
	}:
		if err := (&controllersaccesscontext.ManagerAccessLevelConditionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerAccessLevelCondition"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_access_context_manager_access_level_condition"],
			TypeName:         "google_access_context_manager_access_level_condition",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerAccessLevelCondition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerAccessLevelBatch",
	}:
		if err := (&controllersaccesscontext.ManagerAccessLevelBatchReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerAccessLevelBatch"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_access_context_manager_access_levels"],
			TypeName:         "google_access_context_manager_access_levels",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerAccessLevelBatch")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerAccessPolicy",
	}:
		if err := (&controllersaccesscontext.ManagerAccessPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerAccessPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_access_context_manager_access_policy"],
			TypeName:         "google_access_context_manager_access_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerAccessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerGcpUserAccessBinding",
	}:
		if err := (&controllersaccesscontext.ManagerGcpUserAccessBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerGcpUserAccessBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_access_context_manager_gcp_user_access_binding"],
			TypeName:         "google_access_context_manager_gcp_user_access_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerGcpUserAccessBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerServicePerimeter",
	}:
		if err := (&controllersaccesscontext.ManagerServicePerimeterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerServicePerimeter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_access_context_manager_service_perimeter"],
			TypeName:         "google_access_context_manager_service_perimeter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerServicePerimeter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerServicePerimeterResource",
	}:
		if err := (&controllersaccesscontext.ManagerServicePerimeterResourceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerServicePerimeterResource"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_access_context_manager_service_perimeter_resource"],
			TypeName:         "google_access_context_manager_service_perimeter_resource",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerServicePerimeterResource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerServicePerimeterBatch",
	}:
		if err := (&controllersaccesscontext.ManagerServicePerimeterBatchReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerServicePerimeterBatch"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_access_context_manager_service_perimeters"],
			TypeName:         "google_access_context_manager_service_perimeters",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerServicePerimeterBatch")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "active.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DirectoryDomain",
	}:
		if err := (&controllersactive.DirectoryDomainReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DirectoryDomain"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_active_directory_domain"],
			TypeName:         "google_active_directory_domain",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DirectoryDomain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "active.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DirectoryDomainTrust",
	}:
		if err := (&controllersactive.DirectoryDomainTrustReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DirectoryDomainTrust"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_active_directory_domain_trust"],
			TypeName:         "google_active_directory_domain_trust",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DirectoryDomainTrust")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigee.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Envgroup",
	}:
		if err := (&controllersapigee.EnvgroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Envgroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_apigee_envgroup"],
			TypeName:         "google_apigee_envgroup",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Envgroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigee.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EnvgroupAttachment",
	}:
		if err := (&controllersapigee.EnvgroupAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EnvgroupAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_apigee_envgroup_attachment"],
			TypeName:         "google_apigee_envgroup_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EnvgroupAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigee.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Environment",
	}:
		if err := (&controllersapigee.EnvironmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Environment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_apigee_environment"],
			TypeName:         "google_apigee_environment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Environment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigee.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersapigee.InstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_apigee_instance"],
			TypeName:         "google_apigee_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigee.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceAttachment",
	}:
		if err := (&controllersapigee.InstanceAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_apigee_instance_attachment"],
			TypeName:         "google_apigee_instance_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigee.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Organization",
	}:
		if err := (&controllersapigee.OrganizationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Organization"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_apigee_organization"],
			TypeName:         "google_apigee_organization",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Organization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&controllersappengine.ApplicationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Application"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_app_engine_application"],
			TypeName:         "google_app_engine_application",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationURLDispatchRules",
	}:
		if err := (&controllersappengine.ApplicationURLDispatchRulesReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApplicationURLDispatchRules"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_app_engine_application_url_dispatch_rules"],
			TypeName:         "google_app_engine_application_url_dispatch_rules",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApplicationURLDispatchRules")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainMapping",
	}:
		if err := (&controllersappengine.DomainMappingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DomainMapping"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_app_engine_domain_mapping"],
			TypeName:         "google_app_engine_domain_mapping",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainMapping")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&controllersappengine.FirewallRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FirewallRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_app_engine_firewall_rule"],
			TypeName:         "google_app_engine_firewall_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FlexibleAppVersion",
	}:
		if err := (&controllersappengine.FlexibleAppVersionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FlexibleAppVersion"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_app_engine_flexible_app_version"],
			TypeName:         "google_app_engine_flexible_app_version",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FlexibleAppVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceNetworkSettings",
	}:
		if err := (&controllersappengine.ServiceNetworkSettingsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceNetworkSettings"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_app_engine_service_network_settings"],
			TypeName:         "google_app_engine_service_network_settings",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceNetworkSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceSplitTraffic",
	}:
		if err := (&controllersappengine.ServiceSplitTrafficReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceSplitTraffic"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_app_engine_service_split_traffic"],
			TypeName:         "google_app_engine_service_split_traffic",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceSplitTraffic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StandardAppVersion",
	}:
		if err := (&controllersappengine.StandardAppVersionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StandardAppVersion"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_app_engine_standard_app_version"],
			TypeName:         "google_app_engine_standard_app_version",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StandardAppVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataTransferConfig",
	}:
		if err := (&controllersbigquery.DataTransferConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DataTransferConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigquery_data_transfer_config"],
			TypeName:         "google_bigquery_data_transfer_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataTransferConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dataset",
	}:
		if err := (&controllersbigquery.DatasetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Dataset"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigquery_dataset"],
			TypeName:         "google_bigquery_dataset",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Dataset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasetAccess",
	}:
		if err := (&controllersbigquery.DatasetAccessReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatasetAccess"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigquery_dataset_access"],
			TypeName:         "google_bigquery_dataset_access",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatasetAccess")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasetIamBinding",
	}:
		if err := (&controllersbigquery.DatasetIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatasetIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigquery_dataset_iam_binding"],
			TypeName:         "google_bigquery_dataset_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatasetIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasetIamMember",
	}:
		if err := (&controllersbigquery.DatasetIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatasetIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigquery_dataset_iam_member"],
			TypeName:         "google_bigquery_dataset_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatasetIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasetIamPolicy",
	}:
		if err := (&controllersbigquery.DatasetIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatasetIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigquery_dataset_iam_policy"],
			TypeName:         "google_bigquery_dataset_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatasetIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Job",
	}:
		if err := (&controllersbigquery.JobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Job"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigquery_job"],
			TypeName:         "google_bigquery_job",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Job")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Reservation",
	}:
		if err := (&controllersbigquery.ReservationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Reservation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigquery_reservation"],
			TypeName:         "google_bigquery_reservation",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Reservation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Routine",
	}:
		if err := (&controllersbigquery.RoutineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Routine"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigquery_routine"],
			TypeName:         "google_bigquery_routine",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Routine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&controllersbigquery.TableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Table"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigquery_table"],
			TypeName:         "google_bigquery_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableIamBinding",
	}:
		if err := (&controllersbigquery.TableIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TableIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigquery_table_iam_binding"],
			TypeName:         "google_bigquery_table_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TableIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableIamMember",
	}:
		if err := (&controllersbigquery.TableIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TableIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigquery_table_iam_member"],
			TypeName:         "google_bigquery_table_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TableIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableIamPolicy",
	}:
		if err := (&controllersbigquery.TableIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TableIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigquery_table_iam_policy"],
			TypeName:         "google_bigquery_table_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TableIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppProfile",
	}:
		if err := (&controllersbigtable.AppProfileReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AppProfile"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigtable_app_profile"],
			TypeName:         "google_bigtable_app_profile",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AppProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GcPolicy",
	}:
		if err := (&controllersbigtable.GcPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GcPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigtable_gc_policy"],
			TypeName:         "google_bigtable_gc_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GcPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersbigtable.InstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigtable_instance"],
			TypeName:         "google_bigtable_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamBinding",
	}:
		if err := (&controllersbigtable.InstanceIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigtable_instance_iam_binding"],
			TypeName:         "google_bigtable_instance_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamMember",
	}:
		if err := (&controllersbigtable.InstanceIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigtable_instance_iam_member"],
			TypeName:         "google_bigtable_instance_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamPolicy",
	}:
		if err := (&controllersbigtable.InstanceIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigtable_instance_iam_policy"],
			TypeName:         "google_bigtable_instance_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&controllersbigtable.TableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Table"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigtable_table"],
			TypeName:         "google_bigtable_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableIamBinding",
	}:
		if err := (&controllersbigtable.TableIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TableIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigtable_table_iam_binding"],
			TypeName:         "google_bigtable_table_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TableIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableIamMember",
	}:
		if err := (&controllersbigtable.TableIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TableIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigtable_table_iam_member"],
			TypeName:         "google_bigtable_table_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TableIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableIamPolicy",
	}:
		if err := (&controllersbigtable.TableIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TableIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_bigtable_table_iam_policy"],
			TypeName:         "google_bigtable_table_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TableIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "billingaccount.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamBinding",
	}:
		if err := (&controllersbillingaccount.IamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_billing_account_iam_binding"],
			TypeName:         "google_billing_account_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "billingaccount.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamMember",
	}:
		if err := (&controllersbillingaccount.IamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_billing_account_iam_member"],
			TypeName:         "google_billing_account_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "billingaccount.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamPolicy",
	}:
		if err := (&controllersbillingaccount.IamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_billing_account_iam_policy"],
			TypeName:         "google_billing_account_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "billingbudget.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BillingBudget",
	}:
		if err := (&controllersbillingbudget.BillingBudgetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BillingBudget"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_billing_budget"],
			TypeName:         "google_billing_budget",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BillingBudget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "billingsubaccount.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BillingSubaccount",
	}:
		if err := (&controllersbillingsubaccount.BillingSubaccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BillingSubaccount"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_billing_subaccount"],
			TypeName:         "google_billing_subaccount",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BillingSubaccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "binaryauthorization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attestor",
	}:
		if err := (&controllersbinaryauthorization.AttestorReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Attestor"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_binary_authorization_attestor"],
			TypeName:         "google_binary_authorization_attestor",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Attestor")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "binaryauthorization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AttestorIamBinding",
	}:
		if err := (&controllersbinaryauthorization.AttestorIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AttestorIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_binary_authorization_attestor_iam_binding"],
			TypeName:         "google_binary_authorization_attestor_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AttestorIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "binaryauthorization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AttestorIamMember",
	}:
		if err := (&controllersbinaryauthorization.AttestorIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AttestorIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_binary_authorization_attestor_iam_member"],
			TypeName:         "google_binary_authorization_attestor_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AttestorIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "binaryauthorization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AttestorIamPolicy",
	}:
		if err := (&controllersbinaryauthorization.AttestorIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AttestorIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_binary_authorization_attestor_iam_policy"],
			TypeName:         "google_binary_authorization_attestor_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AttestorIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "binaryauthorization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllersbinaryauthorization.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_binary_authorization_policy"],
			TypeName:         "google_binary_authorization_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssetFolderFeed",
	}:
		if err := (&controllerscloud.AssetFolderFeedReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AssetFolderFeed"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloud_asset_folder_feed"],
			TypeName:         "google_cloud_asset_folder_feed",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AssetFolderFeed")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssetOrganizationFeed",
	}:
		if err := (&controllerscloud.AssetOrganizationFeedReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AssetOrganizationFeed"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloud_asset_organization_feed"],
			TypeName:         "google_cloud_asset_organization_feed",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AssetOrganizationFeed")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssetProjectFeed",
	}:
		if err := (&controllerscloud.AssetProjectFeedReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AssetProjectFeed"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloud_asset_project_feed"],
			TypeName:         "google_cloud_asset_project_feed",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AssetProjectFeed")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityGroup",
	}:
		if err := (&controllerscloud.IdentityGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IdentityGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloud_identity_group"],
			TypeName:         "google_cloud_identity_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IdentityGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityGroupMembership",
	}:
		if err := (&controllerscloud.IdentityGroupMembershipReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IdentityGroupMembership"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloud_identity_group_membership"],
			TypeName:         "google_cloud_identity_group_membership",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IdentityGroupMembership")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RunDomainMapping",
	}:
		if err := (&controllerscloud.RunDomainMappingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RunDomainMapping"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloud_run_domain_mapping"],
			TypeName:         "google_cloud_run_domain_mapping",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RunDomainMapping")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RunService",
	}:
		if err := (&controllerscloud.RunServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RunService"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloud_run_service"],
			TypeName:         "google_cloud_run_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RunService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RunServiceIamBinding",
	}:
		if err := (&controllerscloud.RunServiceIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RunServiceIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloud_run_service_iam_binding"],
			TypeName:         "google_cloud_run_service_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RunServiceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RunServiceIamMember",
	}:
		if err := (&controllerscloud.RunServiceIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RunServiceIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloud_run_service_iam_member"],
			TypeName:         "google_cloud_run_service_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RunServiceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RunServiceIamPolicy",
	}:
		if err := (&controllerscloud.RunServiceIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RunServiceIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloud_run_service_iam_policy"],
			TypeName:         "google_cloud_run_service_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RunServiceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SchedulerJob",
	}:
		if err := (&controllerscloud.SchedulerJobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SchedulerJob"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloud_scheduler_job"],
			TypeName:         "google_cloud_scheduler_job",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SchedulerJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TasksQueue",
	}:
		if err := (&controllerscloud.TasksQueueReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TasksQueue"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloud_tasks_queue"],
			TypeName:         "google_cloud_tasks_queue",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TasksQueue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudbuild.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Trigger",
	}:
		if err := (&controllerscloudbuild.TriggerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Trigger"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloudbuild_trigger"],
			TypeName:         "google_cloudbuild_trigger",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Trigger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfunctionsfunction.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudfunctionsFunction",
	}:
		if err := (&controllerscloudfunctionsfunction.CloudfunctionsFunctionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CloudfunctionsFunction"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloudfunctions_function"],
			TypeName:         "google_cloudfunctions_function",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CloudfunctionsFunction")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfunctionsfunction.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamBinding",
	}:
		if err := (&controllerscloudfunctionsfunction.IamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloudfunctions_function_iam_binding"],
			TypeName:         "google_cloudfunctions_function_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfunctionsfunction.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamMember",
	}:
		if err := (&controllerscloudfunctionsfunction.IamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloudfunctions_function_iam_member"],
			TypeName:         "google_cloudfunctions_function_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfunctionsfunction.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamPolicy",
	}:
		if err := (&controllerscloudfunctionsfunction.IamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloudfunctions_function_iam_policy"],
			TypeName:         "google_cloudfunctions_function_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudiot.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Device",
	}:
		if err := (&controllerscloudiot.DeviceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Device"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloudiot_device"],
			TypeName:         "google_cloudiot_device",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Device")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudiot.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Registry",
	}:
		if err := (&controllerscloudiot.RegistryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Registry"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_cloudiot_registry"],
			TypeName:         "google_cloudiot_registry",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Registry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "composer.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Environment",
	}:
		if err := (&controllerscomposer.EnvironmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Environment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_composer_environment"],
			TypeName:         "google_composer_environment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Environment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Address",
	}:
		if err := (&controllerscompute.AddressReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Address"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_address"],
			TypeName:         "google_compute_address",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Address")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AttachedDisk",
	}:
		if err := (&controllerscompute.AttachedDiskReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AttachedDisk"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_attached_disk"],
			TypeName:         "google_compute_attached_disk",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AttachedDisk")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Autoscaler",
	}:
		if err := (&controllerscompute.AutoscalerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Autoscaler"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_autoscaler"],
			TypeName:         "google_compute_autoscaler",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Autoscaler")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendBucket",
	}:
		if err := (&controllerscompute.BackendBucketReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BackendBucket"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_backend_bucket"],
			TypeName:         "google_compute_backend_bucket",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackendBucket")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendBucketSignedURLKey",
	}:
		if err := (&controllerscompute.BackendBucketSignedURLKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BackendBucketSignedURLKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_backend_bucket_signed_url_key"],
			TypeName:         "google_compute_backend_bucket_signed_url_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackendBucketSignedURLKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendService",
	}:
		if err := (&controllerscompute.BackendServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BackendService"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_backend_service"],
			TypeName:         "google_compute_backend_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackendService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendServiceSignedURLKey",
	}:
		if err := (&controllerscompute.BackendServiceSignedURLKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BackendServiceSignedURLKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_backend_service_signed_url_key"],
			TypeName:         "google_compute_backend_service_signed_url_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackendServiceSignedURLKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Disk",
	}:
		if err := (&controllerscompute.DiskReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Disk"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_disk"],
			TypeName:         "google_compute_disk",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Disk")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DiskIamBinding",
	}:
		if err := (&controllerscompute.DiskIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DiskIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_disk_iam_binding"],
			TypeName:         "google_compute_disk_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DiskIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DiskIamMember",
	}:
		if err := (&controllerscompute.DiskIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DiskIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_disk_iam_member"],
			TypeName:         "google_compute_disk_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DiskIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DiskIamPolicy",
	}:
		if err := (&controllerscompute.DiskIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DiskIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_disk_iam_policy"],
			TypeName:         "google_compute_disk_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DiskIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DiskResourcePolicyAttachment",
	}:
		if err := (&controllerscompute.DiskResourcePolicyAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DiskResourcePolicyAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_disk_resource_policy_attachment"],
			TypeName:         "google_compute_disk_resource_policy_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DiskResourcePolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ExternalVPNGateway",
	}:
		if err := (&controllerscompute.ExternalVPNGatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ExternalVPNGateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_external_vpn_gateway"],
			TypeName:         "google_compute_external_vpn_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ExternalVPNGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Firewall",
	}:
		if err := (&controllerscompute.FirewallReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Firewall"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_firewall"],
			TypeName:         "google_compute_firewall",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Firewall")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ForwardingRule",
	}:
		if err := (&controllerscompute.ForwardingRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ForwardingRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_forwarding_rule"],
			TypeName:         "google_compute_forwarding_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ForwardingRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalAddress",
	}:
		if err := (&controllerscompute.GlobalAddressReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GlobalAddress"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_global_address"],
			TypeName:         "google_compute_global_address",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GlobalAddress")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalForwardingRule",
	}:
		if err := (&controllerscompute.GlobalForwardingRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GlobalForwardingRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_global_forwarding_rule"],
			TypeName:         "google_compute_global_forwarding_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GlobalForwardingRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalNetworkEndpoint",
	}:
		if err := (&controllerscompute.GlobalNetworkEndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GlobalNetworkEndpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_global_network_endpoint"],
			TypeName:         "google_compute_global_network_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GlobalNetworkEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalNetworkEndpointGroup",
	}:
		if err := (&controllerscompute.GlobalNetworkEndpointGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GlobalNetworkEndpointGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_global_network_endpoint_group"],
			TypeName:         "google_compute_global_network_endpoint_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GlobalNetworkEndpointGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HaVPNGateway",
	}:
		if err := (&controllerscompute.HaVPNGatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HaVPNGateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_ha_vpn_gateway"],
			TypeName:         "google_compute_ha_vpn_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HaVPNGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HealthCheck",
	}:
		if err := (&controllerscompute.HealthCheckReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HealthCheck"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_health_check"],
			TypeName:         "google_compute_health_check",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HealthCheck")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HttpHealthCheck",
	}:
		if err := (&controllerscompute.HttpHealthCheckReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HttpHealthCheck"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_http_health_check"],
			TypeName:         "google_compute_http_health_check",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HttpHealthCheck")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HttpsHealthCheck",
	}:
		if err := (&controllerscompute.HttpsHealthCheckReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HttpsHealthCheck"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_https_health_check"],
			TypeName:         "google_compute_https_health_check",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HttpsHealthCheck")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Image",
	}:
		if err := (&controllerscompute.ImageReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Image"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_image"],
			TypeName:         "google_compute_image",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Image")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ImageIamBinding",
	}:
		if err := (&controllerscompute.ImageIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ImageIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_image_iam_binding"],
			TypeName:         "google_compute_image_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ImageIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ImageIamMember",
	}:
		if err := (&controllerscompute.ImageIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ImageIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_image_iam_member"],
			TypeName:         "google_compute_image_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ImageIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ImageIamPolicy",
	}:
		if err := (&controllerscompute.ImageIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ImageIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_image_iam_policy"],
			TypeName:         "google_compute_image_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ImageIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllerscompute.InstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_instance"],
			TypeName:         "google_compute_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceFromTemplate",
	}:
		if err := (&controllerscompute.InstanceFromTemplateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceFromTemplate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_instance_from_template"],
			TypeName:         "google_compute_instance_from_template",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceFromTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceGroup",
	}:
		if err := (&controllerscompute.InstanceGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_instance_group"],
			TypeName:         "google_compute_instance_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceGroupManager",
	}:
		if err := (&controllerscompute.InstanceGroupManagerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceGroupManager"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_instance_group_manager"],
			TypeName:         "google_compute_instance_group_manager",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceGroupManager")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceGroupNamedPort",
	}:
		if err := (&controllerscompute.InstanceGroupNamedPortReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceGroupNamedPort"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_instance_group_named_port"],
			TypeName:         "google_compute_instance_group_named_port",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceGroupNamedPort")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamBinding",
	}:
		if err := (&controllerscompute.InstanceIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_instance_iam_binding"],
			TypeName:         "google_compute_instance_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamMember",
	}:
		if err := (&controllerscompute.InstanceIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_instance_iam_member"],
			TypeName:         "google_compute_instance_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamPolicy",
	}:
		if err := (&controllerscompute.InstanceIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_instance_iam_policy"],
			TypeName:         "google_compute_instance_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceTemplate",
	}:
		if err := (&controllerscompute.InstanceTemplateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceTemplate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_instance_template"],
			TypeName:         "google_compute_instance_template",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterconnectAttachment",
	}:
		if err := (&controllerscompute.InterconnectAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InterconnectAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_interconnect_attachment"],
			TypeName:         "google_compute_interconnect_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InterconnectAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedSslCertificate",
	}:
		if err := (&controllerscompute.ManagedSslCertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagedSslCertificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_managed_ssl_certificate"],
			TypeName:         "google_compute_managed_ssl_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagedSslCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Network",
	}:
		if err := (&controllerscompute.NetworkReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Network"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_network"],
			TypeName:         "google_compute_network",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Network")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkEndpoint",
	}:
		if err := (&controllerscompute.NetworkEndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NetworkEndpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_network_endpoint"],
			TypeName:         "google_compute_network_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkEndpointGroup",
	}:
		if err := (&controllerscompute.NetworkEndpointGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NetworkEndpointGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_network_endpoint_group"],
			TypeName:         "google_compute_network_endpoint_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkEndpointGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkPeering",
	}:
		if err := (&controllerscompute.NetworkPeeringReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NetworkPeering"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_network_peering"],
			TypeName:         "google_compute_network_peering",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkPeering")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkPeeringRoutesConfig",
	}:
		if err := (&controllerscompute.NetworkPeeringRoutesConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NetworkPeeringRoutesConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_network_peering_routes_config"],
			TypeName:         "google_compute_network_peering_routes_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkPeeringRoutesConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NodeGroup",
	}:
		if err := (&controllerscompute.NodeGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NodeGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_node_group"],
			TypeName:         "google_compute_node_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NodeGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NodeTemplate",
	}:
		if err := (&controllerscompute.NodeTemplateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NodeTemplate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_node_template"],
			TypeName:         "google_compute_node_template",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NodeTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PacketMirroring",
	}:
		if err := (&controllerscompute.PacketMirroringReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PacketMirroring"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_packet_mirroring"],
			TypeName:         "google_compute_packet_mirroring",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PacketMirroring")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PerInstanceConfig",
	}:
		if err := (&controllerscompute.PerInstanceConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PerInstanceConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_per_instance_config"],
			TypeName:         "google_compute_per_instance_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PerInstanceConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProjectDefaultNetworkTier",
	}:
		if err := (&controllerscompute.ProjectDefaultNetworkTierReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProjectDefaultNetworkTier"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_project_default_network_tier"],
			TypeName:         "google_compute_project_default_network_tier",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProjectDefaultNetworkTier")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProjectMetadata",
	}:
		if err := (&controllerscompute.ProjectMetadataReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProjectMetadata"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_project_metadata"],
			TypeName:         "google_compute_project_metadata",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProjectMetadata")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProjectMetadataItem",
	}:
		if err := (&controllerscompute.ProjectMetadataItemReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProjectMetadataItem"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_project_metadata_item"],
			TypeName:         "google_compute_project_metadata_item",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProjectMetadataItem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionAutoscaler",
	}:
		if err := (&controllerscompute.RegionAutoscalerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionAutoscaler"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_autoscaler"],
			TypeName:         "google_compute_region_autoscaler",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionAutoscaler")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionBackendService",
	}:
		if err := (&controllerscompute.RegionBackendServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionBackendService"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_backend_service"],
			TypeName:         "google_compute_region_backend_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionBackendService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionDisk",
	}:
		if err := (&controllerscompute.RegionDiskReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionDisk"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_disk"],
			TypeName:         "google_compute_region_disk",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionDisk")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionDiskIamBinding",
	}:
		if err := (&controllerscompute.RegionDiskIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionDiskIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_disk_iam_binding"],
			TypeName:         "google_compute_region_disk_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionDiskIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionDiskIamMember",
	}:
		if err := (&controllerscompute.RegionDiskIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionDiskIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_disk_iam_member"],
			TypeName:         "google_compute_region_disk_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionDiskIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionDiskIamPolicy",
	}:
		if err := (&controllerscompute.RegionDiskIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionDiskIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_disk_iam_policy"],
			TypeName:         "google_compute_region_disk_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionDiskIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionDiskResourcePolicyAttachment",
	}:
		if err := (&controllerscompute.RegionDiskResourcePolicyAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionDiskResourcePolicyAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_disk_resource_policy_attachment"],
			TypeName:         "google_compute_region_disk_resource_policy_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionDiskResourcePolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionHealthCheck",
	}:
		if err := (&controllerscompute.RegionHealthCheckReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionHealthCheck"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_health_check"],
			TypeName:         "google_compute_region_health_check",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionHealthCheck")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionInstanceGroupManager",
	}:
		if err := (&controllerscompute.RegionInstanceGroupManagerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionInstanceGroupManager"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_instance_group_manager"],
			TypeName:         "google_compute_region_instance_group_manager",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionInstanceGroupManager")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionNetworkEndpointGroup",
	}:
		if err := (&controllerscompute.RegionNetworkEndpointGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionNetworkEndpointGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_network_endpoint_group"],
			TypeName:         "google_compute_region_network_endpoint_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionNetworkEndpointGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionPerInstanceConfig",
	}:
		if err := (&controllerscompute.RegionPerInstanceConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionPerInstanceConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_per_instance_config"],
			TypeName:         "google_compute_region_per_instance_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionPerInstanceConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionSslCertificate",
	}:
		if err := (&controllerscompute.RegionSslCertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionSslCertificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_ssl_certificate"],
			TypeName:         "google_compute_region_ssl_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionSslCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionTargetHTTPProxy",
	}:
		if err := (&controllerscompute.RegionTargetHTTPProxyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionTargetHTTPProxy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_target_http_proxy"],
			TypeName:         "google_compute_region_target_http_proxy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionTargetHTTPProxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionTargetHTTPSProxy",
	}:
		if err := (&controllerscompute.RegionTargetHTTPSProxyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionTargetHTTPSProxy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_target_https_proxy"],
			TypeName:         "google_compute_region_target_https_proxy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionTargetHTTPSProxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionURLMap",
	}:
		if err := (&controllerscompute.RegionURLMapReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionURLMap"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_region_url_map"],
			TypeName:         "google_compute_region_url_map",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionURLMap")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Reservation",
	}:
		if err := (&controllerscompute.ReservationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Reservation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_reservation"],
			TypeName:         "google_compute_reservation",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Reservation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourcePolicy",
	}:
		if err := (&controllerscompute.ResourcePolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResourcePolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_resource_policy"],
			TypeName:         "google_compute_resource_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResourcePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Route",
	}:
		if err := (&controllerscompute.RouteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Route"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_route"],
			TypeName:         "google_compute_route",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Route")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Router",
	}:
		if err := (&controllerscompute.RouterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Router"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_router"],
			TypeName:         "google_compute_router",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Router")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouterInterface",
	}:
		if err := (&controllerscompute.RouterInterfaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RouterInterface"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_router_interface"],
			TypeName:         "google_compute_router_interface",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RouterInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouterNAT",
	}:
		if err := (&controllerscompute.RouterNATReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RouterNAT"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_router_nat"],
			TypeName:         "google_compute_router_nat",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RouterNAT")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouterPeer",
	}:
		if err := (&controllerscompute.RouterPeerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RouterPeer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_router_peer"],
			TypeName:         "google_compute_router_peer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RouterPeer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityPolicy",
	}:
		if err := (&controllerscompute.SecurityPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecurityPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_security_policy"],
			TypeName:         "google_compute_security_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecurityPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SharedVpcHostProject",
	}:
		if err := (&controllerscompute.SharedVpcHostProjectReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SharedVpcHostProject"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_shared_vpc_host_project"],
			TypeName:         "google_compute_shared_vpc_host_project",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SharedVpcHostProject")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SharedVpcServiceProject",
	}:
		if err := (&controllerscompute.SharedVpcServiceProjectReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SharedVpcServiceProject"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_shared_vpc_service_project"],
			TypeName:         "google_compute_shared_vpc_service_project",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SharedVpcServiceProject")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Snapshot",
	}:
		if err := (&controllerscompute.SnapshotReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Snapshot"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_snapshot"],
			TypeName:         "google_compute_snapshot",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Snapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SslCertificate",
	}:
		if err := (&controllerscompute.SslCertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SslCertificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_ssl_certificate"],
			TypeName:         "google_compute_ssl_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SslCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SslPolicy",
	}:
		if err := (&controllerscompute.SslPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SslPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_ssl_policy"],
			TypeName:         "google_compute_ssl_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SslPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subnetwork",
	}:
		if err := (&controllerscompute.SubnetworkReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Subnetwork"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_subnetwork"],
			TypeName:         "google_compute_subnetwork",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Subnetwork")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetworkIamBinding",
	}:
		if err := (&controllerscompute.SubnetworkIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SubnetworkIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_subnetwork_iam_binding"],
			TypeName:         "google_compute_subnetwork_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubnetworkIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetworkIamMember",
	}:
		if err := (&controllerscompute.SubnetworkIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SubnetworkIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_subnetwork_iam_member"],
			TypeName:         "google_compute_subnetwork_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubnetworkIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetworkIamPolicy",
	}:
		if err := (&controllerscompute.SubnetworkIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SubnetworkIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_subnetwork_iam_policy"],
			TypeName:         "google_compute_subnetwork_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubnetworkIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetGrpcProxy",
	}:
		if err := (&controllerscompute.TargetGrpcProxyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TargetGrpcProxy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_target_grpc_proxy"],
			TypeName:         "google_compute_target_grpc_proxy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TargetGrpcProxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetHTTPProxy",
	}:
		if err := (&controllerscompute.TargetHTTPProxyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TargetHTTPProxy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_target_http_proxy"],
			TypeName:         "google_compute_target_http_proxy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TargetHTTPProxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetHTTPSProxy",
	}:
		if err := (&controllerscompute.TargetHTTPSProxyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TargetHTTPSProxy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_target_https_proxy"],
			TypeName:         "google_compute_target_https_proxy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TargetHTTPSProxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetInstance",
	}:
		if err := (&controllerscompute.TargetInstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TargetInstance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_target_instance"],
			TypeName:         "google_compute_target_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TargetInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetPool",
	}:
		if err := (&controllerscompute.TargetPoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TargetPool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_target_pool"],
			TypeName:         "google_compute_target_pool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TargetPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetSslProxy",
	}:
		if err := (&controllerscompute.TargetSslProxyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TargetSslProxy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_target_ssl_proxy"],
			TypeName:         "google_compute_target_ssl_proxy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TargetSslProxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetTcpProxy",
	}:
		if err := (&controllerscompute.TargetTcpProxyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TargetTcpProxy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_target_tcp_proxy"],
			TypeName:         "google_compute_target_tcp_proxy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TargetTcpProxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UrlMap",
	}:
		if err := (&controllerscompute.UrlMapReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UrlMap"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_url_map"],
			TypeName:         "google_compute_url_map",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UrlMap")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpnGateway",
	}:
		if err := (&controllerscompute.VpnGatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VpnGateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_vpn_gateway"],
			TypeName:         "google_compute_vpn_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpnGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpnTunnel",
	}:
		if err := (&controllerscompute.VpnTunnelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VpnTunnel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_compute_vpn_tunnel"],
			TypeName:         "google_compute_vpn_tunnel",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpnTunnel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalysisNote",
	}:
		if err := (&controllerscontainer.AnalysisNoteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnalysisNote"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_container_analysis_note"],
			TypeName:         "google_container_analysis_note",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnalysisNote")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalysisOccurrence",
	}:
		if err := (&controllerscontainer.AnalysisOccurrenceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnalysisOccurrence"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_container_analysis_occurrence"],
			TypeName:         "google_container_analysis_occurrence",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnalysisOccurrence")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllerscontainer.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_container_cluster"],
			TypeName:         "google_container_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NodePool",
	}:
		if err := (&controllerscontainer.NodePoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NodePool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_container_node_pool"],
			TypeName:         "google_container_node_pool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NodePool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Registry",
	}:
		if err := (&controllerscontainer.RegistryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Registry"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_container_registry"],
			TypeName:         "google_container_registry",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Registry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogEntry",
	}:
		if err := (&controllersdata.CatalogEntryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CatalogEntry"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_data_catalog_entry"],
			TypeName:         "google_data_catalog_entry",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CatalogEntry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogEntryGroup",
	}:
		if err := (&controllersdata.CatalogEntryGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CatalogEntryGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_data_catalog_entry_group"],
			TypeName:         "google_data_catalog_entry_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CatalogEntryGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogEntryGroupIamBinding",
	}:
		if err := (&controllersdata.CatalogEntryGroupIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CatalogEntryGroupIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_data_catalog_entry_group_iam_binding"],
			TypeName:         "google_data_catalog_entry_group_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CatalogEntryGroupIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogEntryGroupIamMember",
	}:
		if err := (&controllersdata.CatalogEntryGroupIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CatalogEntryGroupIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_data_catalog_entry_group_iam_member"],
			TypeName:         "google_data_catalog_entry_group_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CatalogEntryGroupIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogEntryGroupIamPolicy",
	}:
		if err := (&controllersdata.CatalogEntryGroupIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CatalogEntryGroupIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_data_catalog_entry_group_iam_policy"],
			TypeName:         "google_data_catalog_entry_group_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CatalogEntryGroupIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogTag",
	}:
		if err := (&controllersdata.CatalogTagReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CatalogTag"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_data_catalog_tag"],
			TypeName:         "google_data_catalog_tag",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CatalogTag")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogTagTemplate",
	}:
		if err := (&controllersdata.CatalogTagTemplateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CatalogTagTemplate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_data_catalog_tag_template"],
			TypeName:         "google_data_catalog_tag_template",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CatalogTagTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogTagTemplateIamBinding",
	}:
		if err := (&controllersdata.CatalogTagTemplateIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CatalogTagTemplateIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_data_catalog_tag_template_iam_binding"],
			TypeName:         "google_data_catalog_tag_template_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CatalogTagTemplateIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogTagTemplateIamMember",
	}:
		if err := (&controllersdata.CatalogTagTemplateIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CatalogTagTemplateIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_data_catalog_tag_template_iam_member"],
			TypeName:         "google_data_catalog_tag_template_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CatalogTagTemplateIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogTagTemplateIamPolicy",
	}:
		if err := (&controllersdata.CatalogTagTemplateIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CatalogTagTemplateIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_data_catalog_tag_template_iam_policy"],
			TypeName:         "google_data_catalog_tag_template_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CatalogTagTemplateIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LossPreventionDeidentifyTemplate",
	}:
		if err := (&controllersdata.LossPreventionDeidentifyTemplateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LossPreventionDeidentifyTemplate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_data_loss_prevention_deidentify_template"],
			TypeName:         "google_data_loss_prevention_deidentify_template",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LossPreventionDeidentifyTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LossPreventionInspectTemplate",
	}:
		if err := (&controllersdata.LossPreventionInspectTemplateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LossPreventionInspectTemplate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_data_loss_prevention_inspect_template"],
			TypeName:         "google_data_loss_prevention_inspect_template",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LossPreventionInspectTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LossPreventionJobTrigger",
	}:
		if err := (&controllersdata.LossPreventionJobTriggerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LossPreventionJobTrigger"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_data_loss_prevention_job_trigger"],
			TypeName:         "google_data_loss_prevention_job_trigger",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LossPreventionJobTrigger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LossPreventionStoredInfoType",
	}:
		if err := (&controllersdata.LossPreventionStoredInfoTypeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LossPreventionStoredInfoType"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_data_loss_prevention_stored_info_type"],
			TypeName:         "google_data_loss_prevention_stored_info_type",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LossPreventionStoredInfoType")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataflow.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Job",
	}:
		if err := (&controllersdataflow.JobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Job"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dataflow_job"],
			TypeName:         "google_dataflow_job",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Job")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AutoscalingPolicy",
	}:
		if err := (&controllersdataproc.AutoscalingPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AutoscalingPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dataproc_autoscaling_policy"],
			TypeName:         "google_dataproc_autoscaling_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AutoscalingPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersdataproc.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dataproc_cluster"],
			TypeName:         "google_dataproc_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterIamBinding",
	}:
		if err := (&controllersdataproc.ClusterIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dataproc_cluster_iam_binding"],
			TypeName:         "google_dataproc_cluster_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterIamMember",
	}:
		if err := (&controllersdataproc.ClusterIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dataproc_cluster_iam_member"],
			TypeName:         "google_dataproc_cluster_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterIamPolicy",
	}:
		if err := (&controllersdataproc.ClusterIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dataproc_cluster_iam_policy"],
			TypeName:         "google_dataproc_cluster_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Job",
	}:
		if err := (&controllersdataproc.JobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Job"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dataproc_job"],
			TypeName:         "google_dataproc_job",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Job")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobIamBinding",
	}:
		if err := (&controllersdataproc.JobIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("JobIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dataproc_job_iam_binding"],
			TypeName:         "google_dataproc_job_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "JobIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobIamMember",
	}:
		if err := (&controllersdataproc.JobIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("JobIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dataproc_job_iam_member"],
			TypeName:         "google_dataproc_job_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "JobIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobIamPolicy",
	}:
		if err := (&controllersdataproc.JobIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("JobIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dataproc_job_iam_policy"],
			TypeName:         "google_dataproc_job_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "JobIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WorkflowTemplate",
	}:
		if err := (&controllersdataproc.WorkflowTemplateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WorkflowTemplate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dataproc_workflow_template"],
			TypeName:         "google_dataproc_workflow_template",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WorkflowTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datastore.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Index",
	}:
		if err := (&controllersdatastore.IndexReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Index"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_datastore_index"],
			TypeName:         "google_datastore_index",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Index")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "deployment.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerDeployment",
	}:
		if err := (&controllersdeployment.ManagerDeploymentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerDeployment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_deployment_manager_deployment"],
			TypeName:         "google_deployment_manager_deployment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dialogflow.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Agent",
	}:
		if err := (&controllersdialogflow.AgentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Agent"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dialogflow_agent"],
			TypeName:         "google_dialogflow_agent",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Agent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dialogflow.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CxAgent",
	}:
		if err := (&controllersdialogflow.CxAgentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CxAgent"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dialogflow_cx_agent"],
			TypeName:         "google_dialogflow_cx_agent",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CxAgent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dialogflow.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EntityType",
	}:
		if err := (&controllersdialogflow.EntityTypeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EntityType"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dialogflow_entity_type"],
			TypeName:         "google_dialogflow_entity_type",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EntityType")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dialogflow.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Fulfillment",
	}:
		if err := (&controllersdialogflow.FulfillmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Fulfillment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dialogflow_fulfillment"],
			TypeName:         "google_dialogflow_fulfillment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Fulfillment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dialogflow.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Intent",
	}:
		if err := (&controllersdialogflow.IntentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Intent"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dialogflow_intent"],
			TypeName:         "google_dialogflow_intent",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Intent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedZone",
	}:
		if err := (&controllersdns.ManagedZoneReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagedZone"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dns_managed_zone"],
			TypeName:         "google_dns_managed_zone",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagedZone")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllersdns.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dns_policy"],
			TypeName:         "google_dns_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RecordSet",
	}:
		if err := (&controllersdns.RecordSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RecordSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_dns_record_set"],
			TypeName:         "google_dns_record_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RecordSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "endpoints.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&controllersendpoints.ServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Service"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_endpoints_service"],
			TypeName:         "google_endpoints_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "endpoints.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceIamBinding",
	}:
		if err := (&controllersendpoints.ServiceIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_endpoints_service_iam_binding"],
			TypeName:         "google_endpoints_service_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "endpoints.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceIamMember",
	}:
		if err := (&controllersendpoints.ServiceIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_endpoints_service_iam_member"],
			TypeName:         "google_endpoints_service_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "endpoints.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceIamPolicy",
	}:
		if err := (&controllersendpoints.ServiceIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_endpoints_service_iam_policy"],
			TypeName:         "google_endpoints_service_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventarc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Trigger",
	}:
		if err := (&controllerseventarc.TriggerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Trigger"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_eventarc_trigger"],
			TypeName:         "google_eventarc_trigger",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Trigger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "filestore.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersfilestore.InstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_filestore_instance"],
			TypeName:         "google_filestore_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firestore.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Document",
	}:
		if err := (&controllersfirestore.DocumentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Document"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_firestore_document"],
			TypeName:         "google_firestore_document",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Document")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firestore.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Index",
	}:
		if err := (&controllersfirestore.IndexReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Index"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_firestore_index"],
			TypeName:         "google_firestore_index",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Index")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "folder.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Folder",
	}:
		if err := (&controllersfolder.FolderReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Folder"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_folder"],
			TypeName:         "google_folder",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Folder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "folder.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessApprovalSettings",
	}:
		if err := (&controllersfolder.AccessApprovalSettingsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccessApprovalSettings"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_folder_access_approval_settings"],
			TypeName:         "google_folder_access_approval_settings",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccessApprovalSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "folder.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamAuditConfig",
	}:
		if err := (&controllersfolder.IamAuditConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamAuditConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_folder_iam_audit_config"],
			TypeName:         "google_folder_iam_audit_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamAuditConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "folder.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamBinding",
	}:
		if err := (&controllersfolder.IamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_folder_iam_binding"],
			TypeName:         "google_folder_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "folder.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamMember",
	}:
		if err := (&controllersfolder.IamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_folder_iam_member"],
			TypeName:         "google_folder_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "folder.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamPolicy",
	}:
		if err := (&controllersfolder.IamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_folder_iam_policy"],
			TypeName:         "google_folder_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "folder.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationPolicy",
	}:
		if err := (&controllersfolder.OrganizationPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OrganizationPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_folder_organization_policy"],
			TypeName:         "google_folder_organization_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OrganizationPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "game.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesGameServerCluster",
	}:
		if err := (&controllersgame.ServicesGameServerClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServicesGameServerCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_game_services_game_server_cluster"],
			TypeName:         "google_game_services_game_server_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServicesGameServerCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "game.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesGameServerConfig",
	}:
		if err := (&controllersgame.ServicesGameServerConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServicesGameServerConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_game_services_game_server_config"],
			TypeName:         "google_game_services_game_server_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServicesGameServerConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "game.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesGameServerDeployment",
	}:
		if err := (&controllersgame.ServicesGameServerDeploymentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServicesGameServerDeployment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_game_services_game_server_deployment"],
			TypeName:         "google_game_services_game_server_deployment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServicesGameServerDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "game.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesGameServerDeploymentRollout",
	}:
		if err := (&controllersgame.ServicesGameServerDeploymentRolloutReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServicesGameServerDeploymentRollout"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_game_services_game_server_deployment_rollout"],
			TypeName:         "google_game_services_game_server_deployment_rollout",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServicesGameServerDeploymentRollout")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "game.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesRealm",
	}:
		if err := (&controllersgame.ServicesRealmReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServicesRealm"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_game_services_realm"],
			TypeName:         "google_game_services_realm",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServicesRealm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConsentStore",
	}:
		if err := (&controllershealthcare.ConsentStoreReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConsentStore"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_consent_store"],
			TypeName:         "google_healthcare_consent_store",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConsentStore")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConsentStoreIamBinding",
	}:
		if err := (&controllershealthcare.ConsentStoreIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConsentStoreIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_consent_store_iam_binding"],
			TypeName:         "google_healthcare_consent_store_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConsentStoreIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConsentStoreIamMember",
	}:
		if err := (&controllershealthcare.ConsentStoreIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConsentStoreIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_consent_store_iam_member"],
			TypeName:         "google_healthcare_consent_store_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConsentStoreIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConsentStoreIamPolicy",
	}:
		if err := (&controllershealthcare.ConsentStoreIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConsentStoreIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_consent_store_iam_policy"],
			TypeName:         "google_healthcare_consent_store_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConsentStoreIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dataset",
	}:
		if err := (&controllershealthcare.DatasetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Dataset"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_dataset"],
			TypeName:         "google_healthcare_dataset",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Dataset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasetIamBinding",
	}:
		if err := (&controllershealthcare.DatasetIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatasetIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_dataset_iam_binding"],
			TypeName:         "google_healthcare_dataset_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatasetIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasetIamMember",
	}:
		if err := (&controllershealthcare.DatasetIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatasetIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_dataset_iam_member"],
			TypeName:         "google_healthcare_dataset_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatasetIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasetIamPolicy",
	}:
		if err := (&controllershealthcare.DatasetIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatasetIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_dataset_iam_policy"],
			TypeName:         "google_healthcare_dataset_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatasetIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DicomStore",
	}:
		if err := (&controllershealthcare.DicomStoreReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DicomStore"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_dicom_store"],
			TypeName:         "google_healthcare_dicom_store",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DicomStore")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DicomStoreIamBinding",
	}:
		if err := (&controllershealthcare.DicomStoreIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DicomStoreIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_dicom_store_iam_binding"],
			TypeName:         "google_healthcare_dicom_store_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DicomStoreIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DicomStoreIamMember",
	}:
		if err := (&controllershealthcare.DicomStoreIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DicomStoreIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_dicom_store_iam_member"],
			TypeName:         "google_healthcare_dicom_store_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DicomStoreIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DicomStoreIamPolicy",
	}:
		if err := (&controllershealthcare.DicomStoreIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DicomStoreIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_dicom_store_iam_policy"],
			TypeName:         "google_healthcare_dicom_store_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DicomStoreIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FhirStore",
	}:
		if err := (&controllershealthcare.FhirStoreReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FhirStore"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_fhir_store"],
			TypeName:         "google_healthcare_fhir_store",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FhirStore")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FhirStoreIamBinding",
	}:
		if err := (&controllershealthcare.FhirStoreIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FhirStoreIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_fhir_store_iam_binding"],
			TypeName:         "google_healthcare_fhir_store_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FhirStoreIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FhirStoreIamMember",
	}:
		if err := (&controllershealthcare.FhirStoreIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FhirStoreIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_fhir_store_iam_member"],
			TypeName:         "google_healthcare_fhir_store_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FhirStoreIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FhirStoreIamPolicy",
	}:
		if err := (&controllershealthcare.FhirStoreIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FhirStoreIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_fhir_store_iam_policy"],
			TypeName:         "google_healthcare_fhir_store_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FhirStoreIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Hl7V2Store",
	}:
		if err := (&controllershealthcare.Hl7V2StoreReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Hl7V2Store"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_hl7_v2_store"],
			TypeName:         "google_healthcare_hl7_v2_store",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Hl7V2Store")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Hl7V2StoreIamBinding",
	}:
		if err := (&controllershealthcare.Hl7V2StoreIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Hl7V2StoreIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_hl7_v2_store_iam_binding"],
			TypeName:         "google_healthcare_hl7_v2_store_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Hl7V2StoreIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Hl7V2StoreIamMember",
	}:
		if err := (&controllershealthcare.Hl7V2StoreIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Hl7V2StoreIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_hl7_v2_store_iam_member"],
			TypeName:         "google_healthcare_hl7_v2_store_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Hl7V2StoreIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Hl7V2StoreIamPolicy",
	}:
		if err := (&controllershealthcare.Hl7V2StoreIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Hl7V2StoreIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_healthcare_hl7_v2_store_iam_policy"],
			TypeName:         "google_healthcare_hl7_v2_store_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Hl7V2StoreIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppEngineServiceIamBinding",
	}:
		if err := (&controllersiap.AppEngineServiceIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AppEngineServiceIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_app_engine_service_iam_binding"],
			TypeName:         "google_iap_app_engine_service_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AppEngineServiceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppEngineServiceIamMember",
	}:
		if err := (&controllersiap.AppEngineServiceIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AppEngineServiceIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_app_engine_service_iam_member"],
			TypeName:         "google_iap_app_engine_service_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AppEngineServiceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppEngineServiceIamPolicy",
	}:
		if err := (&controllersiap.AppEngineServiceIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AppEngineServiceIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_app_engine_service_iam_policy"],
			TypeName:         "google_iap_app_engine_service_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AppEngineServiceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppEngineVersionIamBinding",
	}:
		if err := (&controllersiap.AppEngineVersionIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AppEngineVersionIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_app_engine_version_iam_binding"],
			TypeName:         "google_iap_app_engine_version_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AppEngineVersionIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppEngineVersionIamMember",
	}:
		if err := (&controllersiap.AppEngineVersionIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AppEngineVersionIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_app_engine_version_iam_member"],
			TypeName:         "google_iap_app_engine_version_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AppEngineVersionIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppEngineVersionIamPolicy",
	}:
		if err := (&controllersiap.AppEngineVersionIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AppEngineVersionIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_app_engine_version_iam_policy"],
			TypeName:         "google_iap_app_engine_version_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AppEngineVersionIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Brand",
	}:
		if err := (&controllersiap.BrandReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Brand"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_brand"],
			TypeName:         "google_iap_brand",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Brand")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Client",
	}:
		if err := (&controllersiap.ClientReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Client"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_client"],
			TypeName:         "google_iap_client",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Client")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TunnelIamBinding",
	}:
		if err := (&controllersiap.TunnelIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TunnelIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_tunnel_iam_binding"],
			TypeName:         "google_iap_tunnel_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TunnelIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TunnelIamMember",
	}:
		if err := (&controllersiap.TunnelIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TunnelIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_tunnel_iam_member"],
			TypeName:         "google_iap_tunnel_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TunnelIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TunnelIamPolicy",
	}:
		if err := (&controllersiap.TunnelIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TunnelIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_tunnel_iam_policy"],
			TypeName:         "google_iap_tunnel_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TunnelIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TunnelInstanceIamBinding",
	}:
		if err := (&controllersiap.TunnelInstanceIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TunnelInstanceIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_tunnel_instance_iam_binding"],
			TypeName:         "google_iap_tunnel_instance_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TunnelInstanceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TunnelInstanceIamMember",
	}:
		if err := (&controllersiap.TunnelInstanceIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TunnelInstanceIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_tunnel_instance_iam_member"],
			TypeName:         "google_iap_tunnel_instance_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TunnelInstanceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TunnelInstanceIamPolicy",
	}:
		if err := (&controllersiap.TunnelInstanceIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TunnelInstanceIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_tunnel_instance_iam_policy"],
			TypeName:         "google_iap_tunnel_instance_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TunnelInstanceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebBackendServiceIamBinding",
	}:
		if err := (&controllersiap.WebBackendServiceIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebBackendServiceIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_web_backend_service_iam_binding"],
			TypeName:         "google_iap_web_backend_service_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebBackendServiceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebBackendServiceIamMember",
	}:
		if err := (&controllersiap.WebBackendServiceIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebBackendServiceIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_web_backend_service_iam_member"],
			TypeName:         "google_iap_web_backend_service_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebBackendServiceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebBackendServiceIamPolicy",
	}:
		if err := (&controllersiap.WebBackendServiceIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebBackendServiceIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_web_backend_service_iam_policy"],
			TypeName:         "google_iap_web_backend_service_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebBackendServiceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebIamBinding",
	}:
		if err := (&controllersiap.WebIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_web_iam_binding"],
			TypeName:         "google_iap_web_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebIamMember",
	}:
		if err := (&controllersiap.WebIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_web_iam_member"],
			TypeName:         "google_iap_web_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebIamPolicy",
	}:
		if err := (&controllersiap.WebIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_web_iam_policy"],
			TypeName:         "google_iap_web_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebTypeAppEngineIamBinding",
	}:
		if err := (&controllersiap.WebTypeAppEngineIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebTypeAppEngineIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_web_type_app_engine_iam_binding"],
			TypeName:         "google_iap_web_type_app_engine_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebTypeAppEngineIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebTypeAppEngineIamMember",
	}:
		if err := (&controllersiap.WebTypeAppEngineIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebTypeAppEngineIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_web_type_app_engine_iam_member"],
			TypeName:         "google_iap_web_type_app_engine_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebTypeAppEngineIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebTypeAppEngineIamPolicy",
	}:
		if err := (&controllersiap.WebTypeAppEngineIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebTypeAppEngineIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_web_type_app_engine_iam_policy"],
			TypeName:         "google_iap_web_type_app_engine_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebTypeAppEngineIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebTypeComputeIamBinding",
	}:
		if err := (&controllersiap.WebTypeComputeIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebTypeComputeIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_web_type_compute_iam_binding"],
			TypeName:         "google_iap_web_type_compute_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebTypeComputeIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebTypeComputeIamMember",
	}:
		if err := (&controllersiap.WebTypeComputeIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebTypeComputeIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_web_type_compute_iam_member"],
			TypeName:         "google_iap_web_type_compute_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebTypeComputeIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebTypeComputeIamPolicy",
	}:
		if err := (&controllersiap.WebTypeComputeIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebTypeComputeIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_iap_web_type_compute_iam_policy"],
			TypeName:         "google_iap_web_type_compute_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebTypeComputeIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "identity.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformDefaultSupportedIdpConfig",
	}:
		if err := (&controllersidentity.PlatformDefaultSupportedIdpConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PlatformDefaultSupportedIdpConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_identity_platform_default_supported_idp_config"],
			TypeName:         "google_identity_platform_default_supported_idp_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PlatformDefaultSupportedIdpConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "identity.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformInboundSamlConfig",
	}:
		if err := (&controllersidentity.PlatformInboundSamlConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PlatformInboundSamlConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_identity_platform_inbound_saml_config"],
			TypeName:         "google_identity_platform_inbound_saml_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PlatformInboundSamlConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "identity.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformOauthIdpConfig",
	}:
		if err := (&controllersidentity.PlatformOauthIdpConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PlatformOauthIdpConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_identity_platform_oauth_idp_config"],
			TypeName:         "google_identity_platform_oauth_idp_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PlatformOauthIdpConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "identity.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformTenant",
	}:
		if err := (&controllersidentity.PlatformTenantReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PlatformTenant"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_identity_platform_tenant"],
			TypeName:         "google_identity_platform_tenant",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PlatformTenant")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "identity.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformTenantDefaultSupportedIdpConfig",
	}:
		if err := (&controllersidentity.PlatformTenantDefaultSupportedIdpConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PlatformTenantDefaultSupportedIdpConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_identity_platform_tenant_default_supported_idp_config"],
			TypeName:         "google_identity_platform_tenant_default_supported_idp_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PlatformTenantDefaultSupportedIdpConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "identity.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformTenantInboundSamlConfig",
	}:
		if err := (&controllersidentity.PlatformTenantInboundSamlConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PlatformTenantInboundSamlConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_identity_platform_tenant_inbound_saml_config"],
			TypeName:         "google_identity_platform_tenant_inbound_saml_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PlatformTenantInboundSamlConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "identity.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformTenantOauthIdpConfig",
	}:
		if err := (&controllersidentity.PlatformTenantOauthIdpConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PlatformTenantOauthIdpConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_identity_platform_tenant_oauth_idp_config"],
			TypeName:         "google_identity_platform_tenant_oauth_idp_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PlatformTenantOauthIdpConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CryptoKey",
	}:
		if err := (&controllerskms.CryptoKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CryptoKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_kms_crypto_key"],
			TypeName:         "google_kms_crypto_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CryptoKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CryptoKeyIamBinding",
	}:
		if err := (&controllerskms.CryptoKeyIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CryptoKeyIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_kms_crypto_key_iam_binding"],
			TypeName:         "google_kms_crypto_key_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CryptoKeyIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CryptoKeyIamMember",
	}:
		if err := (&controllerskms.CryptoKeyIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CryptoKeyIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_kms_crypto_key_iam_member"],
			TypeName:         "google_kms_crypto_key_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CryptoKeyIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CryptoKeyIamPolicy",
	}:
		if err := (&controllerskms.CryptoKeyIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CryptoKeyIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_kms_crypto_key_iam_policy"],
			TypeName:         "google_kms_crypto_key_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CryptoKeyIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyRing",
	}:
		if err := (&controllerskms.KeyRingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("KeyRing"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_kms_key_ring"],
			TypeName:         "google_kms_key_ring",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KeyRing")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyRingIamBinding",
	}:
		if err := (&controllerskms.KeyRingIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("KeyRingIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_kms_key_ring_iam_binding"],
			TypeName:         "google_kms_key_ring_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KeyRingIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyRingIamMember",
	}:
		if err := (&controllerskms.KeyRingIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("KeyRingIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_kms_key_ring_iam_member"],
			TypeName:         "google_kms_key_ring_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KeyRingIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyRingIamPolicy",
	}:
		if err := (&controllerskms.KeyRingIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("KeyRingIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_kms_key_ring_iam_policy"],
			TypeName:         "google_kms_key_ring_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KeyRingIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyRingImportJob",
	}:
		if err := (&controllerskms.KeyRingImportJobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("KeyRingImportJob"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_kms_key_ring_import_job"],
			TypeName:         "google_kms_key_ring_import_job",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KeyRingImportJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecretCiphertext",
	}:
		if err := (&controllerskms.SecretCiphertextReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecretCiphertext"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_kms_secret_ciphertext"],
			TypeName:         "google_kms_secret_ciphertext",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecretCiphertext")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BillingAccountBucketConfig",
	}:
		if err := (&controllerslogging.BillingAccountBucketConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BillingAccountBucketConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_logging_billing_account_bucket_config"],
			TypeName:         "google_logging_billing_account_bucket_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BillingAccountBucketConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BillingAccountExclusion",
	}:
		if err := (&controllerslogging.BillingAccountExclusionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BillingAccountExclusion"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_logging_billing_account_exclusion"],
			TypeName:         "google_logging_billing_account_exclusion",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BillingAccountExclusion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BillingAccountSink",
	}:
		if err := (&controllerslogging.BillingAccountSinkReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BillingAccountSink"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_logging_billing_account_sink"],
			TypeName:         "google_logging_billing_account_sink",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BillingAccountSink")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FolderBucketConfig",
	}:
		if err := (&controllerslogging.FolderBucketConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FolderBucketConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_logging_folder_bucket_config"],
			TypeName:         "google_logging_folder_bucket_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FolderBucketConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FolderExclusion",
	}:
		if err := (&controllerslogging.FolderExclusionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FolderExclusion"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_logging_folder_exclusion"],
			TypeName:         "google_logging_folder_exclusion",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FolderExclusion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FolderSink",
	}:
		if err := (&controllerslogging.FolderSinkReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FolderSink"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_logging_folder_sink"],
			TypeName:         "google_logging_folder_sink",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FolderSink")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Metric",
	}:
		if err := (&controllerslogging.MetricReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Metric"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_logging_metric"],
			TypeName:         "google_logging_metric",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Metric")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationBucketConfig",
	}:
		if err := (&controllerslogging.OrganizationBucketConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OrganizationBucketConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_logging_organization_bucket_config"],
			TypeName:         "google_logging_organization_bucket_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OrganizationBucketConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationExclusion",
	}:
		if err := (&controllerslogging.OrganizationExclusionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OrganizationExclusion"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_logging_organization_exclusion"],
			TypeName:         "google_logging_organization_exclusion",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OrganizationExclusion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationSink",
	}:
		if err := (&controllerslogging.OrganizationSinkReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OrganizationSink"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_logging_organization_sink"],
			TypeName:         "google_logging_organization_sink",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OrganizationSink")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProjectBucketConfig",
	}:
		if err := (&controllerslogging.ProjectBucketConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProjectBucketConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_logging_project_bucket_config"],
			TypeName:         "google_logging_project_bucket_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProjectBucketConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProjectExclusion",
	}:
		if err := (&controllerslogging.ProjectExclusionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProjectExclusion"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_logging_project_exclusion"],
			TypeName:         "google_logging_project_exclusion",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProjectExclusion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProjectSink",
	}:
		if err := (&controllerslogging.ProjectSinkReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProjectSink"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_logging_project_sink"],
			TypeName:         "google_logging_project_sink",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProjectSink")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "memcache.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersmemcache.InstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_memcache_instance"],
			TypeName:         "google_memcache_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ml.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EngineModel",
	}:
		if err := (&controllersml.EngineModelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EngineModel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_ml_engine_model"],
			TypeName:         "google_ml_engine_model",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EngineModel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlertPolicy",
	}:
		if err := (&controllersmonitoring.AlertPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AlertPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_monitoring_alert_policy"],
			TypeName:         "google_monitoring_alert_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AlertPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomService",
	}:
		if err := (&controllersmonitoring.CustomServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CustomService"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_monitoring_custom_service"],
			TypeName:         "google_monitoring_custom_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CustomService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dashboard",
	}:
		if err := (&controllersmonitoring.DashboardReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Dashboard"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_monitoring_dashboard"],
			TypeName:         "google_monitoring_dashboard",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Dashboard")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersmonitoring.GroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_monitoring_group"],
			TypeName:         "google_monitoring_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MetricDescriptor",
	}:
		if err := (&controllersmonitoring.MetricDescriptorReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MetricDescriptor"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_monitoring_metric_descriptor"],
			TypeName:         "google_monitoring_metric_descriptor",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MetricDescriptor")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NotificationChannel",
	}:
		if err := (&controllersmonitoring.NotificationChannelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NotificationChannel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_monitoring_notification_channel"],
			TypeName:         "google_monitoring_notification_channel",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NotificationChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Slo",
	}:
		if err := (&controllersmonitoring.SloReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Slo"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_monitoring_slo"],
			TypeName:         "google_monitoring_slo",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Slo")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UptimeCheckConfig",
	}:
		if err := (&controllersmonitoring.UptimeCheckConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UptimeCheckConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_monitoring_uptime_check_config"],
			TypeName:         "google_monitoring_uptime_check_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UptimeCheckConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagementConnectivityTest",
	}:
		if err := (&controllersnetwork.ManagementConnectivityTestReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagementConnectivityTest"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_network_management_connectivity_test"],
			TypeName:         "google_network_management_connectivity_test",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagementConnectivityTest")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notebooks.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Environment",
	}:
		if err := (&controllersnotebooks.EnvironmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Environment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_notebooks_environment"],
			TypeName:         "google_notebooks_environment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Environment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notebooks.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersnotebooks.InstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_notebooks_instance"],
			TypeName:         "google_notebooks_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notebooks.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamBinding",
	}:
		if err := (&controllersnotebooks.InstanceIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_notebooks_instance_iam_binding"],
			TypeName:         "google_notebooks_instance_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notebooks.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamMember",
	}:
		if err := (&controllersnotebooks.InstanceIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_notebooks_instance_iam_member"],
			TypeName:         "google_notebooks_instance_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notebooks.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamPolicy",
	}:
		if err := (&controllersnotebooks.InstanceIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_notebooks_instance_iam_policy"],
			TypeName:         "google_notebooks_instance_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notebooks.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Location",
	}:
		if err := (&controllersnotebooks.LocationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Location"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_notebooks_location"],
			TypeName:         "google_notebooks_location",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Location")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessApprovalSettings",
	}:
		if err := (&controllersorganization.AccessApprovalSettingsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccessApprovalSettings"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_organization_access_approval_settings"],
			TypeName:         "google_organization_access_approval_settings",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccessApprovalSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamAuditConfig",
	}:
		if err := (&controllersorganization.IamAuditConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamAuditConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_organization_iam_audit_config"],
			TypeName:         "google_organization_iam_audit_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamAuditConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamBinding",
	}:
		if err := (&controllersorganization.IamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_organization_iam_binding"],
			TypeName:         "google_organization_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamCustomRole",
	}:
		if err := (&controllersorganization.IamCustomRoleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamCustomRole"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_organization_iam_custom_role"],
			TypeName:         "google_organization_iam_custom_role",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamCustomRole")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamMember",
	}:
		if err := (&controllersorganization.IamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_organization_iam_member"],
			TypeName:         "google_organization_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamPolicy",
	}:
		if err := (&controllersorganization.IamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_organization_iam_policy"],
			TypeName:         "google_organization_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllersorganization.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_organization_policy"],
			TypeName:         "google_organization_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "os.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigPatchDeployment",
	}:
		if err := (&controllersos.ConfigPatchDeploymentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConfigPatchDeployment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_os_config_patch_deployment"],
			TypeName:         "google_os_config_patch_deployment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConfigPatchDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "os.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LoginSSHPublicKey",
	}:
		if err := (&controllersos.LoginSSHPublicKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LoginSSHPublicKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_os_login_ssh_public_key"],
			TypeName:         "google_os_login_ssh_public_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LoginSSHPublicKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Project",
	}:
		if err := (&controllersproject.ProjectReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Project"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_project"],
			TypeName:         "google_project",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Project")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessApprovalSettings",
	}:
		if err := (&controllersproject.AccessApprovalSettingsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccessApprovalSettings"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_project_access_approval_settings"],
			TypeName:         "google_project_access_approval_settings",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccessApprovalSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DefaultServiceAccounts",
	}:
		if err := (&controllersproject.DefaultServiceAccountsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DefaultServiceAccounts"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_project_default_service_accounts"],
			TypeName:         "google_project_default_service_accounts",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DefaultServiceAccounts")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamAuditConfig",
	}:
		if err := (&controllersproject.IamAuditConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamAuditConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_project_iam_audit_config"],
			TypeName:         "google_project_iam_audit_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamAuditConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamBinding",
	}:
		if err := (&controllersproject.IamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_project_iam_binding"],
			TypeName:         "google_project_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamCustomRole",
	}:
		if err := (&controllersproject.IamCustomRoleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamCustomRole"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_project_iam_custom_role"],
			TypeName:         "google_project_iam_custom_role",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamCustomRole")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamMember",
	}:
		if err := (&controllersproject.IamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_project_iam_member"],
			TypeName:         "google_project_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamPolicy",
	}:
		if err := (&controllersproject.IamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_project_iam_policy"],
			TypeName:         "google_project_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationPolicy",
	}:
		if err := (&controllersproject.OrganizationPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OrganizationPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_project_organization_policy"],
			TypeName:         "google_project_organization_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OrganizationPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&controllersproject.ServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Service"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_project_service"],
			TypeName:         "google_project_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UsageExportBucket",
	}:
		if err := (&controllersproject.UsageExportBucketReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UsageExportBucket"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_project_usage_export_bucket"],
			TypeName:         "google_project_usage_export_bucket",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UsageExportBucket")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LiteSubscription",
	}:
		if err := (&controllerspubsub.LiteSubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LiteSubscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_pubsub_lite_subscription"],
			TypeName:         "google_pubsub_lite_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LiteSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LiteTopic",
	}:
		if err := (&controllerspubsub.LiteTopicReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LiteTopic"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_pubsub_lite_topic"],
			TypeName:         "google_pubsub_lite_topic",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LiteTopic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schema",
	}:
		if err := (&controllerspubsub.SchemaReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Schema"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_pubsub_schema"],
			TypeName:         "google_pubsub_schema",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Schema")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subscription",
	}:
		if err := (&controllerspubsub.SubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Subscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_pubsub_subscription"],
			TypeName:         "google_pubsub_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Subscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubscriptionIamBinding",
	}:
		if err := (&controllerspubsub.SubscriptionIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SubscriptionIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_pubsub_subscription_iam_binding"],
			TypeName:         "google_pubsub_subscription_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubscriptionIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubscriptionIamMember",
	}:
		if err := (&controllerspubsub.SubscriptionIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SubscriptionIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_pubsub_subscription_iam_member"],
			TypeName:         "google_pubsub_subscription_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubscriptionIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubscriptionIamPolicy",
	}:
		if err := (&controllerspubsub.SubscriptionIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SubscriptionIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_pubsub_subscription_iam_policy"],
			TypeName:         "google_pubsub_subscription_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubscriptionIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&controllerspubsub.TopicReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Topic"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_pubsub_topic"],
			TypeName:         "google_pubsub_topic",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicIamBinding",
	}:
		if err := (&controllerspubsub.TopicIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TopicIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_pubsub_topic_iam_binding"],
			TypeName:         "google_pubsub_topic_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TopicIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicIamMember",
	}:
		if err := (&controllerspubsub.TopicIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TopicIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_pubsub_topic_iam_member"],
			TypeName:         "google_pubsub_topic_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TopicIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicIamPolicy",
	}:
		if err := (&controllerspubsub.TopicIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TopicIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_pubsub_topic_iam_policy"],
			TypeName:         "google_pubsub_topic_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TopicIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redis.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersredis.InstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_redis_instance"],
			TypeName:         "google_redis_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerLien",
	}:
		if err := (&controllersresource.ManagerLienReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerLien"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_resource_manager_lien"],
			TypeName:         "google_resource_manager_lien",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerLien")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "runtimeconfig.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Config",
	}:
		if err := (&controllersruntimeconfig.ConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Config"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_runtimeconfig_config"],
			TypeName:         "google_runtimeconfig_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Config")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "runtimeconfig.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigIamBinding",
	}:
		if err := (&controllersruntimeconfig.ConfigIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConfigIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_runtimeconfig_config_iam_binding"],
			TypeName:         "google_runtimeconfig_config_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConfigIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "runtimeconfig.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigIamMember",
	}:
		if err := (&controllersruntimeconfig.ConfigIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConfigIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_runtimeconfig_config_iam_member"],
			TypeName:         "google_runtimeconfig_config_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConfigIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "runtimeconfig.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigIamPolicy",
	}:
		if err := (&controllersruntimeconfig.ConfigIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConfigIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_runtimeconfig_config_iam_policy"],
			TypeName:         "google_runtimeconfig_config_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConfigIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "runtimeconfig.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Variable",
	}:
		if err := (&controllersruntimeconfig.VariableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Variable"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_runtimeconfig_variable"],
			TypeName:         "google_runtimeconfig_variable",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Variable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "scc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Source",
	}:
		if err := (&controllersscc.SourceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Source"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_scc_source"],
			TypeName:         "google_scc_source",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Source")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secret.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerSecret",
	}:
		if err := (&controllerssecret.ManagerSecretReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerSecret"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_secret_manager_secret"],
			TypeName:         "google_secret_manager_secret",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerSecret")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secret.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerSecretIamBinding",
	}:
		if err := (&controllerssecret.ManagerSecretIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerSecretIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_secret_manager_secret_iam_binding"],
			TypeName:         "google_secret_manager_secret_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerSecretIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secret.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerSecretIamMember",
	}:
		if err := (&controllerssecret.ManagerSecretIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerSecretIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_secret_manager_secret_iam_member"],
			TypeName:         "google_secret_manager_secret_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerSecretIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secret.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerSecretIamPolicy",
	}:
		if err := (&controllerssecret.ManagerSecretIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerSecretIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_secret_manager_secret_iam_policy"],
			TypeName:         "google_secret_manager_secret_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerSecretIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secret.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerSecretVersion",
	}:
		if err := (&controllerssecret.ManagerSecretVersionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagerSecretVersion"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_secret_manager_secret_version"],
			TypeName:         "google_secret_manager_secret_version",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagerSecretVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllersservice.AccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_service_account"],
			TypeName:         "google_service_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountIamBinding",
	}:
		if err := (&controllersservice.AccountIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccountIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_service_account_iam_binding"],
			TypeName:         "google_service_account_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccountIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountIamMember",
	}:
		if err := (&controllersservice.AccountIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccountIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_service_account_iam_member"],
			TypeName:         "google_service_account_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccountIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountIamPolicy",
	}:
		if err := (&controllersservice.AccountIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccountIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_service_account_iam_policy"],
			TypeName:         "google_service_account_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccountIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountKey",
	}:
		if err := (&controllersservice.AccountKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccountKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_service_account_key"],
			TypeName:         "google_service_account_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccountKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkingConnection",
	}:
		if err := (&controllersservice.NetworkingConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NetworkingConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_service_networking_connection"],
			TypeName:         "google_service_networking_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkingConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sourcereporepository.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SourcerepoRepository",
	}:
		if err := (&controllerssourcereporepository.SourcerepoRepositoryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SourcerepoRepository"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_sourcerepo_repository"],
			TypeName:         "google_sourcerepo_repository",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SourcerepoRepository")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sourcereporepository.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamBinding",
	}:
		if err := (&controllerssourcereporepository.IamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_sourcerepo_repository_iam_binding"],
			TypeName:         "google_sourcerepo_repository_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sourcereporepository.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamMember",
	}:
		if err := (&controllerssourcereporepository.IamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_sourcerepo_repository_iam_member"],
			TypeName:         "google_sourcerepo_repository_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sourcereporepository.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamPolicy",
	}:
		if err := (&controllerssourcereporepository.IamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_sourcerepo_repository_iam_policy"],
			TypeName:         "google_sourcerepo_repository_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&controllersspanner.DatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Database"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_spanner_database"],
			TypeName:         "google_spanner_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabaseIamBinding",
	}:
		if err := (&controllersspanner.DatabaseIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatabaseIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_spanner_database_iam_binding"],
			TypeName:         "google_spanner_database_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatabaseIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabaseIamMember",
	}:
		if err := (&controllersspanner.DatabaseIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatabaseIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_spanner_database_iam_member"],
			TypeName:         "google_spanner_database_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatabaseIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabaseIamPolicy",
	}:
		if err := (&controllersspanner.DatabaseIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatabaseIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_spanner_database_iam_policy"],
			TypeName:         "google_spanner_database_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatabaseIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersspanner.InstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_spanner_instance"],
			TypeName:         "google_spanner_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamBinding",
	}:
		if err := (&controllersspanner.InstanceIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_spanner_instance_iam_binding"],
			TypeName:         "google_spanner_instance_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamMember",
	}:
		if err := (&controllersspanner.InstanceIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_spanner_instance_iam_member"],
			TypeName:         "google_spanner_instance_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamPolicy",
	}:
		if err := (&controllersspanner.InstanceIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_spanner_instance_iam_policy"],
			TypeName:         "google_spanner_instance_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&controllerssql.DatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Database"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_sql_database"],
			TypeName:         "google_sql_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabaseInstance",
	}:
		if err := (&controllerssql.DatabaseInstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatabaseInstance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_sql_database_instance"],
			TypeName:         "google_sql_database_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatabaseInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SourceRepresentationInstance",
	}:
		if err := (&controllerssql.SourceRepresentationInstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SourceRepresentationInstance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_sql_source_representation_instance"],
			TypeName:         "google_sql_source_representation_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SourceRepresentationInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SslCert",
	}:
		if err := (&controllerssql.SslCertReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SslCert"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_sql_ssl_cert"],
			TypeName:         "google_sql_ssl_cert",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SslCert")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "User",
	}:
		if err := (&controllerssql.UserReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("User"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_sql_user"],
			TypeName:         "google_sql_user",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "User")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Bucket",
	}:
		if err := (&controllersstorage.BucketReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Bucket"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_storage_bucket"],
			TypeName:         "google_storage_bucket",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Bucket")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketAccessControl",
	}:
		if err := (&controllersstorage.BucketAccessControlReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketAccessControl"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_storage_bucket_access_control"],
			TypeName:         "google_storage_bucket_access_control",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketAccessControl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketACL",
	}:
		if err := (&controllersstorage.BucketACLReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketACL"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_storage_bucket_acl"],
			TypeName:         "google_storage_bucket_acl",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketIamBinding",
	}:
		if err := (&controllersstorage.BucketIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_storage_bucket_iam_binding"],
			TypeName:         "google_storage_bucket_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketIamMember",
	}:
		if err := (&controllersstorage.BucketIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_storage_bucket_iam_member"],
			TypeName:         "google_storage_bucket_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketIamPolicy",
	}:
		if err := (&controllersstorage.BucketIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_storage_bucket_iam_policy"],
			TypeName:         "google_storage_bucket_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketObject",
	}:
		if err := (&controllersstorage.BucketObjectReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketObject"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_storage_bucket_object"],
			TypeName:         "google_storage_bucket_object",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketObject")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DefaultObjectAccessControl",
	}:
		if err := (&controllersstorage.DefaultObjectAccessControlReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DefaultObjectAccessControl"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_storage_default_object_access_control"],
			TypeName:         "google_storage_default_object_access_control",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DefaultObjectAccessControl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DefaultObjectACL",
	}:
		if err := (&controllersstorage.DefaultObjectACLReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DefaultObjectACL"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_storage_default_object_acl"],
			TypeName:         "google_storage_default_object_acl",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DefaultObjectACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HmacKey",
	}:
		if err := (&controllersstorage.HmacKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HmacKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_storage_hmac_key"],
			TypeName:         "google_storage_hmac_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HmacKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Notification",
	}:
		if err := (&controllersstorage.NotificationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Notification"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_storage_notification"],
			TypeName:         "google_storage_notification",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Notification")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ObjectAccessControl",
	}:
		if err := (&controllersstorage.ObjectAccessControlReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ObjectAccessControl"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_storage_object_access_control"],
			TypeName:         "google_storage_object_access_control",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ObjectAccessControl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ObjectACL",
	}:
		if err := (&controllersstorage.ObjectACLReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ObjectACL"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_storage_object_acl"],
			TypeName:         "google_storage_object_acl",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ObjectACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransferJob",
	}:
		if err := (&controllersstorage.TransferJobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TransferJob"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_storage_transfer_job"],
			TypeName:         "google_storage_transfer_job",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransferJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagBinding",
	}:
		if err := (&controllerstags.TagBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TagBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_tags_tag_binding"],
			TypeName:         "google_tags_tag_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TagBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagKey",
	}:
		if err := (&controllerstags.TagKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TagKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_tags_tag_key"],
			TypeName:         "google_tags_tag_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TagKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagKeyIamBinding",
	}:
		if err := (&controllerstags.TagKeyIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TagKeyIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_tags_tag_key_iam_binding"],
			TypeName:         "google_tags_tag_key_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TagKeyIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagKeyIamMember",
	}:
		if err := (&controllerstags.TagKeyIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TagKeyIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_tags_tag_key_iam_member"],
			TypeName:         "google_tags_tag_key_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TagKeyIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagKeyIamPolicy",
	}:
		if err := (&controllerstags.TagKeyIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TagKeyIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_tags_tag_key_iam_policy"],
			TypeName:         "google_tags_tag_key_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TagKeyIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagValue",
	}:
		if err := (&controllerstags.TagValueReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TagValue"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_tags_tag_value"],
			TypeName:         "google_tags_tag_value",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TagValue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagValueIamBinding",
	}:
		if err := (&controllerstags.TagValueIamBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TagValueIamBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_tags_tag_value_iam_binding"],
			TypeName:         "google_tags_tag_value_iam_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TagValueIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagValueIamMember",
	}:
		if err := (&controllerstags.TagValueIamMemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TagValueIamMember"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_tags_tag_value_iam_member"],
			TypeName:         "google_tags_tag_value_iam_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TagValueIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagValueIamPolicy",
	}:
		if err := (&controllerstags.TagValueIamPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TagValueIamPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_tags_tag_value_iam_policy"],
			TypeName:         "google_tags_tag_value_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TagValueIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tpu.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Node",
	}:
		if err := (&controllerstpu.NodeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Node"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_tpu_node"],
			TypeName:         "google_tpu_node",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Node")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vertex.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AiDataset",
	}:
		if err := (&controllersvertex.AiDatasetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AiDataset"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_vertex_ai_dataset"],
			TypeName:         "google_vertex_ai_dataset",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AiDataset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessConnector",
	}:
		if err := (&controllersvpc.AccessConnectorReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccessConnector"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_vpc_access_connector"],
			TypeName:         "google_vpc_access_connector",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccessConnector")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "workflows.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workflow",
	}:
		if err := (&controllersworkflows.WorkflowReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Workflow"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         google.Provider(),
			Resource:         google.Provider().ResourcesMap["google_workflows_workflow"],
			TypeName:         "google_workflows_workflow",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Workflow")
			return err
		}

	default:
		return fmt.Errorf("Invalid CRD")
	}

	return nil
}

func SetupWebhook(mgr manager.Manager, gvk schema.GroupVersionKind) error {
	switch gvk {
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerAccessLevel",
	}:
		if err := (&accesscontextv1alpha1.ManagerAccessLevel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerAccessLevel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerAccessLevelCondition",
	}:
		if err := (&accesscontextv1alpha1.ManagerAccessLevelCondition{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerAccessLevelCondition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerAccessLevelBatch",
	}:
		if err := (&accesscontextv1alpha1.ManagerAccessLevelBatch{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerAccessLevelBatch")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerAccessPolicy",
	}:
		if err := (&accesscontextv1alpha1.ManagerAccessPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerAccessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerGcpUserAccessBinding",
	}:
		if err := (&accesscontextv1alpha1.ManagerGcpUserAccessBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerGcpUserAccessBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerServicePerimeter",
	}:
		if err := (&accesscontextv1alpha1.ManagerServicePerimeter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerServicePerimeter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerServicePerimeterResource",
	}:
		if err := (&accesscontextv1alpha1.ManagerServicePerimeterResource{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerServicePerimeterResource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "accesscontext.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerServicePerimeterBatch",
	}:
		if err := (&accesscontextv1alpha1.ManagerServicePerimeterBatch{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerServicePerimeterBatch")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "active.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DirectoryDomain",
	}:
		if err := (&activev1alpha1.DirectoryDomain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DirectoryDomain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "active.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DirectoryDomainTrust",
	}:
		if err := (&activev1alpha1.DirectoryDomainTrust{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DirectoryDomainTrust")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigee.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Envgroup",
	}:
		if err := (&apigeev1alpha1.Envgroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Envgroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigee.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EnvgroupAttachment",
	}:
		if err := (&apigeev1alpha1.EnvgroupAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EnvgroupAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigee.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Environment",
	}:
		if err := (&apigeev1alpha1.Environment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Environment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigee.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&apigeev1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigee.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceAttachment",
	}:
		if err := (&apigeev1alpha1.InstanceAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigee.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Organization",
	}:
		if err := (&apigeev1alpha1.Organization{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Organization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&appenginev1alpha1.Application{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationURLDispatchRules",
	}:
		if err := (&appenginev1alpha1.ApplicationURLDispatchRules{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApplicationURLDispatchRules")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainMapping",
	}:
		if err := (&appenginev1alpha1.DomainMapping{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainMapping")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&appenginev1alpha1.FirewallRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FlexibleAppVersion",
	}:
		if err := (&appenginev1alpha1.FlexibleAppVersion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FlexibleAppVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceNetworkSettings",
	}:
		if err := (&appenginev1alpha1.ServiceNetworkSettings{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceNetworkSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceSplitTraffic",
	}:
		if err := (&appenginev1alpha1.ServiceSplitTraffic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceSplitTraffic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appengine.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StandardAppVersion",
	}:
		if err := (&appenginev1alpha1.StandardAppVersion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StandardAppVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataTransferConfig",
	}:
		if err := (&bigqueryv1alpha1.DataTransferConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataTransferConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dataset",
	}:
		if err := (&bigqueryv1alpha1.Dataset{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Dataset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasetAccess",
	}:
		if err := (&bigqueryv1alpha1.DatasetAccess{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatasetAccess")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasetIamBinding",
	}:
		if err := (&bigqueryv1alpha1.DatasetIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatasetIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasetIamMember",
	}:
		if err := (&bigqueryv1alpha1.DatasetIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatasetIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasetIamPolicy",
	}:
		if err := (&bigqueryv1alpha1.DatasetIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatasetIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Job",
	}:
		if err := (&bigqueryv1alpha1.Job{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Job")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Reservation",
	}:
		if err := (&bigqueryv1alpha1.Reservation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Reservation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Routine",
	}:
		if err := (&bigqueryv1alpha1.Routine{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Routine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&bigqueryv1alpha1.Table{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableIamBinding",
	}:
		if err := (&bigqueryv1alpha1.TableIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TableIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableIamMember",
	}:
		if err := (&bigqueryv1alpha1.TableIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TableIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigquery.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableIamPolicy",
	}:
		if err := (&bigqueryv1alpha1.TableIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TableIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppProfile",
	}:
		if err := (&bigtablev1alpha1.AppProfile{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AppProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GcPolicy",
	}:
		if err := (&bigtablev1alpha1.GcPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GcPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&bigtablev1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamBinding",
	}:
		if err := (&bigtablev1alpha1.InstanceIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamMember",
	}:
		if err := (&bigtablev1alpha1.InstanceIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamPolicy",
	}:
		if err := (&bigtablev1alpha1.InstanceIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&bigtablev1alpha1.Table{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableIamBinding",
	}:
		if err := (&bigtablev1alpha1.TableIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TableIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableIamMember",
	}:
		if err := (&bigtablev1alpha1.TableIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TableIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bigtable.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableIamPolicy",
	}:
		if err := (&bigtablev1alpha1.TableIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TableIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "billingaccount.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamBinding",
	}:
		if err := (&billingaccountv1alpha1.IamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "billingaccount.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamMember",
	}:
		if err := (&billingaccountv1alpha1.IamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "billingaccount.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamPolicy",
	}:
		if err := (&billingaccountv1alpha1.IamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "billingbudget.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BillingBudget",
	}:
		if err := (&billingbudgetv1alpha1.BillingBudget{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BillingBudget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "billingsubaccount.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BillingSubaccount",
	}:
		if err := (&billingsubaccountv1alpha1.BillingSubaccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BillingSubaccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "binaryauthorization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attestor",
	}:
		if err := (&binaryauthorizationv1alpha1.Attestor{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Attestor")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "binaryauthorization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AttestorIamBinding",
	}:
		if err := (&binaryauthorizationv1alpha1.AttestorIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AttestorIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "binaryauthorization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AttestorIamMember",
	}:
		if err := (&binaryauthorizationv1alpha1.AttestorIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AttestorIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "binaryauthorization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AttestorIamPolicy",
	}:
		if err := (&binaryauthorizationv1alpha1.AttestorIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AttestorIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "binaryauthorization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&binaryauthorizationv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssetFolderFeed",
	}:
		if err := (&cloudv1alpha1.AssetFolderFeed{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AssetFolderFeed")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssetOrganizationFeed",
	}:
		if err := (&cloudv1alpha1.AssetOrganizationFeed{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AssetOrganizationFeed")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssetProjectFeed",
	}:
		if err := (&cloudv1alpha1.AssetProjectFeed{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AssetProjectFeed")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityGroup",
	}:
		if err := (&cloudv1alpha1.IdentityGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IdentityGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityGroupMembership",
	}:
		if err := (&cloudv1alpha1.IdentityGroupMembership{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IdentityGroupMembership")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RunDomainMapping",
	}:
		if err := (&cloudv1alpha1.RunDomainMapping{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RunDomainMapping")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RunService",
	}:
		if err := (&cloudv1alpha1.RunService{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RunService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RunServiceIamBinding",
	}:
		if err := (&cloudv1alpha1.RunServiceIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RunServiceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RunServiceIamMember",
	}:
		if err := (&cloudv1alpha1.RunServiceIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RunServiceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RunServiceIamPolicy",
	}:
		if err := (&cloudv1alpha1.RunServiceIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RunServiceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SchedulerJob",
	}:
		if err := (&cloudv1alpha1.SchedulerJob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SchedulerJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TasksQueue",
	}:
		if err := (&cloudv1alpha1.TasksQueue{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TasksQueue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudbuild.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Trigger",
	}:
		if err := (&cloudbuildv1alpha1.Trigger{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Trigger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfunctionsfunction.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudfunctionsFunction",
	}:
		if err := (&cloudfunctionsfunctionv1alpha1.CloudfunctionsFunction{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CloudfunctionsFunction")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfunctionsfunction.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamBinding",
	}:
		if err := (&cloudfunctionsfunctionv1alpha1.IamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfunctionsfunction.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamMember",
	}:
		if err := (&cloudfunctionsfunctionv1alpha1.IamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfunctionsfunction.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamPolicy",
	}:
		if err := (&cloudfunctionsfunctionv1alpha1.IamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudiot.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Device",
	}:
		if err := (&cloudiotv1alpha1.Device{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Device")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudiot.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Registry",
	}:
		if err := (&cloudiotv1alpha1.Registry{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Registry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "composer.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Environment",
	}:
		if err := (&composerv1alpha1.Environment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Environment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Address",
	}:
		if err := (&computev1alpha1.Address{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Address")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AttachedDisk",
	}:
		if err := (&computev1alpha1.AttachedDisk{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AttachedDisk")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Autoscaler",
	}:
		if err := (&computev1alpha1.Autoscaler{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Autoscaler")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendBucket",
	}:
		if err := (&computev1alpha1.BackendBucket{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackendBucket")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendBucketSignedURLKey",
	}:
		if err := (&computev1alpha1.BackendBucketSignedURLKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackendBucketSignedURLKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendService",
	}:
		if err := (&computev1alpha1.BackendService{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackendService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendServiceSignedURLKey",
	}:
		if err := (&computev1alpha1.BackendServiceSignedURLKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackendServiceSignedURLKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Disk",
	}:
		if err := (&computev1alpha1.Disk{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Disk")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DiskIamBinding",
	}:
		if err := (&computev1alpha1.DiskIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DiskIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DiskIamMember",
	}:
		if err := (&computev1alpha1.DiskIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DiskIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DiskIamPolicy",
	}:
		if err := (&computev1alpha1.DiskIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DiskIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DiskResourcePolicyAttachment",
	}:
		if err := (&computev1alpha1.DiskResourcePolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DiskResourcePolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ExternalVPNGateway",
	}:
		if err := (&computev1alpha1.ExternalVPNGateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ExternalVPNGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Firewall",
	}:
		if err := (&computev1alpha1.Firewall{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Firewall")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ForwardingRule",
	}:
		if err := (&computev1alpha1.ForwardingRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ForwardingRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalAddress",
	}:
		if err := (&computev1alpha1.GlobalAddress{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GlobalAddress")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalForwardingRule",
	}:
		if err := (&computev1alpha1.GlobalForwardingRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GlobalForwardingRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalNetworkEndpoint",
	}:
		if err := (&computev1alpha1.GlobalNetworkEndpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GlobalNetworkEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalNetworkEndpointGroup",
	}:
		if err := (&computev1alpha1.GlobalNetworkEndpointGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GlobalNetworkEndpointGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HaVPNGateway",
	}:
		if err := (&computev1alpha1.HaVPNGateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HaVPNGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HealthCheck",
	}:
		if err := (&computev1alpha1.HealthCheck{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HealthCheck")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HttpHealthCheck",
	}:
		if err := (&computev1alpha1.HttpHealthCheck{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HttpHealthCheck")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HttpsHealthCheck",
	}:
		if err := (&computev1alpha1.HttpsHealthCheck{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HttpsHealthCheck")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Image",
	}:
		if err := (&computev1alpha1.Image{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Image")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ImageIamBinding",
	}:
		if err := (&computev1alpha1.ImageIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ImageIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ImageIamMember",
	}:
		if err := (&computev1alpha1.ImageIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ImageIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ImageIamPolicy",
	}:
		if err := (&computev1alpha1.ImageIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ImageIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&computev1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceFromTemplate",
	}:
		if err := (&computev1alpha1.InstanceFromTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceFromTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceGroup",
	}:
		if err := (&computev1alpha1.InstanceGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceGroupManager",
	}:
		if err := (&computev1alpha1.InstanceGroupManager{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceGroupManager")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceGroupNamedPort",
	}:
		if err := (&computev1alpha1.InstanceGroupNamedPort{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceGroupNamedPort")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamBinding",
	}:
		if err := (&computev1alpha1.InstanceIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamMember",
	}:
		if err := (&computev1alpha1.InstanceIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamPolicy",
	}:
		if err := (&computev1alpha1.InstanceIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceTemplate",
	}:
		if err := (&computev1alpha1.InstanceTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterconnectAttachment",
	}:
		if err := (&computev1alpha1.InterconnectAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InterconnectAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedSslCertificate",
	}:
		if err := (&computev1alpha1.ManagedSslCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagedSslCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Network",
	}:
		if err := (&computev1alpha1.Network{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Network")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkEndpoint",
	}:
		if err := (&computev1alpha1.NetworkEndpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkEndpointGroup",
	}:
		if err := (&computev1alpha1.NetworkEndpointGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkEndpointGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkPeering",
	}:
		if err := (&computev1alpha1.NetworkPeering{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkPeering")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkPeeringRoutesConfig",
	}:
		if err := (&computev1alpha1.NetworkPeeringRoutesConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkPeeringRoutesConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NodeGroup",
	}:
		if err := (&computev1alpha1.NodeGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NodeGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NodeTemplate",
	}:
		if err := (&computev1alpha1.NodeTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NodeTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PacketMirroring",
	}:
		if err := (&computev1alpha1.PacketMirroring{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PacketMirroring")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PerInstanceConfig",
	}:
		if err := (&computev1alpha1.PerInstanceConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PerInstanceConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProjectDefaultNetworkTier",
	}:
		if err := (&computev1alpha1.ProjectDefaultNetworkTier{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProjectDefaultNetworkTier")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProjectMetadata",
	}:
		if err := (&computev1alpha1.ProjectMetadata{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProjectMetadata")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProjectMetadataItem",
	}:
		if err := (&computev1alpha1.ProjectMetadataItem{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProjectMetadataItem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionAutoscaler",
	}:
		if err := (&computev1alpha1.RegionAutoscaler{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionAutoscaler")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionBackendService",
	}:
		if err := (&computev1alpha1.RegionBackendService{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionBackendService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionDisk",
	}:
		if err := (&computev1alpha1.RegionDisk{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionDisk")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionDiskIamBinding",
	}:
		if err := (&computev1alpha1.RegionDiskIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionDiskIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionDiskIamMember",
	}:
		if err := (&computev1alpha1.RegionDiskIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionDiskIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionDiskIamPolicy",
	}:
		if err := (&computev1alpha1.RegionDiskIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionDiskIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionDiskResourcePolicyAttachment",
	}:
		if err := (&computev1alpha1.RegionDiskResourcePolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionDiskResourcePolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionHealthCheck",
	}:
		if err := (&computev1alpha1.RegionHealthCheck{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionHealthCheck")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionInstanceGroupManager",
	}:
		if err := (&computev1alpha1.RegionInstanceGroupManager{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionInstanceGroupManager")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionNetworkEndpointGroup",
	}:
		if err := (&computev1alpha1.RegionNetworkEndpointGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionNetworkEndpointGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionPerInstanceConfig",
	}:
		if err := (&computev1alpha1.RegionPerInstanceConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionPerInstanceConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionSslCertificate",
	}:
		if err := (&computev1alpha1.RegionSslCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionSslCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionTargetHTTPProxy",
	}:
		if err := (&computev1alpha1.RegionTargetHTTPProxy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionTargetHTTPProxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionTargetHTTPSProxy",
	}:
		if err := (&computev1alpha1.RegionTargetHTTPSProxy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionTargetHTTPSProxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionURLMap",
	}:
		if err := (&computev1alpha1.RegionURLMap{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionURLMap")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Reservation",
	}:
		if err := (&computev1alpha1.Reservation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Reservation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourcePolicy",
	}:
		if err := (&computev1alpha1.ResourcePolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResourcePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Route",
	}:
		if err := (&computev1alpha1.Route{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Route")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Router",
	}:
		if err := (&computev1alpha1.Router{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Router")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouterInterface",
	}:
		if err := (&computev1alpha1.RouterInterface{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RouterInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouterNAT",
	}:
		if err := (&computev1alpha1.RouterNAT{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RouterNAT")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouterPeer",
	}:
		if err := (&computev1alpha1.RouterPeer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RouterPeer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityPolicy",
	}:
		if err := (&computev1alpha1.SecurityPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecurityPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SharedVpcHostProject",
	}:
		if err := (&computev1alpha1.SharedVpcHostProject{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SharedVpcHostProject")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SharedVpcServiceProject",
	}:
		if err := (&computev1alpha1.SharedVpcServiceProject{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SharedVpcServiceProject")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Snapshot",
	}:
		if err := (&computev1alpha1.Snapshot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Snapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SslCertificate",
	}:
		if err := (&computev1alpha1.SslCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SslCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SslPolicy",
	}:
		if err := (&computev1alpha1.SslPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SslPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subnetwork",
	}:
		if err := (&computev1alpha1.Subnetwork{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Subnetwork")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetworkIamBinding",
	}:
		if err := (&computev1alpha1.SubnetworkIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubnetworkIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetworkIamMember",
	}:
		if err := (&computev1alpha1.SubnetworkIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubnetworkIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetworkIamPolicy",
	}:
		if err := (&computev1alpha1.SubnetworkIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubnetworkIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetGrpcProxy",
	}:
		if err := (&computev1alpha1.TargetGrpcProxy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TargetGrpcProxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetHTTPProxy",
	}:
		if err := (&computev1alpha1.TargetHTTPProxy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TargetHTTPProxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetHTTPSProxy",
	}:
		if err := (&computev1alpha1.TargetHTTPSProxy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TargetHTTPSProxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetInstance",
	}:
		if err := (&computev1alpha1.TargetInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TargetInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetPool",
	}:
		if err := (&computev1alpha1.TargetPool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TargetPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetSslProxy",
	}:
		if err := (&computev1alpha1.TargetSslProxy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TargetSslProxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetTcpProxy",
	}:
		if err := (&computev1alpha1.TargetTcpProxy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TargetTcpProxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UrlMap",
	}:
		if err := (&computev1alpha1.UrlMap{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UrlMap")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpnGateway",
	}:
		if err := (&computev1alpha1.VpnGateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpnGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "compute.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpnTunnel",
	}:
		if err := (&computev1alpha1.VpnTunnel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpnTunnel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalysisNote",
	}:
		if err := (&containerv1alpha1.AnalysisNote{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnalysisNote")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalysisOccurrence",
	}:
		if err := (&containerv1alpha1.AnalysisOccurrence{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnalysisOccurrence")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&containerv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NodePool",
	}:
		if err := (&containerv1alpha1.NodePool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NodePool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Registry",
	}:
		if err := (&containerv1alpha1.Registry{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Registry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogEntry",
	}:
		if err := (&datav1alpha1.CatalogEntry{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CatalogEntry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogEntryGroup",
	}:
		if err := (&datav1alpha1.CatalogEntryGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CatalogEntryGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogEntryGroupIamBinding",
	}:
		if err := (&datav1alpha1.CatalogEntryGroupIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CatalogEntryGroupIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogEntryGroupIamMember",
	}:
		if err := (&datav1alpha1.CatalogEntryGroupIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CatalogEntryGroupIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogEntryGroupIamPolicy",
	}:
		if err := (&datav1alpha1.CatalogEntryGroupIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CatalogEntryGroupIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogTag",
	}:
		if err := (&datav1alpha1.CatalogTag{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CatalogTag")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogTagTemplate",
	}:
		if err := (&datav1alpha1.CatalogTagTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CatalogTagTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogTagTemplateIamBinding",
	}:
		if err := (&datav1alpha1.CatalogTagTemplateIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CatalogTagTemplateIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogTagTemplateIamMember",
	}:
		if err := (&datav1alpha1.CatalogTagTemplateIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CatalogTagTemplateIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogTagTemplateIamPolicy",
	}:
		if err := (&datav1alpha1.CatalogTagTemplateIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CatalogTagTemplateIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LossPreventionDeidentifyTemplate",
	}:
		if err := (&datav1alpha1.LossPreventionDeidentifyTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LossPreventionDeidentifyTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LossPreventionInspectTemplate",
	}:
		if err := (&datav1alpha1.LossPreventionInspectTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LossPreventionInspectTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LossPreventionJobTrigger",
	}:
		if err := (&datav1alpha1.LossPreventionJobTrigger{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LossPreventionJobTrigger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LossPreventionStoredInfoType",
	}:
		if err := (&datav1alpha1.LossPreventionStoredInfoType{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LossPreventionStoredInfoType")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataflow.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Job",
	}:
		if err := (&dataflowv1alpha1.Job{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Job")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AutoscalingPolicy",
	}:
		if err := (&dataprocv1alpha1.AutoscalingPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AutoscalingPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&dataprocv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterIamBinding",
	}:
		if err := (&dataprocv1alpha1.ClusterIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterIamMember",
	}:
		if err := (&dataprocv1alpha1.ClusterIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterIamPolicy",
	}:
		if err := (&dataprocv1alpha1.ClusterIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Job",
	}:
		if err := (&dataprocv1alpha1.Job{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Job")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobIamBinding",
	}:
		if err := (&dataprocv1alpha1.JobIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "JobIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobIamMember",
	}:
		if err := (&dataprocv1alpha1.JobIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "JobIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobIamPolicy",
	}:
		if err := (&dataprocv1alpha1.JobIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "JobIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dataproc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WorkflowTemplate",
	}:
		if err := (&dataprocv1alpha1.WorkflowTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WorkflowTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datastore.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Index",
	}:
		if err := (&datastorev1alpha1.Index{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Index")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "deployment.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerDeployment",
	}:
		if err := (&deploymentv1alpha1.ManagerDeployment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dialogflow.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Agent",
	}:
		if err := (&dialogflowv1alpha1.Agent{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Agent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dialogflow.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CxAgent",
	}:
		if err := (&dialogflowv1alpha1.CxAgent{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CxAgent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dialogflow.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EntityType",
	}:
		if err := (&dialogflowv1alpha1.EntityType{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EntityType")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dialogflow.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Fulfillment",
	}:
		if err := (&dialogflowv1alpha1.Fulfillment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Fulfillment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dialogflow.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Intent",
	}:
		if err := (&dialogflowv1alpha1.Intent{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Intent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedZone",
	}:
		if err := (&dnsv1alpha1.ManagedZone{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagedZone")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&dnsv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RecordSet",
	}:
		if err := (&dnsv1alpha1.RecordSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RecordSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "endpoints.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&endpointsv1alpha1.Service{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "endpoints.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceIamBinding",
	}:
		if err := (&endpointsv1alpha1.ServiceIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "endpoints.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceIamMember",
	}:
		if err := (&endpointsv1alpha1.ServiceIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "endpoints.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceIamPolicy",
	}:
		if err := (&endpointsv1alpha1.ServiceIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventarc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Trigger",
	}:
		if err := (&eventarcv1alpha1.Trigger{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Trigger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "filestore.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&filestorev1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firestore.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Document",
	}:
		if err := (&firestorev1alpha1.Document{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Document")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firestore.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Index",
	}:
		if err := (&firestorev1alpha1.Index{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Index")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "folder.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Folder",
	}:
		if err := (&folderv1alpha1.Folder{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Folder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "folder.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessApprovalSettings",
	}:
		if err := (&folderv1alpha1.AccessApprovalSettings{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccessApprovalSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "folder.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamAuditConfig",
	}:
		if err := (&folderv1alpha1.IamAuditConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamAuditConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "folder.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamBinding",
	}:
		if err := (&folderv1alpha1.IamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "folder.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamMember",
	}:
		if err := (&folderv1alpha1.IamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "folder.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamPolicy",
	}:
		if err := (&folderv1alpha1.IamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "folder.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationPolicy",
	}:
		if err := (&folderv1alpha1.OrganizationPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OrganizationPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "game.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesGameServerCluster",
	}:
		if err := (&gamev1alpha1.ServicesGameServerCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServicesGameServerCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "game.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesGameServerConfig",
	}:
		if err := (&gamev1alpha1.ServicesGameServerConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServicesGameServerConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "game.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesGameServerDeployment",
	}:
		if err := (&gamev1alpha1.ServicesGameServerDeployment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServicesGameServerDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "game.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesGameServerDeploymentRollout",
	}:
		if err := (&gamev1alpha1.ServicesGameServerDeploymentRollout{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServicesGameServerDeploymentRollout")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "game.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesRealm",
	}:
		if err := (&gamev1alpha1.ServicesRealm{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServicesRealm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConsentStore",
	}:
		if err := (&healthcarev1alpha1.ConsentStore{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConsentStore")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConsentStoreIamBinding",
	}:
		if err := (&healthcarev1alpha1.ConsentStoreIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConsentStoreIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConsentStoreIamMember",
	}:
		if err := (&healthcarev1alpha1.ConsentStoreIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConsentStoreIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConsentStoreIamPolicy",
	}:
		if err := (&healthcarev1alpha1.ConsentStoreIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConsentStoreIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dataset",
	}:
		if err := (&healthcarev1alpha1.Dataset{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Dataset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasetIamBinding",
	}:
		if err := (&healthcarev1alpha1.DatasetIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatasetIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasetIamMember",
	}:
		if err := (&healthcarev1alpha1.DatasetIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatasetIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasetIamPolicy",
	}:
		if err := (&healthcarev1alpha1.DatasetIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatasetIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DicomStore",
	}:
		if err := (&healthcarev1alpha1.DicomStore{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DicomStore")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DicomStoreIamBinding",
	}:
		if err := (&healthcarev1alpha1.DicomStoreIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DicomStoreIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DicomStoreIamMember",
	}:
		if err := (&healthcarev1alpha1.DicomStoreIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DicomStoreIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DicomStoreIamPolicy",
	}:
		if err := (&healthcarev1alpha1.DicomStoreIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DicomStoreIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FhirStore",
	}:
		if err := (&healthcarev1alpha1.FhirStore{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FhirStore")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FhirStoreIamBinding",
	}:
		if err := (&healthcarev1alpha1.FhirStoreIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FhirStoreIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FhirStoreIamMember",
	}:
		if err := (&healthcarev1alpha1.FhirStoreIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FhirStoreIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FhirStoreIamPolicy",
	}:
		if err := (&healthcarev1alpha1.FhirStoreIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FhirStoreIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Hl7V2Store",
	}:
		if err := (&healthcarev1alpha1.Hl7V2Store{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Hl7V2Store")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Hl7V2StoreIamBinding",
	}:
		if err := (&healthcarev1alpha1.Hl7V2StoreIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Hl7V2StoreIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Hl7V2StoreIamMember",
	}:
		if err := (&healthcarev1alpha1.Hl7V2StoreIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Hl7V2StoreIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Hl7V2StoreIamPolicy",
	}:
		if err := (&healthcarev1alpha1.Hl7V2StoreIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Hl7V2StoreIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppEngineServiceIamBinding",
	}:
		if err := (&iapv1alpha1.AppEngineServiceIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AppEngineServiceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppEngineServiceIamMember",
	}:
		if err := (&iapv1alpha1.AppEngineServiceIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AppEngineServiceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppEngineServiceIamPolicy",
	}:
		if err := (&iapv1alpha1.AppEngineServiceIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AppEngineServiceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppEngineVersionIamBinding",
	}:
		if err := (&iapv1alpha1.AppEngineVersionIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AppEngineVersionIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppEngineVersionIamMember",
	}:
		if err := (&iapv1alpha1.AppEngineVersionIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AppEngineVersionIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppEngineVersionIamPolicy",
	}:
		if err := (&iapv1alpha1.AppEngineVersionIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AppEngineVersionIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Brand",
	}:
		if err := (&iapv1alpha1.Brand{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Brand")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Client",
	}:
		if err := (&iapv1alpha1.Client{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Client")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TunnelIamBinding",
	}:
		if err := (&iapv1alpha1.TunnelIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TunnelIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TunnelIamMember",
	}:
		if err := (&iapv1alpha1.TunnelIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TunnelIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TunnelIamPolicy",
	}:
		if err := (&iapv1alpha1.TunnelIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TunnelIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TunnelInstanceIamBinding",
	}:
		if err := (&iapv1alpha1.TunnelInstanceIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TunnelInstanceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TunnelInstanceIamMember",
	}:
		if err := (&iapv1alpha1.TunnelInstanceIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TunnelInstanceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TunnelInstanceIamPolicy",
	}:
		if err := (&iapv1alpha1.TunnelInstanceIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TunnelInstanceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebBackendServiceIamBinding",
	}:
		if err := (&iapv1alpha1.WebBackendServiceIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebBackendServiceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebBackendServiceIamMember",
	}:
		if err := (&iapv1alpha1.WebBackendServiceIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebBackendServiceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebBackendServiceIamPolicy",
	}:
		if err := (&iapv1alpha1.WebBackendServiceIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebBackendServiceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebIamBinding",
	}:
		if err := (&iapv1alpha1.WebIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebIamMember",
	}:
		if err := (&iapv1alpha1.WebIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebIamPolicy",
	}:
		if err := (&iapv1alpha1.WebIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebTypeAppEngineIamBinding",
	}:
		if err := (&iapv1alpha1.WebTypeAppEngineIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebTypeAppEngineIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebTypeAppEngineIamMember",
	}:
		if err := (&iapv1alpha1.WebTypeAppEngineIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebTypeAppEngineIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebTypeAppEngineIamPolicy",
	}:
		if err := (&iapv1alpha1.WebTypeAppEngineIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebTypeAppEngineIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebTypeComputeIamBinding",
	}:
		if err := (&iapv1alpha1.WebTypeComputeIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebTypeComputeIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebTypeComputeIamMember",
	}:
		if err := (&iapv1alpha1.WebTypeComputeIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebTypeComputeIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iap.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebTypeComputeIamPolicy",
	}:
		if err := (&iapv1alpha1.WebTypeComputeIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebTypeComputeIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "identity.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformDefaultSupportedIdpConfig",
	}:
		if err := (&identityv1alpha1.PlatformDefaultSupportedIdpConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PlatformDefaultSupportedIdpConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "identity.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformInboundSamlConfig",
	}:
		if err := (&identityv1alpha1.PlatformInboundSamlConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PlatformInboundSamlConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "identity.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformOauthIdpConfig",
	}:
		if err := (&identityv1alpha1.PlatformOauthIdpConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PlatformOauthIdpConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "identity.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformTenant",
	}:
		if err := (&identityv1alpha1.PlatformTenant{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PlatformTenant")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "identity.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformTenantDefaultSupportedIdpConfig",
	}:
		if err := (&identityv1alpha1.PlatformTenantDefaultSupportedIdpConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PlatformTenantDefaultSupportedIdpConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "identity.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformTenantInboundSamlConfig",
	}:
		if err := (&identityv1alpha1.PlatformTenantInboundSamlConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PlatformTenantInboundSamlConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "identity.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformTenantOauthIdpConfig",
	}:
		if err := (&identityv1alpha1.PlatformTenantOauthIdpConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PlatformTenantOauthIdpConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CryptoKey",
	}:
		if err := (&kmsv1alpha1.CryptoKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CryptoKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CryptoKeyIamBinding",
	}:
		if err := (&kmsv1alpha1.CryptoKeyIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CryptoKeyIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CryptoKeyIamMember",
	}:
		if err := (&kmsv1alpha1.CryptoKeyIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CryptoKeyIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CryptoKeyIamPolicy",
	}:
		if err := (&kmsv1alpha1.CryptoKeyIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CryptoKeyIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyRing",
	}:
		if err := (&kmsv1alpha1.KeyRing{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KeyRing")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyRingIamBinding",
	}:
		if err := (&kmsv1alpha1.KeyRingIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KeyRingIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyRingIamMember",
	}:
		if err := (&kmsv1alpha1.KeyRingIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KeyRingIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyRingIamPolicy",
	}:
		if err := (&kmsv1alpha1.KeyRingIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KeyRingIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyRingImportJob",
	}:
		if err := (&kmsv1alpha1.KeyRingImportJob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KeyRingImportJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecretCiphertext",
	}:
		if err := (&kmsv1alpha1.SecretCiphertext{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecretCiphertext")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BillingAccountBucketConfig",
	}:
		if err := (&loggingv1alpha1.BillingAccountBucketConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BillingAccountBucketConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BillingAccountExclusion",
	}:
		if err := (&loggingv1alpha1.BillingAccountExclusion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BillingAccountExclusion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BillingAccountSink",
	}:
		if err := (&loggingv1alpha1.BillingAccountSink{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BillingAccountSink")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FolderBucketConfig",
	}:
		if err := (&loggingv1alpha1.FolderBucketConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FolderBucketConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FolderExclusion",
	}:
		if err := (&loggingv1alpha1.FolderExclusion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FolderExclusion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FolderSink",
	}:
		if err := (&loggingv1alpha1.FolderSink{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FolderSink")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Metric",
	}:
		if err := (&loggingv1alpha1.Metric{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Metric")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationBucketConfig",
	}:
		if err := (&loggingv1alpha1.OrganizationBucketConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OrganizationBucketConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationExclusion",
	}:
		if err := (&loggingv1alpha1.OrganizationExclusion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OrganizationExclusion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationSink",
	}:
		if err := (&loggingv1alpha1.OrganizationSink{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OrganizationSink")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProjectBucketConfig",
	}:
		if err := (&loggingv1alpha1.ProjectBucketConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProjectBucketConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProjectExclusion",
	}:
		if err := (&loggingv1alpha1.ProjectExclusion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProjectExclusion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logging.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProjectSink",
	}:
		if err := (&loggingv1alpha1.ProjectSink{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProjectSink")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "memcache.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&memcachev1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ml.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EngineModel",
	}:
		if err := (&mlv1alpha1.EngineModel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EngineModel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlertPolicy",
	}:
		if err := (&monitoringv1alpha1.AlertPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AlertPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomService",
	}:
		if err := (&monitoringv1alpha1.CustomService{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CustomService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dashboard",
	}:
		if err := (&monitoringv1alpha1.Dashboard{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Dashboard")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&monitoringv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MetricDescriptor",
	}:
		if err := (&monitoringv1alpha1.MetricDescriptor{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MetricDescriptor")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NotificationChannel",
	}:
		if err := (&monitoringv1alpha1.NotificationChannel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NotificationChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Slo",
	}:
		if err := (&monitoringv1alpha1.Slo{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Slo")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitoring.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UptimeCheckConfig",
	}:
		if err := (&monitoringv1alpha1.UptimeCheckConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UptimeCheckConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagementConnectivityTest",
	}:
		if err := (&networkv1alpha1.ManagementConnectivityTest{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagementConnectivityTest")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notebooks.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Environment",
	}:
		if err := (&notebooksv1alpha1.Environment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Environment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notebooks.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&notebooksv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notebooks.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamBinding",
	}:
		if err := (&notebooksv1alpha1.InstanceIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notebooks.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamMember",
	}:
		if err := (&notebooksv1alpha1.InstanceIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notebooks.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamPolicy",
	}:
		if err := (&notebooksv1alpha1.InstanceIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notebooks.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Location",
	}:
		if err := (&notebooksv1alpha1.Location{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Location")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessApprovalSettings",
	}:
		if err := (&organizationv1alpha1.AccessApprovalSettings{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccessApprovalSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamAuditConfig",
	}:
		if err := (&organizationv1alpha1.IamAuditConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamAuditConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamBinding",
	}:
		if err := (&organizationv1alpha1.IamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamCustomRole",
	}:
		if err := (&organizationv1alpha1.IamCustomRole{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamCustomRole")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamMember",
	}:
		if err := (&organizationv1alpha1.IamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamPolicy",
	}:
		if err := (&organizationv1alpha1.IamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organization.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&organizationv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "os.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigPatchDeployment",
	}:
		if err := (&osv1alpha1.ConfigPatchDeployment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConfigPatchDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "os.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LoginSSHPublicKey",
	}:
		if err := (&osv1alpha1.LoginSSHPublicKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LoginSSHPublicKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Project",
	}:
		if err := (&projectv1alpha1.Project{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Project")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessApprovalSettings",
	}:
		if err := (&projectv1alpha1.AccessApprovalSettings{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccessApprovalSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DefaultServiceAccounts",
	}:
		if err := (&projectv1alpha1.DefaultServiceAccounts{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DefaultServiceAccounts")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamAuditConfig",
	}:
		if err := (&projectv1alpha1.IamAuditConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamAuditConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamBinding",
	}:
		if err := (&projectv1alpha1.IamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamCustomRole",
	}:
		if err := (&projectv1alpha1.IamCustomRole{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamCustomRole")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamMember",
	}:
		if err := (&projectv1alpha1.IamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamPolicy",
	}:
		if err := (&projectv1alpha1.IamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationPolicy",
	}:
		if err := (&projectv1alpha1.OrganizationPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OrganizationPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&projectv1alpha1.Service{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "project.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UsageExportBucket",
	}:
		if err := (&projectv1alpha1.UsageExportBucket{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UsageExportBucket")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LiteSubscription",
	}:
		if err := (&pubsubv1alpha1.LiteSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LiteSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LiteTopic",
	}:
		if err := (&pubsubv1alpha1.LiteTopic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LiteTopic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schema",
	}:
		if err := (&pubsubv1alpha1.Schema{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Schema")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subscription",
	}:
		if err := (&pubsubv1alpha1.Subscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Subscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubscriptionIamBinding",
	}:
		if err := (&pubsubv1alpha1.SubscriptionIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubscriptionIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubscriptionIamMember",
	}:
		if err := (&pubsubv1alpha1.SubscriptionIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubscriptionIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubscriptionIamPolicy",
	}:
		if err := (&pubsubv1alpha1.SubscriptionIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubscriptionIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&pubsubv1alpha1.Topic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicIamBinding",
	}:
		if err := (&pubsubv1alpha1.TopicIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TopicIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicIamMember",
	}:
		if err := (&pubsubv1alpha1.TopicIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TopicIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pubsub.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicIamPolicy",
	}:
		if err := (&pubsubv1alpha1.TopicIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TopicIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redis.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&redisv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerLien",
	}:
		if err := (&resourcev1alpha1.ManagerLien{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerLien")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "runtimeconfig.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Config",
	}:
		if err := (&runtimeconfigv1alpha1.Config{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Config")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "runtimeconfig.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigIamBinding",
	}:
		if err := (&runtimeconfigv1alpha1.ConfigIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConfigIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "runtimeconfig.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigIamMember",
	}:
		if err := (&runtimeconfigv1alpha1.ConfigIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConfigIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "runtimeconfig.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigIamPolicy",
	}:
		if err := (&runtimeconfigv1alpha1.ConfigIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConfigIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "runtimeconfig.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Variable",
	}:
		if err := (&runtimeconfigv1alpha1.Variable{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Variable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "scc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Source",
	}:
		if err := (&sccv1alpha1.Source{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Source")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secret.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerSecret",
	}:
		if err := (&secretv1alpha1.ManagerSecret{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerSecret")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secret.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerSecretIamBinding",
	}:
		if err := (&secretv1alpha1.ManagerSecretIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerSecretIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secret.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerSecretIamMember",
	}:
		if err := (&secretv1alpha1.ManagerSecretIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerSecretIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secret.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerSecretIamPolicy",
	}:
		if err := (&secretv1alpha1.ManagerSecretIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerSecretIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secret.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagerSecretVersion",
	}:
		if err := (&secretv1alpha1.ManagerSecretVersion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagerSecretVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&servicev1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountIamBinding",
	}:
		if err := (&servicev1alpha1.AccountIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccountIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountIamMember",
	}:
		if err := (&servicev1alpha1.AccountIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccountIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountIamPolicy",
	}:
		if err := (&servicev1alpha1.AccountIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccountIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountKey",
	}:
		if err := (&servicev1alpha1.AccountKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccountKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkingConnection",
	}:
		if err := (&servicev1alpha1.NetworkingConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkingConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sourcereporepository.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SourcerepoRepository",
	}:
		if err := (&sourcereporepositoryv1alpha1.SourcerepoRepository{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SourcerepoRepository")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sourcereporepository.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamBinding",
	}:
		if err := (&sourcereporepositoryv1alpha1.IamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sourcereporepository.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamMember",
	}:
		if err := (&sourcereporepositoryv1alpha1.IamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sourcereporepository.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IamPolicy",
	}:
		if err := (&sourcereporepositoryv1alpha1.IamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&spannerv1alpha1.Database{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabaseIamBinding",
	}:
		if err := (&spannerv1alpha1.DatabaseIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatabaseIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabaseIamMember",
	}:
		if err := (&spannerv1alpha1.DatabaseIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatabaseIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabaseIamPolicy",
	}:
		if err := (&spannerv1alpha1.DatabaseIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatabaseIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&spannerv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamBinding",
	}:
		if err := (&spannerv1alpha1.InstanceIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamMember",
	}:
		if err := (&spannerv1alpha1.InstanceIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spanner.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceIamPolicy",
	}:
		if err := (&spannerv1alpha1.InstanceIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&sqlv1alpha1.Database{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabaseInstance",
	}:
		if err := (&sqlv1alpha1.DatabaseInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatabaseInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SourceRepresentationInstance",
	}:
		if err := (&sqlv1alpha1.SourceRepresentationInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SourceRepresentationInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SslCert",
	}:
		if err := (&sqlv1alpha1.SslCert{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SslCert")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "User",
	}:
		if err := (&sqlv1alpha1.User{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "User")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Bucket",
	}:
		if err := (&storagev1alpha1.Bucket{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Bucket")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketAccessControl",
	}:
		if err := (&storagev1alpha1.BucketAccessControl{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketAccessControl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketACL",
	}:
		if err := (&storagev1alpha1.BucketACL{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketIamBinding",
	}:
		if err := (&storagev1alpha1.BucketIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketIamMember",
	}:
		if err := (&storagev1alpha1.BucketIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketIamPolicy",
	}:
		if err := (&storagev1alpha1.BucketIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketObject",
	}:
		if err := (&storagev1alpha1.BucketObject{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketObject")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DefaultObjectAccessControl",
	}:
		if err := (&storagev1alpha1.DefaultObjectAccessControl{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DefaultObjectAccessControl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DefaultObjectACL",
	}:
		if err := (&storagev1alpha1.DefaultObjectACL{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DefaultObjectACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HmacKey",
	}:
		if err := (&storagev1alpha1.HmacKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HmacKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Notification",
	}:
		if err := (&storagev1alpha1.Notification{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Notification")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ObjectAccessControl",
	}:
		if err := (&storagev1alpha1.ObjectAccessControl{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ObjectAccessControl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ObjectACL",
	}:
		if err := (&storagev1alpha1.ObjectACL{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ObjectACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransferJob",
	}:
		if err := (&storagev1alpha1.TransferJob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransferJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagBinding",
	}:
		if err := (&tagsv1alpha1.TagBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TagBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagKey",
	}:
		if err := (&tagsv1alpha1.TagKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TagKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagKeyIamBinding",
	}:
		if err := (&tagsv1alpha1.TagKeyIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TagKeyIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagKeyIamMember",
	}:
		if err := (&tagsv1alpha1.TagKeyIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TagKeyIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagKeyIamPolicy",
	}:
		if err := (&tagsv1alpha1.TagKeyIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TagKeyIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagValue",
	}:
		if err := (&tagsv1alpha1.TagValue{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TagValue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagValueIamBinding",
	}:
		if err := (&tagsv1alpha1.TagValueIamBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TagValueIamBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagValueIamMember",
	}:
		if err := (&tagsv1alpha1.TagValueIamMember{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TagValueIamMember")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tags.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagValueIamPolicy",
	}:
		if err := (&tagsv1alpha1.TagValueIamPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TagValueIamPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tpu.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Node",
	}:
		if err := (&tpuv1alpha1.Node{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Node")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vertex.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AiDataset",
	}:
		if err := (&vertexv1alpha1.AiDataset{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AiDataset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessConnector",
	}:
		if err := (&vpcv1alpha1.AccessConnector{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccessConnector")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "workflows.google.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workflow",
	}:
		if err := (&workflowsv1alpha1.Workflow{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Workflow")
			return err
		}

	default:
		return fmt.Errorf("Invalid Webhook")
	}

	return nil
}
