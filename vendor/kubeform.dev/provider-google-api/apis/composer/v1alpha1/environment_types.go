/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Environment struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EnvironmentSpec   `json:"spec,omitempty"`
	Status            EnvironmentStatus `json:"status,omitempty"`
}

type EnvironmentSpecConfigDatabaseConfig struct {
	// Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used.
	MachineType *string `json:"machineType" tf:"machine_type"`
}

type EnvironmentSpecConfigEncryptionConfig struct {
	// Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated.
	KmsKeyName *string `json:"kmsKeyName" tf:"kms_key_name"`
}

type EnvironmentSpecConfigMaintenanceWindow struct {
	// Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end-time must be in the future, relative to 'start_time'.
	EndTime *string `json:"endTime" tf:"end_time"`
	// Maintenance window recurrence. Format is a subset of RFC-5545 (https://tools.ietf.org/html/rfc5545) 'RRULE'. The only allowed values for 'FREQ' field are 'FREQ=DAILY' and 'FREQ=WEEKLY;BYDAY=...'. Example values: 'FREQ=WEEKLY;BYDAY=TU,WE', 'FREQ=DAILY'.
	Recurrence *string `json:"recurrence" tf:"recurrence"`
	// Start time of the first recurrence of the maintenance window.
	StartTime *string `json:"startTime" tf:"start_time"`
}

type EnvironmentSpecConfigNodeConfigIpAllocationPolicy struct {
	// The IP address range used to allocate IP addresses to pods in the cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when use_ip_aliases is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use. Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
	// +optional
	ClusterIpv4CIDRBlock *string `json:"clusterIpv4CIDRBlock,omitempty" tf:"cluster_ipv4_cidr_block"`
	// The name of the cluster's secondary range used to allocate IP addresses to pods. Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when use_ip_aliases is true.
	// +optional
	ClusterSecondaryRangeName *string `json:"clusterSecondaryRangeName,omitempty" tf:"cluster_secondary_range_name"`
	// The IP address range used to allocate IP addresses in this cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when use_ip_aliases is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use. Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
	// +optional
	ServicesIpv4CIDRBlock *string `json:"servicesIpv4CIDRBlock,omitempty" tf:"services_ipv4_cidr_block"`
	// The name of the services' secondary range used to allocate IP addresses to the cluster. Specify either services_secondary_range_name or services_ipv4_cidr_block but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when use_ip_aliases is true.
	// +optional
	ServicesSecondaryRangeName *string `json:"servicesSecondaryRangeName,omitempty" tf:"services_secondary_range_name"`
	// Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created. Defaults to true if the ip_allocation_policy block is present in config. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
	// +optional
	UseIPAliases *bool `json:"useIPAliases,omitempty" tf:"use_ip_aliases"`
}

type EnvironmentSpecConfigNodeConfig struct {
	// The disk size in GB used for node VMs. Minimum size is 20GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	// +optional
	DiskSizeGb *int64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb"`
	// Configuration for controlling how IPs are allocated in the GKE cluster. Cannot be updated.
	// +optional
	IpAllocationPolicy *EnvironmentSpecConfigNodeConfigIpAllocationPolicy `json:"ipAllocationPolicy,omitempty" tf:"ip_allocation_policy"`
	// The Compute Engine machine type used for cluster instances, specified as a name or relative resource name. For example: "projects/{project}/zones/{zone}/machineTypes/{machineType}". Must belong to the enclosing environment's project and region/zone. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	// +optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type"`
	// The Compute Engine machine type used for cluster instances, specified as a name or relative resource name. For example: "projects/{project}/zones/{zone}/machineTypes/{machineType}". Must belong to the enclosing environment's project and region/zone. The network must belong to the environment's project. If unspecified, the "default" network ID in the environment's project is used. If a Custom Subnet Network is provided, subnetwork must also be provided.
	// +optional
	Network *string `json:"network,omitempty" tf:"network"`
	// The set of Google API scopes to be made available on all node VMs. Cannot be updated. If empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	// +optional
	OauthScopes []string `json:"oauthScopes,omitempty" tf:"oauth_scopes"`
	// The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated. If given, note that the service account must have roles/composer.worker for any GCP resources created under the Cloud Composer Environment.
	// +optional
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account"`
	// The Compute Engine subnetwork to be used for machine communications, , specified as a self-link, relative resource name (e.g. "projects/{project}/regions/{region}/subnetworks/{subnetwork}"), or by name. If subnetwork is provided, network must also be provided and the subnetwork must belong to the enclosing environment's project and region.
	// +optional
	Subnetwork *string `json:"subnetwork,omitempty" tf:"subnetwork"`
	// The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with RFC1035. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// The Compute Engine zone in which to deploy the VMs running the Apache Airflow software, specified as the zone name or relative resource name (e.g. "projects/{project}/zones/{zone}"). Must belong to the enclosing environment's project and region. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	// +optional
	Zone *string `json:"zone,omitempty" tf:"zone"`
}

type EnvironmentSpecConfigPrivateEnvironmentConfig struct {
	// The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
	// +optional
	CloudComposerNetworkIpv4CIDRBlock *string `json:"cloudComposerNetworkIpv4CIDRBlock,omitempty" tf:"cloud_composer_network_ipv4_cidr_block"`
	// The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block.
	// +optional
	CloudSQLIpv4CIDRBlock *string `json:"cloudSQLIpv4CIDRBlock,omitempty" tf:"cloud_sql_ipv4_cidr_block"`
	// If true, access to the public endpoint of the GKE cluster is denied. If this field is set to true, ip_allocation_policy.use_ip_aliases must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	// +optional
	EnablePrivateEndpoint *bool `json:"enablePrivateEndpoint,omitempty" tf:"enable_private_endpoint"`
	// The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network. If left blank, the default value of '172.16.0.0/28' is used.
	// +optional
	MasterIpv4CIDRBlock *string `json:"masterIpv4CIDRBlock,omitempty" tf:"master_ipv4_cidr_block"`
	// The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	// +optional
	WebServerIpv4CIDRBlock *string `json:"webServerIpv4CIDRBlock,omitempty" tf:"web_server_ipv4_cidr_block"`
}

type EnvironmentSpecConfigSoftwareConfig struct {
	// Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and cannot contain "=" or ";". Section and property names cannot contain characters: "." Apache Airflow configuration property names must be written in snake_case. Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are blacklisted, and cannot be overridden.
	// +optional
	AirflowConfigOverrides *map[string]string `json:"airflowConfigOverrides,omitempty" tf:"airflow_config_overrides"`
	// Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression [a-zA-Z_][a-zA-Z0-9_]*. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+), and they cannot match any of the following reserved names: AIRFLOW_HOME C_FORCE_ROOT CONTAINER_NAME DAGS_FOLDER GCP_PROJECT GCS_BUCKET GKE_CLUSTER_NAME SQL_DATABASE SQL_INSTANCE SQL_PASSWORD SQL_PROJECT SQL_REGION SQL_USER.
	// +optional
	EnvVariables *map[string]string `json:"envVariables,omitempty" tf:"env_variables"`
	// The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression composer-[0-9]+\\.[0-9]+(\\.[0-9]+)?-airflow-[0-9]+\\.[0-9]+(\\.[0-9]+.*)?. The Cloud Composer portion of the version is a semantic version. The portion of the image version following 'airflow-' is an official Apache Airflow repository release name. See documentation for allowed release names.
	// +optional
	ImageVersion *string `json:"imageVersion,omitempty" tf:"image_version"`
	// Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name (e.g. "numpy"). Values are the lowercase extras and version specifier (e.g. "==1.12.0", "[devel,gcp_api]", "[devel]>=1.8.2, <1.9.2"). To specify a package without pinning it to a version specifier, use the empty string as the value.
	// +optional
	PypiPackages *map[string]string `json:"pypiPackages,omitempty" tf:"pypi_packages"`
	// The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '2'. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
	// +optional
	PythonVersion *string `json:"pythonVersion,omitempty" tf:"python_version"`
	// The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
	// +optional
	SchedulerCount *int64 `json:"schedulerCount,omitempty" tf:"scheduler_count"`
}

type EnvironmentSpecConfigWebServerConfig struct {
	// Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
	MachineType *string `json:"machineType" tf:"machine_type"`
}

type EnvironmentSpecConfigWebServerNetworkAccessControlAllowedIPRange struct {
	// A description of this ip range.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334. IP range prefixes should be properly truncated. For example, 1.2.3.4/24 should be truncated to 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 should be truncated to 2001:db8::/32.
	Value *string `json:"value" tf:"value"`
}

type EnvironmentSpecConfigWebServerNetworkAccessControl struct {
	// A collection of allowed IP ranges with descriptions.
	// +optional
	AllowedIPRange []EnvironmentSpecConfigWebServerNetworkAccessControlAllowedIPRange `json:"allowedIPRange,omitempty" tf:"allowed_ip_range"`
}

type EnvironmentSpecConfigWorkloadsConfigScheduler struct {
	// The number of schedulers.
	// +optional
	Count *int64 `json:"count,omitempty" tf:"count"`
	// CPU request and limit for a single Airflow scheduler replica
	// +optional
	Cpu *float64 `json:"cpu,omitempty" tf:"cpu"`
	// Memory (GB) request and limit for a single Airflow scheduler replica.
	// +optional
	MemoryGb *float64 `json:"memoryGb,omitempty" tf:"memory_gb"`
	// Storage (GB) request and limit for a single Airflow scheduler replica.
	// +optional
	StorageGb *float64 `json:"storageGb,omitempty" tf:"storage_gb"`
}

type EnvironmentSpecConfigWorkloadsConfigWebServer struct {
	// CPU request and limit for Airflow web server.
	// +optional
	Cpu *float64 `json:"cpu,omitempty" tf:"cpu"`
	// Memory (GB) request and limit for Airflow web server.
	// +optional
	MemoryGb *float64 `json:"memoryGb,omitempty" tf:"memory_gb"`
	// Storage (GB) request and limit for Airflow web server.
	// +optional
	StorageGb *float64 `json:"storageGb,omitempty" tf:"storage_gb"`
}

type EnvironmentSpecConfigWorkloadsConfigWorker struct {
	// CPU request and limit for a single Airflow worker replica.
	// +optional
	Cpu *float64 `json:"cpu,omitempty" tf:"cpu"`
	// Maximum number of workers for autoscaling.
	// +optional
	MaxCount *int64 `json:"maxCount,omitempty" tf:"max_count"`
	// Memory (GB) request and limit for a single Airflow worker replica.
	// +optional
	MemoryGb *float64 `json:"memoryGb,omitempty" tf:"memory_gb"`
	// Minimum number of workers for autoscaling.
	// +optional
	MinCount *int64 `json:"minCount,omitempty" tf:"min_count"`
	// Storage (GB) request and limit for a single Airflow worker replica.
	// +optional
	StorageGb *float64 `json:"storageGb,omitempty" tf:"storage_gb"`
}

type EnvironmentSpecConfigWorkloadsConfig struct {
	// Configuration for resources used by Airflow schedulers.
	// +optional
	Scheduler *EnvironmentSpecConfigWorkloadsConfigScheduler `json:"scheduler,omitempty" tf:"scheduler"`
	// Configuration for resources used by Airflow web server.
	// +optional
	WebServer *EnvironmentSpecConfigWorkloadsConfigWebServer `json:"webServer,omitempty" tf:"web_server"`
	// Configuration for resources used by Airflow workers.
	// +optional
	Worker *EnvironmentSpecConfigWorkloadsConfigWorker `json:"worker,omitempty" tf:"worker"`
}

type EnvironmentSpecConfig struct {
	// The URI of the Apache Airflow Web UI hosted within this environment.
	// +optional
	AirflowURI *string `json:"airflowURI,omitempty" tf:"airflow_uri"`
	// The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using '/'-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with this prefix.
	// +optional
	DagGcsPrefix *string `json:"dagGcsPrefix,omitempty" tf:"dag_gcs_prefix"`
	// The configuration of Cloud SQL instance that is used by the Apache Airflow software. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	// +optional
	DatabaseConfig *EnvironmentSpecConfigDatabaseConfig `json:"databaseConfig,omitempty" tf:"database_config"`
	// The encryption options for the Composer environment and its dependencies. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	// +optional
	EncryptionConfig *EnvironmentSpecConfigEncryptionConfig `json:"encryptionConfig,omitempty" tf:"encryption_config"`
	// The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
	// +optional
	EnvironmentSize *string `json:"environmentSize,omitempty" tf:"environment_size"`
	// The Kubernetes Engine cluster used to run this environment.
	// +optional
	GkeCluster *string `json:"gkeCluster,omitempty" tf:"gke_cluster"`
	// The configuration for Cloud Composer maintenance window.
	// +optional
	MaintenanceWindow *EnvironmentSpecConfigMaintenanceWindow `json:"maintenanceWindow,omitempty" tf:"maintenance_window"`
	// The configuration used for the Kubernetes Engine cluster.
	// +optional
	NodeConfig *EnvironmentSpecConfigNodeConfig `json:"nodeConfig,omitempty" tf:"node_config"`
	// The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	// +optional
	NodeCount *int64 `json:"nodeCount,omitempty" tf:"node_count"`
	// The configuration used for the Private IP Cloud Composer environment.
	// +optional
	PrivateEnvironmentConfig *EnvironmentSpecConfigPrivateEnvironmentConfig `json:"privateEnvironmentConfig,omitempty" tf:"private_environment_config"`
	// The configuration settings for software inside the environment.
	// +optional
	SoftwareConfig *EnvironmentSpecConfigSoftwareConfig `json:"softwareConfig,omitempty" tf:"software_config"`
	// The configuration settings for the Airflow web server App Engine instance. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	// +optional
	WebServerConfig *EnvironmentSpecConfigWebServerConfig `json:"webServerConfig,omitempty" tf:"web_server_config"`
	// The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	// +optional
	WebServerNetworkAccessControl *EnvironmentSpecConfigWebServerNetworkAccessControl `json:"webServerNetworkAccessControl,omitempty" tf:"web_server_network_access_control"`
	// The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
	// +optional
	WorkloadsConfig *EnvironmentSpecConfigWorkloadsConfig `json:"workloadsConfig,omitempty" tf:"workloads_config"`
}

type EnvironmentSpec struct {
	State *EnvironmentSpecResource `json:"state,omitempty" tf:"-"`

	Resource EnvironmentSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type EnvironmentSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Configuration parameters for this environment.
	// +optional
	Config *EnvironmentSpecConfig `json:"config,omitempty" tf:"config"`
	// User-defined labels for this environment. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])?. Label values must be between 0 and 63 characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?. No more than 64 labels can be associated with a given environment. Both keys and values must be <= 128 bytes in size.
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// Name of the environment.
	Name *string `json:"name" tf:"name"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The location or Compute Engine region for the environment.
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
}

type EnvironmentStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// EnvironmentList is a list of Environments
type EnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Environment CRD objects
	Items []Environment `json:"items,omitempty"`
}
