/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AwsNodePool struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AwsNodePoolSpec   `json:"spec,omitempty"`
	Status            AwsNodePoolStatus `json:"status,omitempty"`
}

type AwsNodePoolSpecAutoscaling struct {
	// Required. Maximum number of nodes in the NodePool. Must be >= min_node_count.
	MaxNodeCount *int64 `json:"maxNodeCount" tf:"max_node_count"`
	// Required. Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count.
	MinNodeCount *int64 `json:"minNodeCount" tf:"min_node_count"`
}

type AwsNodePoolSpecConfigConfigEncryption struct {
	// Required. The ARN of the AWS KMS key used to encrypt node pool configuration.
	KmsKeyArn *string `json:"kmsKeyArn" tf:"kms_key_arn"`
}

type AwsNodePoolSpecConfigRootVolume struct {
	// Optional. The number of I/O operations per second (IOPS) to provision for GP3 volume.
	// +optional
	Iops *int64 `json:"iops,omitempty" tf:"iops"`
	// Optional. The Amazon Resource Name (ARN) of the Customer Managed Key (CMK) used to encrypt AWS EBS volumes. If not specified, the default Amazon managed key associated to the AWS region where this cluster runs will be used.
	// +optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`
	// Optional. The size of the volume, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
	// +optional
	SizeGib *int64 `json:"sizeGib,omitempty" tf:"size_gib"`
	// Optional. Type of the EBS volume. When unspecified, it defaults to GP2 volume. Possible values: VOLUME_TYPE_UNSPECIFIED, GP2, GP3
	// +optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type"`
}

type AwsNodePoolSpecConfigSshConfig struct {
	// Required. The name of the EC2 key pair used to login into cluster machines.
	Ec2KeyPair *string `json:"ec2KeyPair" tf:"ec2_key_pair"`
}

type AwsNodePoolSpecConfigTaints struct {
	// Required. The taint effect. Possible values: EFFECT_UNSPECIFIED, NO_SCHEDULE, PREFER_NO_SCHEDULE, NO_EXECUTE
	Effect *string `json:"effect" tf:"effect"`
	// Required. Key for the taint.
	Key *string `json:"key" tf:"key"`
	// Required. Value for the taint.
	Value *string `json:"value" tf:"value"`
}

type AwsNodePoolSpecConfig struct {
	// Required. The ARN of the AWS KMS key used to encrypt node pool configuration.
	ConfigEncryption *AwsNodePoolSpecConfigConfigEncryption `json:"configEncryption" tf:"config_encryption"`
	// Required. The name of the AWS IAM role assigned to nodes in the pool.
	IamInstanceProfile *string `json:"iamInstanceProfile" tf:"iam_instance_profile"`
	// Optional. The AWS instance type. When unspecified, it defaults to `t3.medium`.
	// +optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type"`
	// Optional. The initial labels assigned to nodes of this node pool. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// Optional. Template for the root volume provisioned for node pool nodes. Volumes will be provisioned in the availability zone assigned to the node pool subnet. When unspecified, it defaults to 32 GiB with the GP2 volume type.
	// +optional
	RootVolume *AwsNodePoolSpecConfigRootVolume `json:"rootVolume,omitempty" tf:"root_volume"`
	// Optional. The IDs of additional security groups to add to nodes in this pool. The manager will automatically create security groups with minimum rules needed for a functioning cluster.
	// +optional
	SecurityGroupIDS []string `json:"securityGroupIDS,omitempty" tf:"security_group_ids"`
	// Optional. The SSH configuration.
	// +optional
	SshConfig *AwsNodePoolSpecConfigSshConfig `json:"sshConfig,omitempty" tf:"ssh_config"`
	// Optional. Key/value metadata to assign to each underlying AWS resource. Specify at most 50 pairs containing alphanumerics, spaces, and symbols (.+-=_:@/). Keys can be up to 127 Unicode characters. Values can be up to 255 Unicode characters.
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// Optional. The initial taints assigned to nodes of this node pool.
	// +optional
	Taints []AwsNodePoolSpecConfigTaints `json:"taints,omitempty" tf:"taints"`
}

type AwsNodePoolSpecMaxPodsConstraint struct {
	// Required. The maximum number of pods to schedule on a single node.
	MaxPodsPerNode *int64 `json:"maxPodsPerNode" tf:"max_pods_per_node"`
}

type AwsNodePoolSpec struct {
	State *AwsNodePoolSpecResource `json:"state,omitempty" tf:"-"`

	Resource AwsNodePoolSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type AwsNodePoolSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	// +optional
	Annotations *map[string]string `json:"annotations,omitempty" tf:"annotations"`
	// Required. Autoscaler configuration for this node pool.
	Autoscaling *AwsNodePoolSpecAutoscaling `json:"autoscaling" tf:"autoscaling"`
	// The awsCluster for the resource
	Cluster *string `json:"cluster" tf:"cluster"`
	// Required. The configuration of the node pool.
	Config *AwsNodePoolSpecConfig `json:"config" tf:"config"`
	// Output only. The time at which this node pool was created.
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	// +optional
	Etag *string `json:"etag,omitempty" tf:"etag"`
	// The location for the resource
	Location *string `json:"location" tf:"location"`
	// Required. The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint *AwsNodePoolSpecMaxPodsConstraint `json:"maxPodsConstraint" tf:"max_pods_constraint"`
	// The name of this resource.
	Name *string `json:"name" tf:"name"`
	// The project for the resource
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Output only. If set, there are currently changes in flight to the node pool.
	// +optional
	Reconciling *bool `json:"reconciling,omitempty" tf:"reconciling"`
	// Output only. The lifecycle state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR, DEGRADED
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// Required. The subnet where the node pool node run.
	SubnetID *string `json:"subnetID" tf:"subnet_id"`
	// Output only. A globally unique identifier for the node pool.
	// +optional
	Uid *string `json:"uid,omitempty" tf:"uid"`
	// Output only. The time at which this node pool was last updated.
	// +optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time"`
	// Required. The Kubernetes version to run on this node pool (e.g. `1.19.10-gke.1000`). You can list all supported versions on a given Google Cloud region by calling GetAwsServerConfig.
	Version *string `json:"version" tf:"version"`
}

type AwsNodePoolStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AwsNodePoolList is a list of AwsNodePools
type AwsNodePoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AwsNodePool CRD objects
	Items []AwsNodePool `json:"items,omitempty"`
}
