/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AzureNodePool struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AzureNodePoolSpec   `json:"spec,omitempty"`
	Status            AzureNodePoolStatus `json:"status,omitempty"`
}

type AzureNodePoolSpecAutoscaling struct {
	// Required. Maximum number of nodes in the node pool. Must be >= min_node_count.
	MaxNodeCount *int64 `json:"maxNodeCount" tf:"max_node_count"`
	// Required. Minimum number of nodes in the node pool. Must be >= 1 and <= max_node_count.
	MinNodeCount *int64 `json:"minNodeCount" tf:"min_node_count"`
}

type AzureNodePoolSpecConfigRootVolume struct {
	// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
	// +optional
	SizeGib *int64 `json:"sizeGib,omitempty" tf:"size_gib"`
}

type AzureNodePoolSpecConfigSshConfig struct {
	// Required. The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
	AuthorizedKey *string `json:"authorizedKey" tf:"authorized_key"`
}

type AzureNodePoolSpecConfig struct {
	// Optional. Configuration related to the root volume provisioned for each node pool machine. When unspecified, it defaults to a 32-GiB Azure Disk.
	// +optional
	RootVolume *AzureNodePoolSpecConfigRootVolume `json:"rootVolume,omitempty" tf:"root_volume"`
	// Required. SSH configuration for how to access the node pool machines.
	SshConfig *AzureNodePoolSpecConfigSshConfig `json:"sshConfig" tf:"ssh_config"`
	// Optional. A set of tags to apply to all underlying Azure resources for this node pool. This currently only includes Virtual Machine Scale Sets. Specify at most 50 pairs containing alphanumerics, spaces, and symbols (.+-=_:@/). Keys can be up to 127 Unicode characters. Values can be up to 255 Unicode characters.
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// Optional. The Azure VM size name. Example: `Standard_DS2_v2`. See (/anthos/clusters/docs/azure/reference/supported-vms) for options. When unspecified, it defaults to `Standard_DS2_v2`.
	// +optional
	VmSize *string `json:"vmSize,omitempty" tf:"vm_size"`
}

type AzureNodePoolSpecMaxPodsConstraint struct {
	// Required. The maximum number of pods to schedule on a single node.
	MaxPodsPerNode *int64 `json:"maxPodsPerNode" tf:"max_pods_per_node"`
}

type AzureNodePoolSpec struct {
	State *AzureNodePoolSpecResource `json:"state,omitempty" tf:"-"`

	Resource AzureNodePoolSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type AzureNodePoolSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	// +optional
	Annotations *map[string]string `json:"annotations,omitempty" tf:"annotations"`
	// Required. Autoscaler configuration for this node pool.
	Autoscaling *AzureNodePoolSpecAutoscaling `json:"autoscaling" tf:"autoscaling"`
	// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
	// +optional
	AzureAvailabilityZone *string `json:"azureAvailabilityZone,omitempty" tf:"azure_availability_zone"`
	// The azureCluster for the resource
	Cluster *string `json:"cluster" tf:"cluster"`
	// Required. The node configuration of the node pool.
	Config *AzureNodePoolSpecConfig `json:"config" tf:"config"`
	// Output only. The time at which this node pool was created.
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	// +optional
	Etag *string `json:"etag,omitempty" tf:"etag"`
	// The location for the resource
	Location *string `json:"location" tf:"location"`
	// Required. The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint *AzureNodePoolSpecMaxPodsConstraint `json:"maxPodsConstraint" tf:"max_pods_constraint"`
	// The name of this resource.
	Name *string `json:"name" tf:"name"`
	// The project for the resource
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Output only. If set, there are currently pending changes to the node pool.
	// +optional
	Reconciling *bool `json:"reconciling,omitempty" tf:"reconciling"`
	// Output only. The current state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR, DEGRADED
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// Required. The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster configuration.
	SubnetID *string `json:"subnetID" tf:"subnet_id"`
	// Output only. A globally unique identifier for the node pool.
	// +optional
	Uid *string `json:"uid,omitempty" tf:"uid"`
	// Output only. The time at which this node pool was last updated.
	// +optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time"`
	// Required. The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
	Version *string `json:"version" tf:"version"`
}

type AzureNodePoolStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AzureNodePoolList is a list of AzureNodePools
type AzureNodePoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AzureNodePool CRD objects
	Items []AzureNodePool `json:"items,omitempty"`
}
