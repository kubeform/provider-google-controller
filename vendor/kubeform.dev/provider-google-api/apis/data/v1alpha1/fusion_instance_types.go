/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type FusionInstance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FusionInstanceSpec   `json:"spec,omitempty"`
	Status            FusionInstanceStatus `json:"status,omitempty"`
}

type FusionInstanceSpecNetworkConfig struct {
	// The IP range in CIDR notation to use for the managed Data Fusion instance
	// nodes. This range must not overlap with any other ranges used in the Data Fusion instance network.
	IpAllocation *string `json:"ipAllocation" tf:"ip_allocation"`
	// Name of the network in the project with which the tenant project
	// will be peered for executing pipelines. In case of shared VPC where the network resides in another host
	// project the network should specified in the form of projects/{host-project-id}/global/networks/{network}
	Network *string `json:"network" tf:"network"`
}

type FusionInstanceSpec struct {
	State *FusionInstanceSpecResource `json:"state,omitempty" tf:"-"`

	Resource FusionInstanceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type FusionInstanceSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The time the instance was created in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines.
	// +optional
	DataprocServiceAccount *string `json:"dataprocServiceAccount,omitempty" tf:"dataproc_service_account"`
	// An optional description of the instance.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Option to enable Stackdriver Logging.
	// +optional
	EnableStackdriverLogging *bool `json:"enableStackdriverLogging,omitempty" tf:"enable_stackdriver_logging"`
	// Option to enable Stackdriver Monitoring.
	// +optional
	EnableStackdriverMonitoring *bool `json:"enableStackdriverMonitoring,omitempty" tf:"enable_stackdriver_monitoring"`
	// Cloud Storage bucket generated by Data Fusion in the customer project.
	// +optional
	GcsBucket *string `json:"gcsBucket,omitempty" tf:"gcs_bucket"`
	// The resource labels for instance to use to annotate any related underlying resources,
	// such as Compute Engine VMs.
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// The ID of the instance or a fully qualified identifier for the instance.
	Name *string `json:"name" tf:"name"`
	// Network configuration options. These are required when a private Data Fusion instance is to be created.
	// +optional
	NetworkConfig *FusionInstanceSpecNetworkConfig `json:"networkConfig,omitempty" tf:"network_config"`
	// Map of additional options used to configure the behavior of Data Fusion instance.
	// +optional
	Options *map[string]string `json:"options,omitempty" tf:"options"`
	// Specifies whether the Data Fusion instance should be private. If set to
	// true, all Data Fusion nodes will have private IP addresses and will not be
	// able to access the public internet.
	// +optional
	PrivateInstance *bool `json:"privateInstance,omitempty" tf:"private_instance"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The region of the Data Fusion instance.
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// Endpoint on which the Data Fusion UI and REST APIs are accessible.
	// +optional
	ServiceEndpoint *string `json:"serviceEndpoint,omitempty" tf:"service_endpoint"`
	// The current state of this Data Fusion instance.
	// - CREATING: Instance is being created
	// - RUNNING: Instance is running and ready for requests
	// - FAILED: Instance creation failed
	// - DELETING: Instance is being deleted
	// - UPGRADING: Instance is being upgraded
	// - RESTARTING: Instance is being restarted
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// Additional information about the current state of this Data Fusion instance if available.
	// +optional
	StateMessage *string `json:"stateMessage,omitempty" tf:"state_message"`
	// The name of the tenant project.
	// +optional
	TenantProjectID *string `json:"tenantProjectID,omitempty" tf:"tenant_project_id"`
	// Represents the type of Data Fusion instance. Each type is configured with
	// the default settings for processing and memory.
	// - BASIC: Basic Data Fusion instance. In Basic type, the user will be able to create data pipelines
	// using point and click UI. However, there are certain limitations, such as fewer number
	// of concurrent pipelines, no support for streaming pipelines, etc.
	// - ENTERPRISE: Enterprise Data Fusion instance. In Enterprise type, the user will have more features
	// available, such as support for streaming pipelines, higher number of concurrent pipelines, etc.
	// - DEVELOPER: Developer Data Fusion instance. In Developer type, the user will have all features available but
	// with restrictive capabilities. This is to help enterprises design and develop their data ingestion and integration
	// pipelines at low cost. Possible values: ["BASIC", "ENTERPRISE", "DEVELOPER"]
	Type *string `json:"type" tf:"type"`
	// The time the instance was last updated in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
	// +optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time"`
	// Current version of the Data Fusion.
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type FusionInstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// FusionInstanceList is a list of FusionInstances
type FusionInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of FusionInstance CRD objects
	Items []FusionInstance `json:"items,omitempty"`
}
