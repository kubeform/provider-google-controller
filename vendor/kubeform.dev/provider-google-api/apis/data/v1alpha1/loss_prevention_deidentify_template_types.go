/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type LossPreventionDeidentifyTemplate struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LossPreventionDeidentifyTemplateSpec   `json:"spec,omitempty"`
	Status            LossPreventionDeidentifyTemplateStatus `json:"status,omitempty"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsInfoTypes struct {
	// Name of the information type.
	Name *string `json:"name" tf:"name"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnore struct {
	// Characters to not transform when masking.
	// +optional
	CharacterToSkip *string `json:"characterToSkip,omitempty" tf:"character_to_skip"`
	// Common characters to not transform when masking. Useful to avoid removing punctuation. Possible values: ["NUMERIC", "ALPHA_UPPER_CASE", "ALPHA_LOWER_CASE", "PUNCTUATION", "WHITESPACE"]
	// +optional
	CommonCharactersToIgnore *string `json:"commonCharactersToIgnore,omitempty" tf:"common_characters_to_ignore"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCharacterMaskConfig struct {
	// Characters to skip when doing de-identification of a value. These will be left alone and skipped.
	// +optional
	CharactersToIgnore []LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnore `json:"charactersToIgnore,omitempty" tf:"characters_to_ignore"`
	// Character to use to mask the sensitive values—for example, * for an alphabetic string such as a name, or 0 for a numeric string
	// such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to * for
	// strings, and 0 for digits.
	// +optional
	MaskingCharacter *string `json:"maskingCharacter,omitempty" tf:"masking_character"`
	// Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally.
	// +optional
	NumberToMask *int64 `json:"numberToMask,omitempty" tf:"number_to_mask"`
	// Mask characters in reverse order. For example, if masking_character is 0, number_to_mask is 14, and reverse_order is 'false', then the
	// input string '1234-5678-9012-3456' is masked as '00000000000000-3456'.
	// +optional
	ReverseOrder *bool `json:"reverseOrder,omitempty" tf:"reverse_order"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigContext struct {
	// Name describing the field.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrapped struct {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	CryptoKeyName *string `json:"cryptoKeyName" tf:"crypto_key_name"`
	// The wrapped data crypto key.
	//
	// A base64-encoded string.
	WrappedKey *string `json:"wrappedKey" tf:"wrapped_key"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransient struct {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate 'TransientCryptoKey' protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	Name *string `json:"name" tf:"name"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrapped struct {
	// A 128/192/256 bit key.
	//
	// A base64-encoded string.
	Key *string `json:"key" tf:"key"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKey struct {
	// Kms wrapped key
	// +optional
	KmsWrapped *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrapped `json:"kmsWrapped,omitempty" tf:"kms_wrapped"`
	// Transient crypto key
	// +optional
	Transient *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransient `json:"transient,omitempty" tf:"transient"`
	// Unwrapped crypto key
	// +optional
	Unwrapped *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrapped `json:"unwrapped,omitempty" tf:"unwrapped"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoType struct {
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern '[A-Za-z0-9$-_]{1,64}'.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfig struct {
	// A context may be used for higher security and maintaining referential integrity such that the same identifier in two different contexts will be given a distinct surrogate. The context is appended to plaintext value being encrypted. On decryption the provided context is validated against the value used during encryption. If a context was provided during encryption, same context must be provided during decryption as well.
	//
	// If the context is not set, plaintext would be used as is for encryption. If the context is set but:
	//
	// 1.  there is no record present when transforming a given value or
	// 2.  the field is not present when transforming a given value,
	//
	// plaintext would be used as is for encryption.
	//
	// Note that case (1) is expected when an 'InfoTypeTransformation' is applied to both structured and non-structured 'ContentItem's.
	// +optional
	Context *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigContext `json:"context,omitempty" tf:"context"`
	// The key used by the encryption function.
	// +optional
	CryptoKey *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKey `json:"cryptoKey,omitempty" tf:"crypto_key"`
	// The custom info type to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom info type followed by the number of characters comprising the surrogate. The following scheme defines the format: {info type name}({surrogate character count}):{surrogate}
	//
	// For example, if the name of custom info type is 'MY\_TOKEN\_INFO\_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY\_TOKEN\_INFO\_TYPE(3):abc'
	//
	// This annotation identifies the surrogate when inspecting content using the custom info type 'Surrogate'. This facilitates reversal of the surrogate when it occurs in free text.
	//
	// Note: For record transformations where the entire cell in a table is being transformed, surrogates are not mandatory. Surrogates are used to denote the location of the token and are necessary for re-identification in free form text.
	//
	// In order for inspection to work properly, the name of this info type must not occur naturally anywhere in your data; otherwise, inspection may either
	//
	// *   reverse a surrogate that does not correspond to an actual identifier
	// *   be unable to parse the surrogate and result in an error
	//
	// Therefore, choose your custom info type name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY\_TOKEN\_TYPE.
	// +optional
	SurrogateInfoType *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoType `json:"surrogateInfoType,omitempty" tf:"surrogate_info_type"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContext struct {
	// Name describing the field.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrapped struct {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	CryptoKeyName *string `json:"cryptoKeyName" tf:"crypto_key_name"`
	// The wrapped data crypto key.
	//
	// A base64-encoded string.
	WrappedKey *string `json:"wrappedKey" tf:"wrapped_key"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransient struct {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate 'TransientCryptoKey' protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	Name *string `json:"name" tf:"name"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrapped struct {
	// A 128/192/256 bit key.
	//
	// A base64-encoded string.
	Key *string `json:"key" tf:"key"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKey struct {
	// Kms wrapped key
	// +optional
	KmsWrapped *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrapped `json:"kmsWrapped,omitempty" tf:"kms_wrapped"`
	// Transient crypto key
	// +optional
	Transient *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransient `json:"transient,omitempty" tf:"transient"`
	// Unwrapped crypto key
	// +optional
	Unwrapped *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrapped `json:"unwrapped,omitempty" tf:"unwrapped"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoType struct {
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at [https://cloud.google.com/dlp/docs/infotypes-reference](https://cloud.google.com/dlp/docs/infotypes-reference) when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern '[A-Za-z0-9$-_]{1,64}'.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfig struct {
	// Common alphabets. Possible values: ["FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED", "NUMERIC", "HEXADECIMAL", "UPPER_CASE_ALPHA_NUMERIC", "ALPHA_NUMERIC"]
	// +optional
	CommonAlphabet *string `json:"commonAlphabet,omitempty" tf:"common_alphabet"`
	// The 'tweak', a context may be used for higher security since the same identifier in two different contexts won't be given the same surrogate. If the context is not set, a default tweak will be used.
	//
	// If the context is set but:
	//
	// 1.  there is no record present when transforming a given value or
	// 2.  the field is not present when transforming a given value,
	//
	// a default tweak will be used.
	//
	// Note that case (1) is expected when an 'InfoTypeTransformation' is applied to both structured and non-structured 'ContentItem's. Currently, the referenced field may be of value type integer or string.
	//
	// The tweak is constructed as a sequence of bytes in big endian byte order such that:
	//
	// *   a 64 bit integer is encoded followed by a single byte of value 1
	// *   a string is encoded in UTF-8 format followed by a single byte of value 2
	// +optional
	Context *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContext `json:"context,omitempty" tf:"context"`
	// The key used by the encryption algorithm.
	// +optional
	CryptoKey *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKey `json:"cryptoKey,omitempty" tf:"crypto_key"`
	// This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range \[2, 95\]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is:
	//
	// ''0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~'!@#$%^&*()_-+={[}]|:;"'<,>.?/''
	// +optional
	CustomAlphabet *string `json:"customAlphabet,omitempty" tf:"custom_alphabet"`
	// The native way to select the alphabet. Must be in the range \[2, 95\].
	// +optional
	Radix *int64 `json:"radix,omitempty" tf:"radix"`
	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info\_type\_name(surrogate\_character\_count):surrogate
	//
	// For example, if the name of custom infoType is 'MY\_TOKEN\_INFO\_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY\_TOKEN\_INFO\_TYPE(3):abc'
	//
	// This annotation identifies the surrogate when inspecting content using the custom infoType ['SurrogateType'](https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#surrogatetype). This facilitates reversal of the surrogate when it occurs in free text.
	//
	// In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY\_TOKEN\_TYPE
	// +optional
	SurrogateInfoType *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoType `json:"surrogateInfoType,omitempty" tf:"surrogate_info_type"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfigNewValueDateValue struct {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	// +optional
	Day *int64 `json:"day,omitempty" tf:"day"`
	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	// +optional
	Month *int64 `json:"month,omitempty" tf:"month"`
	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	// +optional
	Year *int64 `json:"year,omitempty" tf:"year"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValue struct {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// +optional
	Hours *int64 `json:"hours,omitempty" tf:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	// +optional
	Minutes *int64 `json:"minutes,omitempty" tf:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +optional
	Nanos *int64 `json:"nanos,omitempty" tf:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// +optional
	Seconds *int64 `json:"seconds,omitempty" tf:"seconds"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfigNewValue struct {
	// A boolean value.
	// +optional
	BooleanValue *bool `json:"booleanValue,omitempty" tf:"boolean_value"`
	// Represents a whole or partial calendar date.
	// +optional
	DateValue *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfigNewValueDateValue `json:"dateValue,omitempty" tf:"date_value"`
	// Represents a day of the week. Possible values: ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]
	// +optional
	DayOfWeekValue *string `json:"dayOfWeekValue,omitempty" tf:"day_of_week_value"`
	// A float value.
	// +optional
	FloatValue *float64 `json:"floatValue,omitempty" tf:"float_value"`
	// An integer value.
	// +optional
	IntegerValue *int64 `json:"integerValue,omitempty" tf:"integer_value"`
	// A string value.
	// +optional
	StringValue *string `json:"stringValue,omitempty" tf:"string_value"`
	// Represents a time of day.
	// +optional
	TimeValue *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValue `json:"timeValue,omitempty" tf:"time_value"`
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +optional
	TimestampValue *string `json:"timestampValue,omitempty" tf:"timestamp_value"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfig struct {
	// Replace each input value with a given value.
	NewValue *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfigNewValue `json:"newValue" tf:"new_value"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformation struct {
	// Partially mask a string by replacing a given number of characters with a fixed character.
	// Masking can start from the beginning or end of the string.
	// +optional
	CharacterMaskConfig *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCharacterMaskConfig `json:"characterMaskConfig,omitempty" tf:"character_mask_config"`
	// Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC [https://tools.ietf.org/html/rfc5297](https://tools.ietf.org/html/rfc5297).
	// +optional
	CryptoDeterministicConfig *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfig `json:"cryptoDeterministicConfig,omitempty" tf:"crypto_deterministic_config"`
	// Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the 'content.reidentify' API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See [https://cloud.google.com/dlp/docs/pseudonymization](https://cloud.google.com/dlp/docs/pseudonymization) to learn more.
	//
	// Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
	// +optional
	CryptoReplaceFfxFpeConfig *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfig `json:"cryptoReplaceFfxFpeConfig,omitempty" tf:"crypto_replace_ffx_fpe_config"`
	// Replace each input value with a given value.
	// +optional
	ReplaceConfig *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfig `json:"replaceConfig,omitempty" tf:"replace_config"`
	// Replace each matching finding with the name of the info type.
	// +optional
	ReplaceWithInfoTypeConfig *bool `json:"replaceWithInfoTypeConfig,omitempty" tf:"replace_with_info_type_config"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformations struct {
	// InfoTypes to apply the transformation to. Leaving this empty will apply the transformation to apply to
	// all findings that correspond to infoTypes that were requested in InspectConfig.
	// +optional
	InfoTypes []LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsInfoTypes `json:"infoTypes,omitempty" tf:"info_types"`
	// Primitive transformation to apply to the infoType.
	PrimitiveTransformation *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformation `json:"primitiveTransformation" tf:"primitive_transformation"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformations struct {
	// Transformation for each infoType. Cannot specify more than one for a given infoType.
	Transformations []LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformationsTransformations `json:"transformations" tf:"transformations"`
}

type LossPreventionDeidentifyTemplateSpecDeidentifyConfig struct {
	// Specifies free-text based transformations to be applied to the dataset.
	InfoTypeTransformations *LossPreventionDeidentifyTemplateSpecDeidentifyConfigInfoTypeTransformations `json:"infoTypeTransformations" tf:"info_type_transformations"`
}

type LossPreventionDeidentifyTemplateSpec struct {
	State *LossPreventionDeidentifyTemplateSpecResource `json:"state,omitempty" tf:"-"`

	Resource LossPreventionDeidentifyTemplateSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type LossPreventionDeidentifyTemplateSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Configuration of the deidentify template
	DeidentifyConfig *LossPreventionDeidentifyTemplateSpecDeidentifyConfig `json:"deidentifyConfig" tf:"deidentify_config"`
	// A description of the template.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// User set display name of the template.
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// The resource name of the template. Set by the server.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The parent of the template in any of the following formats:
	//
	// * 'projects/{{project}}'
	// * 'projects/{{project}}/locations/{{location}}'
	// * 'organizations/{{organization_id}}'
	// * 'organizations/{{organization_id}}/locations/{{location}}'
	Parent *string `json:"parent" tf:"parent"`
}

type LossPreventionDeidentifyTemplateStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// LossPreventionDeidentifyTemplateList is a list of LossPreventionDeidentifyTemplates
type LossPreventionDeidentifyTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of LossPreventionDeidentifyTemplate CRD objects
	Items []LossPreventionDeidentifyTemplate `json:"items,omitempty"`
}
