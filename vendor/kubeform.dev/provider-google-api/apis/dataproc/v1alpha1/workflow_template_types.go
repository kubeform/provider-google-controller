/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type WorkflowTemplate struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorkflowTemplateSpec   `json:"spec,omitempty"`
	Status            WorkflowTemplateStatus `json:"status,omitempty"`
}

type WorkflowTemplateSpecJobsHadoopJobLoggingConfig struct {
	// +optional
	DriverLogLevels *map[string]string `json:"driverLogLevels,omitempty" tf:"driver_log_levels"`
}

type WorkflowTemplateSpecJobsHadoopJob struct {
	// +optional
	ArchiveUris []string `json:"archiveUris,omitempty" tf:"archive_uris"`
	// +optional
	Args []string `json:"args,omitempty" tf:"args"`
	// +optional
	FileUris []string `json:"fileUris,omitempty" tf:"file_uris"`
	// +optional
	JarFileUris []string `json:"jarFileUris,omitempty" tf:"jar_file_uris"`
	// +optional
	LoggingConfig *WorkflowTemplateSpecJobsHadoopJobLoggingConfig `json:"loggingConfig,omitempty" tf:"logging_config"`
	// +optional
	MainClass *string `json:"mainClass,omitempty" tf:"main_class"`
	// +optional
	MainJarFileURI *string `json:"mainJarFileURI,omitempty" tf:"main_jar_file_uri"`
	// +optional
	Properties *map[string]string `json:"properties,omitempty" tf:"properties"`
}

type WorkflowTemplateSpecJobsHiveJobQueryList struct {
	Queries []string `json:"queries" tf:"queries"`
}

type WorkflowTemplateSpecJobsHiveJob struct {
	// +optional
	ContinueOnFailure *bool `json:"continueOnFailure,omitempty" tf:"continue_on_failure"`
	// +optional
	JarFileUris []string `json:"jarFileUris,omitempty" tf:"jar_file_uris"`
	// +optional
	Properties *map[string]string `json:"properties,omitempty" tf:"properties"`
	// +optional
	QueryFileURI *string `json:"queryFileURI,omitempty" tf:"query_file_uri"`
	// +optional
	QueryList *WorkflowTemplateSpecJobsHiveJobQueryList `json:"queryList,omitempty" tf:"query_list"`
	// +optional
	ScriptVariables *map[string]string `json:"scriptVariables,omitempty" tf:"script_variables"`
}

type WorkflowTemplateSpecJobsPigJobLoggingConfig struct {
	// +optional
	DriverLogLevels *map[string]string `json:"driverLogLevels,omitempty" tf:"driver_log_levels"`
}

type WorkflowTemplateSpecJobsPigJobQueryList struct {
	Queries []string `json:"queries" tf:"queries"`
}

type WorkflowTemplateSpecJobsPigJob struct {
	// +optional
	ContinueOnFailure *bool `json:"continueOnFailure,omitempty" tf:"continue_on_failure"`
	// +optional
	JarFileUris []string `json:"jarFileUris,omitempty" tf:"jar_file_uris"`
	// +optional
	LoggingConfig *WorkflowTemplateSpecJobsPigJobLoggingConfig `json:"loggingConfig,omitempty" tf:"logging_config"`
	// +optional
	Properties *map[string]string `json:"properties,omitempty" tf:"properties"`
	// +optional
	QueryFileURI *string `json:"queryFileURI,omitempty" tf:"query_file_uri"`
	// +optional
	QueryList *WorkflowTemplateSpecJobsPigJobQueryList `json:"queryList,omitempty" tf:"query_list"`
	// +optional
	ScriptVariables *map[string]string `json:"scriptVariables,omitempty" tf:"script_variables"`
}

type WorkflowTemplateSpecJobsPrestoJobLoggingConfig struct {
	// +optional
	DriverLogLevels *map[string]string `json:"driverLogLevels,omitempty" tf:"driver_log_levels"`
}

type WorkflowTemplateSpecJobsPrestoJobQueryList struct {
	Queries []string `json:"queries" tf:"queries"`
}

type WorkflowTemplateSpecJobsPrestoJob struct {
	// +optional
	ClientTags []string `json:"clientTags,omitempty" tf:"client_tags"`
	// +optional
	ContinueOnFailure *bool `json:"continueOnFailure,omitempty" tf:"continue_on_failure"`
	// +optional
	LoggingConfig *WorkflowTemplateSpecJobsPrestoJobLoggingConfig `json:"loggingConfig,omitempty" tf:"logging_config"`
	// +optional
	OutputFormat *string `json:"outputFormat,omitempty" tf:"output_format"`
	// +optional
	Properties *map[string]string `json:"properties,omitempty" tf:"properties"`
	// +optional
	QueryFileURI *string `json:"queryFileURI,omitempty" tf:"query_file_uri"`
	// +optional
	QueryList *WorkflowTemplateSpecJobsPrestoJobQueryList `json:"queryList,omitempty" tf:"query_list"`
}

type WorkflowTemplateSpecJobsPysparkJobLoggingConfig struct {
	// +optional
	DriverLogLevels *map[string]string `json:"driverLogLevels,omitempty" tf:"driver_log_levels"`
}

type WorkflowTemplateSpecJobsPysparkJob struct {
	// +optional
	ArchiveUris []string `json:"archiveUris,omitempty" tf:"archive_uris"`
	// +optional
	Args []string `json:"args,omitempty" tf:"args"`
	// +optional
	FileUris []string `json:"fileUris,omitempty" tf:"file_uris"`
	// +optional
	JarFileUris []string `json:"jarFileUris,omitempty" tf:"jar_file_uris"`
	// +optional
	LoggingConfig     *WorkflowTemplateSpecJobsPysparkJobLoggingConfig `json:"loggingConfig,omitempty" tf:"logging_config"`
	MainPythonFileURI *string                                          `json:"mainPythonFileURI" tf:"main_python_file_uri"`
	// +optional
	Properties *map[string]string `json:"properties,omitempty" tf:"properties"`
	// +optional
	PythonFileUris []string `json:"pythonFileUris,omitempty" tf:"python_file_uris"`
}

type WorkflowTemplateSpecJobsScheduling struct {
	// +optional
	MaxFailuresPerHour *int64 `json:"maxFailuresPerHour,omitempty" tf:"max_failures_per_hour"`
	// +optional
	MaxFailuresTotal *int64 `json:"maxFailuresTotal,omitempty" tf:"max_failures_total"`
}

type WorkflowTemplateSpecJobsSparkJobLoggingConfig struct {
	// +optional
	DriverLogLevels *map[string]string `json:"driverLogLevels,omitempty" tf:"driver_log_levels"`
}

type WorkflowTemplateSpecJobsSparkJob struct {
	// +optional
	ArchiveUris []string `json:"archiveUris,omitempty" tf:"archive_uris"`
	// +optional
	Args []string `json:"args,omitempty" tf:"args"`
	// +optional
	FileUris []string `json:"fileUris,omitempty" tf:"file_uris"`
	// +optional
	JarFileUris []string `json:"jarFileUris,omitempty" tf:"jar_file_uris"`
	// +optional
	LoggingConfig *WorkflowTemplateSpecJobsSparkJobLoggingConfig `json:"loggingConfig,omitempty" tf:"logging_config"`
	// +optional
	MainClass *string `json:"mainClass,omitempty" tf:"main_class"`
	// +optional
	MainJarFileURI *string `json:"mainJarFileURI,omitempty" tf:"main_jar_file_uri"`
	// +optional
	Properties *map[string]string `json:"properties,omitempty" tf:"properties"`
}

type WorkflowTemplateSpecJobsSparkRJobLoggingConfig struct {
	// +optional
	DriverLogLevels *map[string]string `json:"driverLogLevels,omitempty" tf:"driver_log_levels"`
}

type WorkflowTemplateSpecJobsSparkRJob struct {
	// +optional
	ArchiveUris []string `json:"archiveUris,omitempty" tf:"archive_uris"`
	// +optional
	Args []string `json:"args,omitempty" tf:"args"`
	// +optional
	FileUris []string `json:"fileUris,omitempty" tf:"file_uris"`
	// +optional
	LoggingConfig *WorkflowTemplateSpecJobsSparkRJobLoggingConfig `json:"loggingConfig,omitempty" tf:"logging_config"`
	MainRFileURI  *string                                         `json:"mainRFileURI" tf:"main_r_file_uri"`
	// +optional
	Properties *map[string]string `json:"properties,omitempty" tf:"properties"`
}

type WorkflowTemplateSpecJobsSparkSQLJobLoggingConfig struct {
	// +optional
	DriverLogLevels *map[string]string `json:"driverLogLevels,omitempty" tf:"driver_log_levels"`
}

type WorkflowTemplateSpecJobsSparkSQLJobQueryList struct {
	Queries []string `json:"queries" tf:"queries"`
}

type WorkflowTemplateSpecJobsSparkSQLJob struct {
	// +optional
	JarFileUris []string `json:"jarFileUris,omitempty" tf:"jar_file_uris"`
	// +optional
	LoggingConfig *WorkflowTemplateSpecJobsSparkSQLJobLoggingConfig `json:"loggingConfig,omitempty" tf:"logging_config"`
	// +optional
	Properties *map[string]string `json:"properties,omitempty" tf:"properties"`
	// +optional
	QueryFileURI *string `json:"queryFileURI,omitempty" tf:"query_file_uri"`
	// +optional
	QueryList *WorkflowTemplateSpecJobsSparkSQLJobQueryList `json:"queryList,omitempty" tf:"query_list"`
	// +optional
	ScriptVariables *map[string]string `json:"scriptVariables,omitempty" tf:"script_variables"`
}

type WorkflowTemplateSpecJobs struct {
	// +optional
	HadoopJob *WorkflowTemplateSpecJobsHadoopJob `json:"hadoopJob,omitempty" tf:"hadoop_job"`
	// +optional
	HiveJob *WorkflowTemplateSpecJobsHiveJob `json:"hiveJob,omitempty" tf:"hive_job"`
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// +optional
	PigJob *WorkflowTemplateSpecJobsPigJob `json:"pigJob,omitempty" tf:"pig_job"`
	// +optional
	PrerequisiteStepIDS []string `json:"prerequisiteStepIDS,omitempty" tf:"prerequisite_step_ids"`
	// +optional
	PrestoJob *WorkflowTemplateSpecJobsPrestoJob `json:"prestoJob,omitempty" tf:"presto_job"`
	// +optional
	PysparkJob *WorkflowTemplateSpecJobsPysparkJob `json:"pysparkJob,omitempty" tf:"pyspark_job"`
	// +optional
	Scheduling *WorkflowTemplateSpecJobsScheduling `json:"scheduling,omitempty" tf:"scheduling"`
	// +optional
	SparkJob *WorkflowTemplateSpecJobsSparkJob `json:"sparkJob,omitempty" tf:"spark_job"`
	// +optional
	SparkRJob *WorkflowTemplateSpecJobsSparkRJob `json:"sparkRJob,omitempty" tf:"spark_r_job"`
	// +optional
	SparkSQLJob *WorkflowTemplateSpecJobsSparkSQLJob `json:"sparkSQLJob,omitempty" tf:"spark_sql_job"`
	StepID      *string                              `json:"stepID" tf:"step_id"`
}

type WorkflowTemplateSpecParametersValidationRegex struct {
	Regexes []string `json:"regexes" tf:"regexes"`
}

type WorkflowTemplateSpecParametersValidationValues struct {
	Values []string `json:"values" tf:"values"`
}

type WorkflowTemplateSpecParametersValidation struct {
	// +optional
	Regex *WorkflowTemplateSpecParametersValidationRegex `json:"regex,omitempty" tf:"regex"`
	// +optional
	Values *WorkflowTemplateSpecParametersValidationValues `json:"values,omitempty" tf:"values"`
}

type WorkflowTemplateSpecParameters struct {
	// +optional
	Description *string  `json:"description,omitempty" tf:"description"`
	Fields      []string `json:"fields" tf:"fields"`
	Name        *string  `json:"name" tf:"name"`
	// +optional
	Validation *WorkflowTemplateSpecParametersValidation `json:"validation,omitempty" tf:"validation"`
}

type WorkflowTemplateSpecPlacementClusterSelector struct {
	ClusterLabels *map[string]string `json:"clusterLabels" tf:"cluster_labels"`
	// +optional
	Zone *string `json:"zone,omitempty" tf:"zone"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigAutoscalingConfig struct {
	// +optional
	Policy *string `json:"policy,omitempty" tf:"policy"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigEncryptionConfig struct {
	// +optional
	GcePdKmsKeyName *string `json:"gcePdKmsKeyName,omitempty" tf:"gce_pd_kms_key_name"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigEndpointConfig struct {
	// +optional
	EnableHTTPPortAccess *bool `json:"enableHTTPPortAccess,omitempty" tf:"enable_http_port_access"`
	// +optional
	HttpPorts *map[string]string `json:"httpPorts,omitempty" tf:"http_ports"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigGceClusterConfigNodeGroupAffinity struct {
	NodeGroup *string `json:"nodeGroup" tf:"node_group"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigGceClusterConfigReservationAffinity struct {
	// +optional
	ConsumeReservationType *string `json:"consumeReservationType,omitempty" tf:"consume_reservation_type"`
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// +optional
	Values []string `json:"values,omitempty" tf:"values"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigGceClusterConfig struct {
	// +optional
	InternalIPOnly *bool `json:"internalIPOnly,omitempty" tf:"internal_ip_only"`
	// +optional
	Metadata *map[string]string `json:"metadata,omitempty" tf:"metadata"`
	// +optional
	Network *string `json:"network,omitempty" tf:"network"`
	// +optional
	NodeGroupAffinity *WorkflowTemplateSpecPlacementManagedClusterConfigGceClusterConfigNodeGroupAffinity `json:"nodeGroupAffinity,omitempty" tf:"node_group_affinity"`
	// +optional
	PrivateIpv6GoogleAccess *string `json:"privateIpv6GoogleAccess,omitempty" tf:"private_ipv6_google_access"`
	// +optional
	ReservationAffinity *WorkflowTemplateSpecPlacementManagedClusterConfigGceClusterConfigReservationAffinity `json:"reservationAffinity,omitempty" tf:"reservation_affinity"`
	// +optional
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account"`
	// +optional
	ServiceAccountScopes []string `json:"serviceAccountScopes,omitempty" tf:"service_account_scopes"`
	// +optional
	Subnetwork *string `json:"subnetwork,omitempty" tf:"subnetwork"`
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// +optional
	Zone *string `json:"zone,omitempty" tf:"zone"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigInitializationActions struct {
	// +optional
	ExecutableFile *string `json:"executableFile,omitempty" tf:"executable_file"`
	// +optional
	ExecutionTimeout *string `json:"executionTimeout,omitempty" tf:"execution_timeout"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigLifecycleConfig struct {
	// +optional
	AutoDeleteTime *string `json:"autoDeleteTime,omitempty" tf:"auto_delete_time"`
	// +optional
	AutoDeleteTtl *string `json:"autoDeleteTtl,omitempty" tf:"auto_delete_ttl"`
	// +optional
	IdleDeleteTtl *string `json:"idleDeleteTtl,omitempty" tf:"idle_delete_ttl"`
	// +optional
	IdleStartTime *string `json:"idleStartTime,omitempty" tf:"idle_start_time"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigMasterConfigAccelerators struct {
	// +optional
	AcceleratorCount *int64 `json:"acceleratorCount,omitempty" tf:"accelerator_count"`
	// +optional
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigMasterConfigDiskConfig struct {
	// +optional
	BootDiskSizeGb *int64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb"`
	// +optional
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type"`
	// +optional
	NumLocalSsds *int64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigMasterConfigManagedGroupConfig struct {
	// +optional
	InstanceGroupManagerName *string `json:"instanceGroupManagerName,omitempty" tf:"instance_group_manager_name"`
	// +optional
	InstanceTemplateName *string `json:"instanceTemplateName,omitempty" tf:"instance_template_name"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigMasterConfig struct {
	// +optional
	Accelerators []WorkflowTemplateSpecPlacementManagedClusterConfigMasterConfigAccelerators `json:"accelerators,omitempty" tf:"accelerators"`
	// +optional
	DiskConfig *WorkflowTemplateSpecPlacementManagedClusterConfigMasterConfigDiskConfig `json:"diskConfig,omitempty" tf:"disk_config"`
	// +optional
	Image *string `json:"image,omitempty" tf:"image"`
	// +optional
	InstanceNames []string `json:"instanceNames,omitempty" tf:"instance_names"`
	// +optional
	IsPreemptible *bool `json:"isPreemptible,omitempty" tf:"is_preemptible"`
	// +optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type"`
	// +optional
	ManagedGroupConfig []WorkflowTemplateSpecPlacementManagedClusterConfigMasterConfigManagedGroupConfig `json:"managedGroupConfig,omitempty" tf:"managed_group_config"`
	// +optional
	MinCPUPlatform *string `json:"minCPUPlatform,omitempty" tf:"min_cpu_platform"`
	// +optional
	NumInstances *int64 `json:"numInstances,omitempty" tf:"num_instances"`
	// +optional
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigSecondaryWorkerConfigAccelerators struct {
	// +optional
	AcceleratorCount *int64 `json:"acceleratorCount,omitempty" tf:"accelerator_count"`
	// +optional
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigSecondaryWorkerConfigDiskConfig struct {
	// +optional
	BootDiskSizeGb *int64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb"`
	// +optional
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type"`
	// +optional
	NumLocalSsds *int64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfig struct {
	// +optional
	InstanceGroupManagerName *string `json:"instanceGroupManagerName,omitempty" tf:"instance_group_manager_name"`
	// +optional
	InstanceTemplateName *string `json:"instanceTemplateName,omitempty" tf:"instance_template_name"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigSecondaryWorkerConfig struct {
	// +optional
	Accelerators []WorkflowTemplateSpecPlacementManagedClusterConfigSecondaryWorkerConfigAccelerators `json:"accelerators,omitempty" tf:"accelerators"`
	// +optional
	DiskConfig *WorkflowTemplateSpecPlacementManagedClusterConfigSecondaryWorkerConfigDiskConfig `json:"diskConfig,omitempty" tf:"disk_config"`
	// +optional
	Image *string `json:"image,omitempty" tf:"image"`
	// +optional
	InstanceNames []string `json:"instanceNames,omitempty" tf:"instance_names"`
	// +optional
	IsPreemptible *bool `json:"isPreemptible,omitempty" tf:"is_preemptible"`
	// +optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type"`
	// +optional
	ManagedGroupConfig []WorkflowTemplateSpecPlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfig `json:"managedGroupConfig,omitempty" tf:"managed_group_config"`
	// +optional
	MinCPUPlatform *string `json:"minCPUPlatform,omitempty" tf:"min_cpu_platform"`
	// +optional
	NumInstances *int64 `json:"numInstances,omitempty" tf:"num_instances"`
	// +optional
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigSecurityConfigKerberosConfig struct {
	// +optional
	CrossRealmTrustAdminServer *string `json:"crossRealmTrustAdminServer,omitempty" tf:"cross_realm_trust_admin_server"`
	// +optional
	CrossRealmTrustKdc *string `json:"crossRealmTrustKdc,omitempty" tf:"cross_realm_trust_kdc"`
	// +optional
	CrossRealmTrustRealm *string `json:"crossRealmTrustRealm,omitempty" tf:"cross_realm_trust_realm"`
	// +optional
	CrossRealmTrustSharedPassword *string `json:"crossRealmTrustSharedPassword,omitempty" tf:"cross_realm_trust_shared_password"`
	// +optional
	EnableKerberos *bool `json:"enableKerberos,omitempty" tf:"enable_kerberos"`
	// +optional
	KdcDbKey *string `json:"kdcDbKey,omitempty" tf:"kdc_db_key"`
	// +optional
	KeyPassword *string `json:"keyPassword,omitempty" tf:"key_password"`
	// +optional
	Keystore *string `json:"keystore,omitempty" tf:"keystore"`
	// +optional
	KeystorePassword *string `json:"keystorePassword,omitempty" tf:"keystore_password"`
	// +optional
	KmsKey *string `json:"kmsKey,omitempty" tf:"kms_key"`
	// +optional
	Realm *string `json:"realm,omitempty" tf:"realm"`
	// +optional
	RootPrincipalPassword *string `json:"rootPrincipalPassword,omitempty" tf:"root_principal_password"`
	// +optional
	TgtLifetimeHours *int64 `json:"tgtLifetimeHours,omitempty" tf:"tgt_lifetime_hours"`
	// +optional
	Truststore *string `json:"truststore,omitempty" tf:"truststore"`
	// +optional
	TruststorePassword *string `json:"truststorePassword,omitempty" tf:"truststore_password"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigSecurityConfig struct {
	// +optional
	KerberosConfig *WorkflowTemplateSpecPlacementManagedClusterConfigSecurityConfigKerberosConfig `json:"kerberosConfig,omitempty" tf:"kerberos_config"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigSoftwareConfig struct {
	// +optional
	ImageVersion *string `json:"imageVersion,omitempty" tf:"image_version"`
	// +optional
	Properties *map[string]string `json:"properties,omitempty" tf:"properties"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigWorkerConfigAccelerators struct {
	// +optional
	AcceleratorCount *int64 `json:"acceleratorCount,omitempty" tf:"accelerator_count"`
	// +optional
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigWorkerConfigDiskConfig struct {
	// +optional
	BootDiskSizeGb *int64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb"`
	// +optional
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type"`
	// +optional
	NumLocalSsds *int64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigWorkerConfigManagedGroupConfig struct {
	// +optional
	InstanceGroupManagerName *string `json:"instanceGroupManagerName,omitempty" tf:"instance_group_manager_name"`
	// +optional
	InstanceTemplateName *string `json:"instanceTemplateName,omitempty" tf:"instance_template_name"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfigWorkerConfig struct {
	// +optional
	Accelerators []WorkflowTemplateSpecPlacementManagedClusterConfigWorkerConfigAccelerators `json:"accelerators,omitempty" tf:"accelerators"`
	// +optional
	DiskConfig *WorkflowTemplateSpecPlacementManagedClusterConfigWorkerConfigDiskConfig `json:"diskConfig,omitempty" tf:"disk_config"`
	// +optional
	Image *string `json:"image,omitempty" tf:"image"`
	// +optional
	InstanceNames []string `json:"instanceNames,omitempty" tf:"instance_names"`
	// +optional
	IsPreemptible *bool `json:"isPreemptible,omitempty" tf:"is_preemptible"`
	// +optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type"`
	// +optional
	ManagedGroupConfig []WorkflowTemplateSpecPlacementManagedClusterConfigWorkerConfigManagedGroupConfig `json:"managedGroupConfig,omitempty" tf:"managed_group_config"`
	// +optional
	MinCPUPlatform *string `json:"minCPUPlatform,omitempty" tf:"min_cpu_platform"`
	// +optional
	NumInstances *int64 `json:"numInstances,omitempty" tf:"num_instances"`
	// +optional
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility"`
}

type WorkflowTemplateSpecPlacementManagedClusterConfig struct {
	// +optional
	AutoscalingConfig *WorkflowTemplateSpecPlacementManagedClusterConfigAutoscalingConfig `json:"autoscalingConfig,omitempty" tf:"autoscaling_config"`
	// +optional
	EncryptionConfig *WorkflowTemplateSpecPlacementManagedClusterConfigEncryptionConfig `json:"encryptionConfig,omitempty" tf:"encryption_config"`
	// +optional
	EndpointConfig *WorkflowTemplateSpecPlacementManagedClusterConfigEndpointConfig `json:"endpointConfig,omitempty" tf:"endpoint_config"`
	// +optional
	GceClusterConfig *WorkflowTemplateSpecPlacementManagedClusterConfigGceClusterConfig `json:"gceClusterConfig,omitempty" tf:"gce_cluster_config"`
	// +optional
	InitializationActions []WorkflowTemplateSpecPlacementManagedClusterConfigInitializationActions `json:"initializationActions,omitempty" tf:"initialization_actions"`
	// +optional
	LifecycleConfig *WorkflowTemplateSpecPlacementManagedClusterConfigLifecycleConfig `json:"lifecycleConfig,omitempty" tf:"lifecycle_config"`
	// +optional
	MasterConfig *WorkflowTemplateSpecPlacementManagedClusterConfigMasterConfig `json:"masterConfig,omitempty" tf:"master_config"`
	// +optional
	SecondaryWorkerConfig *WorkflowTemplateSpecPlacementManagedClusterConfigSecondaryWorkerConfig `json:"secondaryWorkerConfig,omitempty" tf:"secondary_worker_config"`
	// +optional
	SecurityConfig *WorkflowTemplateSpecPlacementManagedClusterConfigSecurityConfig `json:"securityConfig,omitempty" tf:"security_config"`
	// +optional
	SoftwareConfig *WorkflowTemplateSpecPlacementManagedClusterConfigSoftwareConfig `json:"softwareConfig,omitempty" tf:"software_config"`
	// +optional
	StagingBucket *string `json:"stagingBucket,omitempty" tf:"staging_bucket"`
	// +optional
	TempBucket *string `json:"tempBucket,omitempty" tf:"temp_bucket"`
	// +optional
	WorkerConfig *WorkflowTemplateSpecPlacementManagedClusterConfigWorkerConfig `json:"workerConfig,omitempty" tf:"worker_config"`
}

type WorkflowTemplateSpecPlacementManagedCluster struct {
	ClusterName *string                                            `json:"clusterName" tf:"cluster_name"`
	Config      *WorkflowTemplateSpecPlacementManagedClusterConfig `json:"config" tf:"config"`
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
}

type WorkflowTemplateSpecPlacement struct {
	// +optional
	ClusterSelector *WorkflowTemplateSpecPlacementClusterSelector `json:"clusterSelector,omitempty" tf:"cluster_selector"`
	// +optional
	ManagedCluster *WorkflowTemplateSpecPlacementManagedCluster `json:"managedCluster,omitempty" tf:"managed_cluster"`
}

type WorkflowTemplateSpec struct {
	State *WorkflowTemplateSpecResource `json:"state,omitempty" tf:"-"`

	Resource WorkflowTemplateSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type WorkflowTemplateSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CreateTime *string                    `json:"createTime,omitempty" tf:"create_time"`
	Jobs       []WorkflowTemplateSpecJobs `json:"jobs" tf:"jobs"`
	// +optional
	Labels   *map[string]string `json:"labels,omitempty" tf:"labels"`
	Location *string            `json:"location" tf:"location"`
	Name     *string            `json:"name" tf:"name"`
	// +optional
	Parameters []WorkflowTemplateSpecParameters `json:"parameters,omitempty" tf:"parameters"`
	Placement  *WorkflowTemplateSpecPlacement   `json:"placement" tf:"placement"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// +optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time"`
	// +optional
	Version *int64 `json:"version,omitempty" tf:"version"`
}

type WorkflowTemplateStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// WorkflowTemplateList is a list of WorkflowTemplates
type WorkflowTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of WorkflowTemplate CRD objects
	Items []WorkflowTemplate `json:"items,omitempty"`
}
