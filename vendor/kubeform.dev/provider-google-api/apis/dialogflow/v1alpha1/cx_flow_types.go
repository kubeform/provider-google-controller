/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CxFlow struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CxFlowSpec   `json:"spec,omitempty"`
	Status            CxFlowStatus `json:"status,omitempty"`
}

type CxFlowSpecEventHandlersTriggerFulfillmentMessagesText struct {
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	// +optional
	AllowPlaybackInterruption *bool `json:"allowPlaybackInterruption,omitempty" tf:"allow_playback_interruption"`
	// A collection of text responses.
	// +optional
	Text []string `json:"text,omitempty" tf:"text"`
}

type CxFlowSpecEventHandlersTriggerFulfillmentMessages struct {
	// The text response message.
	// +optional
	Text *CxFlowSpecEventHandlersTriggerFulfillmentMessagesText `json:"text,omitempty" tf:"text"`
}

type CxFlowSpecEventHandlersTriggerFulfillment struct {
	// The list of rich message responses to present to the user.
	// +optional
	Messages []CxFlowSpecEventHandlersTriggerFulfillmentMessages `json:"messages,omitempty" tf:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	// +optional
	ReturnPartialResponses *bool `json:"returnPartialResponses,omitempty" tf:"return_partial_responses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	// +optional
	Tag *string `json:"tag,omitempty" tf:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	// +optional
	Webhook *string `json:"webhook,omitempty" tf:"webhook"`
}

type CxFlowSpecEventHandlers struct {
	// The name of the event to handle.
	// +optional
	Event *string `json:"event,omitempty" tf:"event"`
	// The unique identifier of this event handler.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	// +optional
	TargetFlow *string `json:"targetFlow,omitempty" tf:"target_flow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	// +optional
	TargetPage *string `json:"targetPage,omitempty" tf:"target_page"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// +optional
	TriggerFulfillment *CxFlowSpecEventHandlersTriggerFulfillment `json:"triggerFulfillment,omitempty" tf:"trigger_fulfillment"`
}

type CxFlowSpecNluSettings struct {
	// To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold.
	// If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
	// +optional
	ClassificationThreshold *float64 `json:"classificationThreshold,omitempty" tf:"classification_threshold"`
	// Indicates NLU model training mode.
	// * MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.
	// * MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train. Possible values: ["MODEL_TRAINING_MODE_AUTOMATIC", "MODEL_TRAINING_MODE_MANUAL"]
	// +optional
	ModelTrainingMode *string `json:"modelTrainingMode,omitempty" tf:"model_training_mode"`
	// Indicates the type of NLU model.
	// * MODEL_TYPE_STANDARD: Use standard NLU model.
	// * MODEL_TYPE_ADVANCED: Use advanced NLU model. Possible values: ["MODEL_TYPE_STANDARD", "MODEL_TYPE_ADVANCED"]
	// +optional
	ModelType *string `json:"modelType,omitempty" tf:"model_type"`
}

type CxFlowSpecTransitionRoutesTriggerFulfillmentMessagesText struct {
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	// +optional
	AllowPlaybackInterruption *bool `json:"allowPlaybackInterruption,omitempty" tf:"allow_playback_interruption"`
	// A collection of text responses.
	// +optional
	Text []string `json:"text,omitempty" tf:"text"`
}

type CxFlowSpecTransitionRoutesTriggerFulfillmentMessages struct {
	// The text response message.
	// +optional
	Text *CxFlowSpecTransitionRoutesTriggerFulfillmentMessagesText `json:"text,omitempty" tf:"text"`
}

type CxFlowSpecTransitionRoutesTriggerFulfillment struct {
	// The list of rich message responses to present to the user.
	// +optional
	Messages []CxFlowSpecTransitionRoutesTriggerFulfillmentMessages `json:"messages,omitempty" tf:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	// +optional
	ReturnPartialResponses *bool `json:"returnPartialResponses,omitempty" tf:"return_partial_responses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	// +optional
	Tag *string `json:"tag,omitempty" tf:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	// +optional
	Webhook *string `json:"webhook,omitempty" tf:"webhook"`
}

type CxFlowSpecTransitionRoutes struct {
	// The condition to evaluate against form parameters or session parameters.
	// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	// +optional
	Condition *string `json:"condition,omitempty" tf:"condition"`
	// The unique identifier of an Intent.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	// +optional
	Intent *string `json:"intent,omitempty" tf:"intent"`
	// The unique identifier of this transition route.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	// +optional
	TargetFlow *string `json:"targetFlow,omitempty" tf:"target_flow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	// +optional
	TargetPage *string `json:"targetPage,omitempty" tf:"target_page"`
	// The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.
	// +optional
	TriggerFulfillment *CxFlowSpecTransitionRoutesTriggerFulfillment `json:"triggerFulfillment,omitempty" tf:"trigger_fulfillment"`
}

type CxFlowSpec struct {
	State *CxFlowSpecResource `json:"state,omitempty" tf:"-"`

	Resource CxFlowSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type CxFlowSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// The human-readable name of the flow.
	DisplayName *string `json:"displayName" tf:"display_name"`
	// A flow's event handlers serve two purposes:
	// They are responsible for handling events (e.g. no match, webhook errors) in the flow.
	// They are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.
	// Unlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
	// +optional
	EventHandlers []CxFlowSpecEventHandlers `json:"eventHandlers,omitempty" tf:"event_handlers"`
	// The language of the following fields in flow:
	// Flow.event_handlers.trigger_fulfillment.messages
	// Flow.event_handlers.trigger_fulfillment.conditional_cases
	// Flow.transition_routes.trigger_fulfillment.messages
	// Flow.transition_routes.trigger_fulfillment.conditional_cases
	// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
	// +optional
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code"`
	// The unique identifier of the flow.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// NLU related settings of the flow.
	// +optional
	NluSettings *CxFlowSpecNluSettings `json:"nluSettings,omitempty" tf:"nlu_settings"`
	// The agent to create a flow for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	// +optional
	Parent *string `json:"parent,omitempty" tf:"parent"`
	// A flow's transition route group serve two purposes:
	// They are responsible for matching the user's first utterances in the flow.
	// They are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.
	// Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
	// +optional
	TransitionRouteGroups []string `json:"transitionRouteGroups,omitempty" tf:"transition_route_groups"`
	// A flow's transition routes serve two purposes:
	// They are responsible for matching the user's first utterances in the flow.
	// They are inherited by every page's [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.
	//
	// TransitionRoutes are evalauted in the following order:
	//   TransitionRoutes with intent specified.
	//   TransitionRoutes with only condition specified.
	//   TransitionRoutes with intent specified are inherited by pages in the flow.
	// +optional
	TransitionRoutes []CxFlowSpecTransitionRoutes `json:"transitionRoutes,omitempty" tf:"transition_routes"`
}

type CxFlowStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CxFlowList is a list of CxFlows
type CxFlowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of CxFlow CRD objects
	Items []CxFlow `json:"items,omitempty"`
}
