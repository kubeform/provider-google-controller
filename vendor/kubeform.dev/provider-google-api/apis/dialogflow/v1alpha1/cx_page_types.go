/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CxPage struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CxPageSpec   `json:"spec,omitempty"`
	Status            CxPageStatus `json:"status,omitempty"`
}

type CxPageSpecEntryFulfillmentMessagesText struct {
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	// +optional
	AllowPlaybackInterruption *bool `json:"allowPlaybackInterruption,omitempty" tf:"allow_playback_interruption"`
	// A collection of text responses.
	// +optional
	Text []string `json:"text,omitempty" tf:"text"`
}

type CxPageSpecEntryFulfillmentMessages struct {
	// The text response message.
	// +optional
	Text *CxPageSpecEntryFulfillmentMessagesText `json:"text,omitempty" tf:"text"`
}

type CxPageSpecEntryFulfillment struct {
	// The list of rich message responses to present to the user.
	// +optional
	Messages []CxPageSpecEntryFulfillmentMessages `json:"messages,omitempty" tf:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	// +optional
	ReturnPartialResponses *bool `json:"returnPartialResponses,omitempty" tf:"return_partial_responses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	// +optional
	Tag *string `json:"tag,omitempty" tf:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	// +optional
	Webhook *string `json:"webhook,omitempty" tf:"webhook"`
}

type CxPageSpecEventHandlersTriggerFulfillmentMessagesText struct {
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	// +optional
	AllowPlaybackInterruption *bool `json:"allowPlaybackInterruption,omitempty" tf:"allow_playback_interruption"`
	// A collection of text responses.
	// +optional
	Text []string `json:"text,omitempty" tf:"text"`
}

type CxPageSpecEventHandlersTriggerFulfillmentMessages struct {
	// The text response message.
	// +optional
	Text *CxPageSpecEventHandlersTriggerFulfillmentMessagesText `json:"text,omitempty" tf:"text"`
}

type CxPageSpecEventHandlersTriggerFulfillment struct {
	// The list of rich message responses to present to the user.
	// +optional
	Messages []CxPageSpecEventHandlersTriggerFulfillmentMessages `json:"messages,omitempty" tf:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	// +optional
	ReturnPartialResponses *bool `json:"returnPartialResponses,omitempty" tf:"return_partial_responses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	// +optional
	Tag *string `json:"tag,omitempty" tf:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	// +optional
	Webhook *string `json:"webhook,omitempty" tf:"webhook"`
}

type CxPageSpecEventHandlers struct {
	// The name of the event to handle.
	// +optional
	Event *string `json:"event,omitempty" tf:"event"`
	// The unique identifier of this event handler.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	// +optional
	TargetFlow *string `json:"targetFlow,omitempty" tf:"target_flow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	// +optional
	TargetPage *string `json:"targetPage,omitempty" tf:"target_page"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// +optional
	TriggerFulfillment *CxPageSpecEventHandlersTriggerFulfillment `json:"triggerFulfillment,omitempty" tf:"trigger_fulfillment"`
}

type CxPageSpecFormParametersFillBehaviorInitialPromptFulfillmentMessagesText struct {
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	// +optional
	AllowPlaybackInterruption *bool `json:"allowPlaybackInterruption,omitempty" tf:"allow_playback_interruption"`
	// A collection of text responses.
	// +optional
	Text []string `json:"text,omitempty" tf:"text"`
}

type CxPageSpecFormParametersFillBehaviorInitialPromptFulfillmentMessages struct {
	// The text response message.
	// +optional
	Text *CxPageSpecFormParametersFillBehaviorInitialPromptFulfillmentMessagesText `json:"text,omitempty" tf:"text"`
}

type CxPageSpecFormParametersFillBehaviorInitialPromptFulfillment struct {
	// The list of rich message responses to present to the user.
	// +optional
	Messages []CxPageSpecFormParametersFillBehaviorInitialPromptFulfillmentMessages `json:"messages,omitempty" tf:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	// +optional
	ReturnPartialResponses *bool `json:"returnPartialResponses,omitempty" tf:"return_partial_responses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	// +optional
	Tag *string `json:"tag,omitempty" tf:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	// +optional
	Webhook *string `json:"webhook,omitempty" tf:"webhook"`
}

type CxPageSpecFormParametersFillBehavior struct {
	// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
	// +optional
	InitialPromptFulfillment *CxPageSpecFormParametersFillBehaviorInitialPromptFulfillment `json:"initialPromptFulfillment,omitempty" tf:"initial_prompt_fulfillment"`
}

type CxPageSpecFormParameters struct {
	// The human-readable name of the parameter, unique within the form.
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// The entity type of the parameter.
	// Format: projects/-/locations/-/agents/-/entityTypes/<System Entity Type ID> for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/entityTypes/<Entity Type ID> for developer entity types.
	// +optional
	EntityType *string `json:"entityType,omitempty" tf:"entity_type"`
	// Defines fill behavior for the parameter.
	// +optional
	FillBehavior *CxPageSpecFormParametersFillBehavior `json:"fillBehavior,omitempty" tf:"fill_behavior"`
	// Indicates whether the parameter represents a list of values.
	// +optional
	IsList *bool `json:"isList,omitempty" tf:"is_list"`
	// Indicates whether the parameter content should be redacted in log.
	// If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
	// +optional
	Redact *bool `json:"redact,omitempty" tf:"redact"`
	// Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
	// Required parameters must be filled before form filling concludes.
	// +optional
	Required *bool `json:"required,omitempty" tf:"required"`
}

type CxPageSpecForm struct {
	// Parameters to collect from the user.
	// +optional
	Parameters []CxPageSpecFormParameters `json:"parameters,omitempty" tf:"parameters"`
}

type CxPageSpecTransitionRoutesTriggerFulfillmentMessagesText struct {
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	// +optional
	AllowPlaybackInterruption *bool `json:"allowPlaybackInterruption,omitempty" tf:"allow_playback_interruption"`
	// A collection of text responses.
	// +optional
	Text []string `json:"text,omitempty" tf:"text"`
}

type CxPageSpecTransitionRoutesTriggerFulfillmentMessages struct {
	// The text response message.
	// +optional
	Text *CxPageSpecTransitionRoutesTriggerFulfillmentMessagesText `json:"text,omitempty" tf:"text"`
}

type CxPageSpecTransitionRoutesTriggerFulfillment struct {
	// The list of rich message responses to present to the user.
	// +optional
	Messages []CxPageSpecTransitionRoutesTriggerFulfillmentMessages `json:"messages,omitempty" tf:"messages"`
	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	// +optional
	ReturnPartialResponses *bool `json:"returnPartialResponses,omitempty" tf:"return_partial_responses"`
	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	// +optional
	Tag *string `json:"tag,omitempty" tf:"tag"`
	// The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.
	// +optional
	Webhook *string `json:"webhook,omitempty" tf:"webhook"`
}

type CxPageSpecTransitionRoutes struct {
	// The condition to evaluate against form parameters or session parameters.
	// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	// +optional
	Condition *string `json:"condition,omitempty" tf:"condition"`
	// The unique identifier of an Intent.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	// +optional
	Intent *string `json:"intent,omitempty" tf:"intent"`
	// The unique identifier of this transition route.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The target flow to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	// +optional
	TargetFlow *string `json:"targetFlow,omitempty" tf:"target_flow"`
	// The target page to transition to.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	// +optional
	TargetPage *string `json:"targetPage,omitempty" tf:"target_page"`
	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// +optional
	TriggerFulfillment *CxPageSpecTransitionRoutesTriggerFulfillment `json:"triggerFulfillment,omitempty" tf:"trigger_fulfillment"`
}

type CxPageSpec struct {
	State *CxPageSpecResource `json:"state,omitempty" tf:"-"`

	Resource CxPageSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type CxPageSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The human-readable name of the page, unique within the agent.
	DisplayName *string `json:"displayName" tf:"display_name"`
	// The fulfillment to call when the session is entering the page.
	// +optional
	EntryFulfillment *CxPageSpecEntryFulfillment `json:"entryFulfillment,omitempty" tf:"entry_fulfillment"`
	// Handlers associated with the page to handle events such as webhook errors, no match or no input.
	// +optional
	EventHandlers []CxPageSpecEventHandlers `json:"eventHandlers,omitempty" tf:"event_handlers"`
	// The form associated with the page, used for collecting parameters relevant to the page.
	// +optional
	Form *CxPageSpecForm `json:"form,omitempty" tf:"form"`
	// The language of the following fields in page:
	//
	// Page.entry_fulfillment.messages
	// Page.entry_fulfillment.conditional_cases
	// Page.event_handlers.trigger_fulfillment.messages
	// Page.event_handlers.trigger_fulfillment.conditional_cases
	// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
	// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
	// Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
	// Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
	// Page.transition_routes.trigger_fulfillment.messages
	// Page.transition_routes.trigger_fulfillment.conditional_cases
	// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
	// +optional
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code"`
	// The unique identifier of the page.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The flow to create a page for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
	// +optional
	Parent *string `json:"parent,omitempty" tf:"parent"`
	// Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
	// If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes.
	// If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
	// Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
	// +optional
	TransitionRouteGroups []string `json:"transitionRouteGroups,omitempty" tf:"transition_route_groups"`
	// A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
	// When we are in a certain page, the TransitionRoutes are evalauted in the following order:
	// TransitionRoutes defined in the page with intent specified.
	// TransitionRoutes defined in the transition route groups with intent specified.
	// TransitionRoutes defined in flow with intent specified.
	// TransitionRoutes defined in the transition route groups with intent specified.
	// TransitionRoutes defined in the page with only condition specified.
	// TransitionRoutes defined in the transition route groups with only condition specified.
	// +optional
	TransitionRoutes []CxPageSpecTransitionRoutes `json:"transitionRoutes,omitempty" tf:"transition_routes"`
}

type CxPageStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CxPageList is a list of CxPages
type CxPageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of CxPage CRD objects
	Items []CxPage `json:"items,omitempty"`
}
