/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type HubMembership struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HubMembershipSpec   `json:"spec,omitempty"`
	Status            HubMembershipStatus `json:"status,omitempty"`
}

type HubMembershipSpecAuthority struct {
	// A JSON Web Token (JWT) issuer URI. 'issuer' must start with 'https://' and // be a valid
	// with length <2000 characters. For example: 'https://container.googleapis.com/v1/projects/my-project/locations/us-west1/clusters/my-cluster' (must be 'locations' rather than 'zones'). If the cluster is provisioned with Terraform, this is '"https://container.googleapis.com/v1/${google_container_cluster.my-cluster.id}"'.
	Issuer *string `json:"issuer" tf:"issuer"`
}

type HubMembershipSpecEndpointGkeCluster struct {
	// Self-link of the GCP resource for the GKE cluster.
	// For example: '//container.googleapis.com/projects/my-project/zones/us-west1-a/clusters/my-cluster'.
	// It can be at the most 1000 characters in length. If the cluster is provisioned with Terraform,
	// this can be '"//container.googleapis.com/${google_container_cluster.my-cluster.id}"' or
	// 'google_container_cluster.my-cluster.id'.
	ResourceLink *string `json:"resourceLink" tf:"resource_link"`
}

type HubMembershipSpecEndpoint struct {
	// If this Membership is a Kubernetes API server hosted on GKE, this is a self link to its GCP resource.
	// +optional
	GkeCluster *HubMembershipSpecEndpointGkeCluster `json:"gkeCluster,omitempty" tf:"gke_cluster"`
}

type HubMembershipSpec struct {
	State *HubMembershipSpecResource `json:"state,omitempty" tf:"-"`

	Resource HubMembershipSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type HubMembershipSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Authority encodes how Google will recognize identities from this Membership.
	// See the workload identity documentation for more details:
	// https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
	// +optional
	Authority *HubMembershipSpecAuthority `json:"authority,omitempty" tf:"authority"`
	// If this Membership is a Kubernetes API server hosted on GKE, this is a self link to its GCP resource.
	// +optional
	Endpoint *HubMembershipSpecEndpoint `json:"endpoint,omitempty" tf:"endpoint"`
	// Labels to apply to this membership.
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// The client-provided identifier of the membership.
	MembershipID *string `json:"membershipID" tf:"membership_id"`
	// The unique identifier of the membership.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
}

type HubMembershipStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// HubMembershipList is a list of HubMemberships
type HubMembershipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of HubMembership CRD objects
	Items []HubMembership `json:"items,omitempty"`
}
