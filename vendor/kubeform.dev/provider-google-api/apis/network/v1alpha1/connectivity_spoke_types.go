/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ConnectivitySpoke struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectivitySpokeSpec   `json:"spec,omitempty"`
	Status            ConnectivitySpokeStatus `json:"status,omitempty"`
}

type ConnectivitySpokeSpecLinkedInterconnectAttachments struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	SiteToSiteDataTransfer *bool `json:"siteToSiteDataTransfer" tf:"site_to_site_data_transfer"`
	// The URIs of linked interconnect attachment resources
	Uris []string `json:"uris" tf:"uris"`
}

type ConnectivitySpokeSpecLinkedRouterApplianceInstancesInstances struct {
	// The IP address on the VM to use for peering.
	// +optional
	IpAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`
	// The URI of the virtual machine resource
	// +optional
	VirtualMachine *string `json:"virtualMachine,omitempty" tf:"virtual_machine"`
}

type ConnectivitySpokeSpecLinkedRouterApplianceInstances struct {
	// The list of router appliance instances
	Instances []ConnectivitySpokeSpecLinkedRouterApplianceInstancesInstances `json:"instances" tf:"instances"`
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	SiteToSiteDataTransfer *bool `json:"siteToSiteDataTransfer" tf:"site_to_site_data_transfer"`
}

type ConnectivitySpokeSpecLinkedVPNTunnels struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	SiteToSiteDataTransfer *bool `json:"siteToSiteDataTransfer" tf:"site_to_site_data_transfer"`
	// The URIs of linked VPN tunnel resources.
	Uris []string `json:"uris" tf:"uris"`
}

type ConnectivitySpokeSpec struct {
	State *ConnectivitySpokeSpecResource `json:"state,omitempty" tf:"-"`

	Resource ConnectivitySpokeSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ConnectivitySpokeSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Output only. The time the spoke was created.
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// An optional description of the spoke.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Immutable. The URI of the hub that this spoke is attached to.
	Hub *string `json:"hub" tf:"hub"`
	// Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
	// +optional
	LinkedInterconnectAttachments *ConnectivitySpokeSpecLinkedInterconnectAttachments `json:"linkedInterconnectAttachments,omitempty" tf:"linked_interconnect_attachments"`
	// The URIs of linked Router appliance resources
	// +optional
	LinkedRouterApplianceInstances *ConnectivitySpokeSpecLinkedRouterApplianceInstances `json:"linkedRouterApplianceInstances,omitempty" tf:"linked_router_appliance_instances"`
	// The URIs of linked VPN tunnel resources
	// +optional
	LinkedVPNTunnels *ConnectivitySpokeSpecLinkedVPNTunnels `json:"linkedVPNTunnels,omitempty" tf:"linked_vpn_tunnels"`
	// The location for the resource
	Location *string `json:"location" tf:"location"`
	// Immutable. The name of the spoke. Spoke names must be unique.
	Name *string `json:"name" tf:"name"`
	// The project for the resource
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Output only. The current lifecycle state of this spoke. Possible values: STATE_UNSPECIFIED, CREATING, ACTIVE, DELETING
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different unique_id.
	// +optional
	UniqueID *string `json:"uniqueID,omitempty" tf:"unique_id"`
	// Output only. The time the spoke was last updated.
	// +optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time"`
}

type ConnectivitySpokeStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ConnectivitySpokeList is a list of ConnectivitySpokes
type ConnectivitySpokeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ConnectivitySpoke CRD objects
	Items []ConnectivitySpoke `json:"items,omitempty"`
}
