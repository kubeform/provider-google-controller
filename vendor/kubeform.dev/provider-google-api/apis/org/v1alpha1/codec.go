/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpec{}).Type1()):               PolicyPolicySpecSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpecRulesCondition{}).Type1()): PolicyPolicySpecSpecRulesConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpecRulesValues{}).Type1()):    PolicyPolicySpecSpecRulesValuesCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpec{}).Type1()):               PolicyPolicySpecSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpecRulesCondition{}).Type1()): PolicyPolicySpecSpecRulesConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpecRulesValues{}).Type1()):    PolicyPolicySpecSpecRulesValuesCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type PolicyPolicySpecSpecCodec struct {
}

func (PolicyPolicySpecSpecCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicyPolicySpecSpec)(ptr) == nil
}

func (PolicyPolicySpecSpecCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicyPolicySpecSpec)(ptr)
	var objs []PolicyPolicySpecSpec
	if obj != nil {
		objs = []PolicyPolicySpecSpec{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpec{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicyPolicySpecSpecCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicyPolicySpecSpec)(ptr) = PolicyPolicySpecSpec{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicyPolicySpecSpec

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpec{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicyPolicySpecSpec)(ptr) = objs[0]
			} else {
				*(*PolicyPolicySpecSpec)(ptr) = PolicyPolicySpecSpec{}
			}
		} else {
			*(*PolicyPolicySpecSpec)(ptr) = PolicyPolicySpecSpec{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicyPolicySpecSpec

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpec{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicyPolicySpecSpec)(ptr) = obj
		} else {
			*(*PolicyPolicySpecSpec)(ptr) = PolicyPolicySpecSpec{}
		}
	default:
		iter.ReportError("decode PolicyPolicySpecSpec", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicyPolicySpecSpecRulesConditionCodec struct {
}

func (PolicyPolicySpecSpecRulesConditionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicyPolicySpecSpecRulesCondition)(ptr) == nil
}

func (PolicyPolicySpecSpecRulesConditionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicyPolicySpecSpecRulesCondition)(ptr)
	var objs []PolicyPolicySpecSpecRulesCondition
	if obj != nil {
		objs = []PolicyPolicySpecSpecRulesCondition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpecRulesCondition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicyPolicySpecSpecRulesConditionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicyPolicySpecSpecRulesCondition)(ptr) = PolicyPolicySpecSpecRulesCondition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicyPolicySpecSpecRulesCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpecRulesCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicyPolicySpecSpecRulesCondition)(ptr) = objs[0]
			} else {
				*(*PolicyPolicySpecSpecRulesCondition)(ptr) = PolicyPolicySpecSpecRulesCondition{}
			}
		} else {
			*(*PolicyPolicySpecSpecRulesCondition)(ptr) = PolicyPolicySpecSpecRulesCondition{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicyPolicySpecSpecRulesCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpecRulesCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicyPolicySpecSpecRulesCondition)(ptr) = obj
		} else {
			*(*PolicyPolicySpecSpecRulesCondition)(ptr) = PolicyPolicySpecSpecRulesCondition{}
		}
	default:
		iter.ReportError("decode PolicyPolicySpecSpecRulesCondition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicyPolicySpecSpecRulesValuesCodec struct {
}

func (PolicyPolicySpecSpecRulesValuesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicyPolicySpecSpecRulesValues)(ptr) == nil
}

func (PolicyPolicySpecSpecRulesValuesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicyPolicySpecSpecRulesValues)(ptr)
	var objs []PolicyPolicySpecSpecRulesValues
	if obj != nil {
		objs = []PolicyPolicySpecSpecRulesValues{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpecRulesValues{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicyPolicySpecSpecRulesValuesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicyPolicySpecSpecRulesValues)(ptr) = PolicyPolicySpecSpecRulesValues{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicyPolicySpecSpecRulesValues

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpecRulesValues{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicyPolicySpecSpecRulesValues)(ptr) = objs[0]
			} else {
				*(*PolicyPolicySpecSpecRulesValues)(ptr) = PolicyPolicySpecSpecRulesValues{}
			}
		} else {
			*(*PolicyPolicySpecSpecRulesValues)(ptr) = PolicyPolicySpecSpecRulesValues{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicyPolicySpecSpecRulesValues

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicyPolicySpecSpecRulesValues{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicyPolicySpecSpecRulesValues)(ptr) = obj
		} else {
			*(*PolicyPolicySpecSpecRulesValues)(ptr) = PolicyPolicySpecSpecRulesValues{}
		}
	default:
		iter.ReportError("decode PolicyPolicySpecSpecRulesValues", "unexpected JSON type")
	}
}
