/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CertificateAuthority struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateAuthoritySpec   `json:"spec,omitempty"`
	Status            CertificateAuthorityStatus `json:"status,omitempty"`
}

type CertificateAuthoritySpecAccessUrls struct {
	// The URL where this CertificateAuthority's CA certificate is published. This will only be
	// set for CAs that have been activated.
	// +optional
	CaCertificateAccessURL *string `json:"caCertificateAccessURL,omitempty" tf:"ca_certificate_access_url"`
	// The URL where this CertificateAuthority's CRLs are published. This will only be set for
	// CAs that have been activated.
	// +optional
	CrlAccessURL *string `json:"crlAccessURL,omitempty" tf:"crl_access_url"`
}

type CertificateAuthoritySpecConfigSubjectConfigSubject struct {
	// The common name of the distinguished name.
	CommonName *string `json:"commonName" tf:"common_name"`
	// The country code of the subject.
	// +optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code"`
	// The locality or city of the subject.
	// +optional
	Locality *string `json:"locality,omitempty" tf:"locality"`
	// The organization of the subject.
	Organization *string `json:"organization" tf:"organization"`
	// The organizational unit of the subject.
	// +optional
	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit"`
	// The postal code of the subject.
	// +optional
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code"`
	// The province, territory, or regional state of the subject.
	// +optional
	Province *string `json:"province,omitempty" tf:"province"`
	// The street address of the subject.
	// +optional
	StreetAddress *string `json:"streetAddress,omitempty" tf:"street_address"`
}

type CertificateAuthoritySpecConfigSubjectConfigSubjectAltName struct {
	// Contains only valid, fully-qualified host names.
	// +optional
	DnsNames []string `json:"dnsNames,omitempty" tf:"dns_names"`
	// Contains only valid RFC 2822 E-mail addresses.
	// +optional
	EmailAddresses []string `json:"emailAddresses,omitempty" tf:"email_addresses"`
	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	// +optional
	IpAddresses []string `json:"ipAddresses,omitempty" tf:"ip_addresses"`
	// Contains only valid RFC 3986 URIs.
	// +optional
	Uris []string `json:"uris,omitempty" tf:"uris"`
}

type CertificateAuthoritySpecConfigSubjectConfig struct {
	// Contains distinguished name fields such as the location and organization.
	Subject *CertificateAuthoritySpecConfigSubjectConfigSubject `json:"subject" tf:"subject"`
	// The subject alternative name fields.
	// +optional
	SubjectAltName *CertificateAuthoritySpecConfigSubjectConfigSubjectAltName `json:"subjectAltName,omitempty" tf:"subject_alt_name"`
}

type CertificateAuthoritySpecConfigX509ConfigAdditionalExtensionsObjectID struct {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	ObjectIDPath []int64 `json:"objectIDPath" tf:"object_id_path"`
}

type CertificateAuthoritySpecConfigX509ConfigAdditionalExtensions struct {
	// Indicates whether or not this extension is critical (i.e., if the client does not know how to
	// handle this extension, the client should consider this to be an error).
	Critical *bool `json:"critical" tf:"critical"`
	// Describes values that are relevant in a CA certificate.
	ObjectID *CertificateAuthoritySpecConfigX509ConfigAdditionalExtensionsObjectID `json:"objectID" tf:"object_id"`
	// The value of this X.509 extension. A base64-encoded string.
	Value *string `json:"value" tf:"value"`
}

type CertificateAuthoritySpecConfigX509ConfigCaOptions struct {
	// Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing,
	// the extension will be omitted from the CA certificate.
	IsCa *bool `json:"isCa" tf:"is_ca"`
	// Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of
	// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this
	// value is missing, the max path length will be omitted from the CA certificate.
	// +optional
	MaxIssuerPathLength *int64 `json:"maxIssuerPathLength,omitempty" tf:"max_issuer_path_length"`
}

type CertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage struct {
	// The key may be used to sign certificates.
	// +optional
	CertSign *bool `json:"certSign,omitempty" tf:"cert_sign"`
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	// +optional
	ContentCommitment *bool `json:"contentCommitment,omitempty" tf:"content_commitment"`
	// The key may be used sign certificate revocation lists.
	// +optional
	CrlSign *bool `json:"crlSign,omitempty" tf:"crl_sign"`
	// The key may be used to encipher data.
	// +optional
	DataEncipherment *bool `json:"dataEncipherment,omitempty" tf:"data_encipherment"`
	// The key may be used to decipher only.
	// +optional
	DecipherOnly *bool `json:"decipherOnly,omitempty" tf:"decipher_only"`
	// The key may be used for digital signatures.
	// +optional
	DigitalSignature *bool `json:"digitalSignature,omitempty" tf:"digital_signature"`
	// The key may be used to encipher only.
	// +optional
	EncipherOnly *bool `json:"encipherOnly,omitempty" tf:"encipher_only"`
	// The key may be used in a key agreement protocol.
	// +optional
	KeyAgreement *bool `json:"keyAgreement,omitempty" tf:"key_agreement"`
	// The key may be used to encipher other keys.
	// +optional
	KeyEncipherment *bool `json:"keyEncipherment,omitempty" tf:"key_encipherment"`
}

type CertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage struct {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	// +optional
	ClientAuth *bool `json:"clientAuth,omitempty" tf:"client_auth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	// +optional
	CodeSigning *bool `json:"codeSigning,omitempty" tf:"code_signing"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	// +optional
	EmailProtection *bool `json:"emailProtection,omitempty" tf:"email_protection"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	// +optional
	OcspSigning *bool `json:"ocspSigning,omitempty" tf:"ocsp_signing"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	// +optional
	ServerAuth *bool `json:"serverAuth,omitempty" tf:"server_auth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	// +optional
	TimeStamping *bool `json:"timeStamping,omitempty" tf:"time_stamping"`
}

type CertificateAuthoritySpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages struct {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	ObjectIDPath []int64 `json:"objectIDPath" tf:"object_id_path"`
}

type CertificateAuthoritySpecConfigX509ConfigKeyUsage struct {
	// Describes high-level ways in which a key may be used.
	BaseKeyUsage *CertificateAuthoritySpecConfigX509ConfigKeyUsageBaseKeyUsage `json:"baseKeyUsage" tf:"base_key_usage"`
	// Describes high-level ways in which a key may be used.
	ExtendedKeyUsage *CertificateAuthoritySpecConfigX509ConfigKeyUsageExtendedKeyUsage `json:"extendedKeyUsage" tf:"extended_key_usage"`
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +optional
	UnknownExtendedKeyUsages []CertificateAuthoritySpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages `json:"unknownExtendedKeyUsages,omitempty" tf:"unknown_extended_key_usages"`
}

type CertificateAuthoritySpecConfigX509ConfigPolicyIDS struct {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	ObjectIDPath []int64 `json:"objectIDPath" tf:"object_id_path"`
}

type CertificateAuthoritySpecConfigX509Config struct {
	// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
	// +optional
	AdditionalExtensions []CertificateAuthoritySpecConfigX509ConfigAdditionalExtensions `json:"additionalExtensions,omitempty" tf:"additional_extensions"`
	// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
	// "Authority Information Access" extension in the certificate.
	// +optional
	AiaOcspServers []string `json:"aiaOcspServers,omitempty" tf:"aia_ocsp_servers"`
	// Describes values that are relevant in a CA certificate.
	CaOptions *CertificateAuthoritySpecConfigX509ConfigCaOptions `json:"caOptions" tf:"ca_options"`
	// Indicates the intended use for keys that correspond to a certificate.
	KeyUsage *CertificateAuthoritySpecConfigX509ConfigKeyUsage `json:"keyUsage" tf:"key_usage"`
	// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	// +optional
	PolicyIDS []CertificateAuthoritySpecConfigX509ConfigPolicyIDS `json:"policyIDS,omitempty" tf:"policy_ids"`
}

type CertificateAuthoritySpecConfig struct {
	// Specifies some of the values in a certificate that are related to the subject.
	SubjectConfig *CertificateAuthoritySpecConfigSubjectConfig `json:"subjectConfig" tf:"subject_config"`
	// Describes how some of the technical X.509 fields in a certificate should be populated.
	X509Config *CertificateAuthoritySpecConfigX509Config `json:"x509Config" tf:"x509_config"`
}

type CertificateAuthoritySpecKeySpec struct {
	// The algorithm to use for creating a managed Cloud KMS key for a for a simplified
	// experience. All managed keys will be have their ProtectionLevel as HSM. Possible values: ["SIGN_HASH_ALGORITHM_UNSPECIFIED", "RSA_PSS_2048_SHA256", "RSA_PSS_3072_SHA256", "RSA_PSS_4096_SHA256", "RSA_PKCS1_2048_SHA256", "RSA_PKCS1_3072_SHA256", "RSA_PKCS1_4096_SHA256", "EC_P256_SHA256", "EC_P384_SHA384"]
	// +optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm"`
	// The resource name for an existing Cloud KMS CryptoKeyVersion in the format
	// 'projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*'.
	// +optional
	CloudKmsKeyVersion *string `json:"cloudKmsKeyVersion,omitempty" tf:"cloud_kms_key_version"`
}

type CertificateAuthoritySpec struct {
	State *CertificateAuthoritySpecResource `json:"state,omitempty" tf:"-"`

	Resource CertificateAuthoritySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type CertificateAuthoritySpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// URLs for accessing content published by this CA, such as the CA certificate and CRLs.
	// +optional
	AccessUrls []CertificateAuthoritySpecAccessUrls `json:"accessUrls,omitempty" tf:"access_urls"`
	// The user provided Resource ID for this Certificate Authority.
	CertificateAuthorityID *string `json:"certificateAuthorityID" tf:"certificate_authority_id"`
	// The config used to create a self-signed X.509 certificate or CSR.
	Config *CertificateAuthoritySpecConfig `json:"config" tf:"config"`
	// The time at which this CertificateAuthority was created.
	//
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
	// such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
	// (such as 'gs://') or suffixes (such as '.googleapis.com'). For example, to use a bucket named
	// my-bucket, you would simply specify 'my-bucket'. If not specified, a managed bucket will be
	// created.
	// +optional
	GcsBucket *string `json:"gcsBucket,omitempty" tf:"gcs_bucket"`
	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs.
	// Use with care. Defaults to 'false'.
	// +optional
	IgnoreActiveCertificatesOnDeletion *bool `json:"ignoreActiveCertificatesOnDeletion,omitempty" tf:"ignore_active_certificates_on_deletion"`
	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
	// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
	// certificate. Otherwise, it is used to sign a CSR.
	KeySpec *CertificateAuthoritySpecKeySpec `json:"keySpec" tf:"key_spec"`
	// Labels with user-defined metadata.
	//
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
	// "1.3kg", "count": "3" }.
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	// +optional
	Lifetime *string `json:"lifetime,omitempty" tf:"lifetime"`
	// Location of the CertificateAuthority. A full list of valid locations can be found by
	// running 'gcloud privateca locations list'.
	Location *string `json:"location" tf:"location"`
	// The resource name for this CertificateAuthority in the format
	// projects/*/locations/*/certificateAuthorities/*.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// This CertificateAuthority's certificate chain, including the current
	// CertificateAuthority's certificate. Ordered such that the root issuer is the final
	// element (consistent with RFC 5246). For a self-signed CA, this will only list the current
	// CertificateAuthority's certificate.
	// +optional
	PemCaCertificates []string `json:"pemCaCertificates,omitempty" tf:"pem_ca_certificates"`
	// The name of the CaPool this Certificate Authority belongs to.
	Pool *string `json:"pool" tf:"pool"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The State for this CertificateAuthority.
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// The Type of this CertificateAuthority.
	//
	// ~> **Note:** For 'SUBORDINATE' Certificate Authorities, they need to
	// be manually activated (via Cloud Console of 'gcloud') before they can
	// issue certificates. Default value: "SELF_SIGNED" Possible values: ["SELF_SIGNED", "SUBORDINATE"]
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// The time at which this CertificateAuthority was updated.
	//
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time"`
}

type CertificateAuthorityStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CertificateAuthorityList is a list of CertificateAuthoritys
type CertificateAuthorityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of CertificateAuthority CRD objects
	Items []CertificateAuthority `json:"items,omitempty"`
}
