/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CertificateTemplate struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateTemplateSpec   `json:"spec,omitempty"`
	Status            CertificateTemplateStatus `json:"status,omitempty"`
}

type CertificateTemplateSpecIdentityConstraintsCelExpression struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	// +optional
	Expression *string `json:"expression,omitempty" tf:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	// +optional
	Title *string `json:"title,omitempty" tf:"title"`
}

type CertificateTemplateSpecIdentityConstraints struct {
	// Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
	AllowSubjectAltNamesPassthrough *bool `json:"allowSubjectAltNamesPassthrough" tf:"allow_subject_alt_names_passthrough"`
	// Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
	AllowSubjectPassthrough *bool `json:"allowSubjectPassthrough" tf:"allow_subject_passthrough"`
	// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
	// +optional
	CelExpression *CertificateTemplateSpecIdentityConstraintsCelExpression `json:"celExpression,omitempty" tf:"cel_expression"`
}

type CertificateTemplateSpecPassthroughExtensionsAdditionalExtensions struct {
	// Required. The parts of an OID path. The most significant parts of the path come first.
	ObjectIDPath []int64 `json:"objectIDPath" tf:"object_id_path"`
}

type CertificateTemplateSpecPassthroughExtensions struct {
	// Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
	// +optional
	AdditionalExtensions []CertificateTemplateSpecPassthroughExtensionsAdditionalExtensions `json:"additionalExtensions,omitempty" tf:"additional_extensions"`
	// Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
	// +optional
	KnownExtensions []string `json:"knownExtensions,omitempty" tf:"known_extensions"`
}

type CertificateTemplateSpecPredefinedValuesAdditionalExtensionsObjectID struct {
	// Required. The parts of an OID path. The most significant parts of the path come first.
	ObjectIDPath []int64 `json:"objectIDPath" tf:"object_id_path"`
}

type CertificateTemplateSpecPredefinedValuesAdditionalExtensions struct {
	// Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
	// +optional
	Critical *bool `json:"critical,omitempty" tf:"critical"`
	// Required. The OID for this X.509 extension.
	ObjectID *CertificateTemplateSpecPredefinedValuesAdditionalExtensionsObjectID `json:"objectID" tf:"object_id"`
	// Required. The value of this X.509 extension.
	Value *string `json:"value" tf:"value"`
}

type CertificateTemplateSpecPredefinedValuesCaOptions struct {
	// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
	// +optional
	IsCa *bool `json:"isCa,omitempty" tf:"is_ca"`
	// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
	// +optional
	MaxIssuerPathLength *int64 `json:"maxIssuerPathLength,omitempty" tf:"max_issuer_path_length"`
}

type CertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage struct {
	// The key may be used to sign certificates.
	// +optional
	CertSign *bool `json:"certSign,omitempty" tf:"cert_sign"`
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	// +optional
	ContentCommitment *bool `json:"contentCommitment,omitempty" tf:"content_commitment"`
	// The key may be used sign certificate revocation lists.
	// +optional
	CrlSign *bool `json:"crlSign,omitempty" tf:"crl_sign"`
	// The key may be used to encipher data.
	// +optional
	DataEncipherment *bool `json:"dataEncipherment,omitempty" tf:"data_encipherment"`
	// The key may be used to decipher only.
	// +optional
	DecipherOnly *bool `json:"decipherOnly,omitempty" tf:"decipher_only"`
	// The key may be used for digital signatures.
	// +optional
	DigitalSignature *bool `json:"digitalSignature,omitempty" tf:"digital_signature"`
	// The key may be used to encipher only.
	// +optional
	EncipherOnly *bool `json:"encipherOnly,omitempty" tf:"encipher_only"`
	// The key may be used in a key agreement protocol.
	// +optional
	KeyAgreement *bool `json:"keyAgreement,omitempty" tf:"key_agreement"`
	// The key may be used to encipher other keys.
	// +optional
	KeyEncipherment *bool `json:"keyEncipherment,omitempty" tf:"key_encipherment"`
}

type CertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage struct {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	// +optional
	ClientAuth *bool `json:"clientAuth,omitempty" tf:"client_auth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	// +optional
	CodeSigning *bool `json:"codeSigning,omitempty" tf:"code_signing"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	// +optional
	EmailProtection *bool `json:"emailProtection,omitempty" tf:"email_protection"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	// +optional
	OcspSigning *bool `json:"ocspSigning,omitempty" tf:"ocsp_signing"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	// +optional
	ServerAuth *bool `json:"serverAuth,omitempty" tf:"server_auth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	// +optional
	TimeStamping *bool `json:"timeStamping,omitempty" tf:"time_stamping"`
}

type CertificateTemplateSpecPredefinedValuesKeyUsageUnknownExtendedKeyUsages struct {
	// Required. The parts of an OID path. The most significant parts of the path come first.
	ObjectIDPath []int64 `json:"objectIDPath" tf:"object_id_path"`
}

type CertificateTemplateSpecPredefinedValuesKeyUsage struct {
	// Describes high-level ways in which a key may be used.
	// +optional
	BaseKeyUsage *CertificateTemplateSpecPredefinedValuesKeyUsageBaseKeyUsage `json:"baseKeyUsage,omitempty" tf:"base_key_usage"`
	// Detailed scenarios in which a key may be used.
	// +optional
	ExtendedKeyUsage *CertificateTemplateSpecPredefinedValuesKeyUsageExtendedKeyUsage `json:"extendedKeyUsage,omitempty" tf:"extended_key_usage"`
	// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
	// +optional
	UnknownExtendedKeyUsages []CertificateTemplateSpecPredefinedValuesKeyUsageUnknownExtendedKeyUsages `json:"unknownExtendedKeyUsages,omitempty" tf:"unknown_extended_key_usages"`
}

type CertificateTemplateSpecPredefinedValuesPolicyIDS struct {
	// Required. The parts of an OID path. The most significant parts of the path come first.
	ObjectIDPath []int64 `json:"objectIDPath" tf:"object_id_path"`
}

type CertificateTemplateSpecPredefinedValues struct {
	// Optional. Describes custom X.509 extensions.
	// +optional
	AdditionalExtensions []CertificateTemplateSpecPredefinedValuesAdditionalExtensions `json:"additionalExtensions,omitempty" tf:"additional_extensions"`
	// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
	// +optional
	AiaOcspServers []string `json:"aiaOcspServers,omitempty" tf:"aia_ocsp_servers"`
	// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
	// +optional
	CaOptions *CertificateTemplateSpecPredefinedValuesCaOptions `json:"caOptions,omitempty" tf:"ca_options"`
	// Optional. Indicates the intended use for keys that correspond to a certificate.
	// +optional
	KeyUsage *CertificateTemplateSpecPredefinedValuesKeyUsage `json:"keyUsage,omitempty" tf:"key_usage"`
	// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	// +optional
	PolicyIDS []CertificateTemplateSpecPredefinedValuesPolicyIDS `json:"policyIDS,omitempty" tf:"policy_ids"`
}

type CertificateTemplateSpec struct {
	State *CertificateTemplateSpecResource `json:"state,omitempty" tf:"-"`

	Resource CertificateTemplateSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type CertificateTemplateSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Output only. The time at which this CertificateTemplate was created.
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// Optional. A human-readable description of scenarios this template is intended for.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
	// +optional
	IdentityConstraints *CertificateTemplateSpecIdentityConstraints `json:"identityConstraints,omitempty" tf:"identity_constraints"`
	// Optional. Labels with user-defined metadata.
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// The location for the resource
	Location *string `json:"location" tf:"location"`
	// The resource name for this CertificateTemplate in the format `projects/*/locations/*/certificateTemplates/*`.
	Name *string `json:"name" tf:"name"`
	// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
	// +optional
	PassthroughExtensions *CertificateTemplateSpecPassthroughExtensions `json:"passthroughExtensions,omitempty" tf:"passthrough_extensions"`
	// Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
	// +optional
	PredefinedValues *CertificateTemplateSpecPredefinedValues `json:"predefinedValues,omitempty" tf:"predefined_values"`
	// The project for the resource
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Output only. The time at which this CertificateTemplate was updated.
	// +optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time"`
}

type CertificateTemplateStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CertificateTemplateList is a list of CertificateTemplates
type CertificateTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of CertificateTemplate CRD objects
	Items []CertificateTemplate `json:"items,omitempty"`
}
