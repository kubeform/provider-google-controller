/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Certificate struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateSpec   `json:"spec,omitempty"`
	Status            CertificateStatus `json:"status,omitempty"`
}

type CertificateSpecCertificateDescriptionAuthorityKeyID struct {
	// Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
	// +optional
	KeyID *string `json:"keyID,omitempty" tf:"key_id"`
}

type CertificateSpecCertificateDescriptionCertFingerprint struct {
	// The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.
	// +optional
	Sha256Hash *string `json:"sha256Hash,omitempty" tf:"sha256_hash"`
}

type CertificateSpecCertificateDescriptionConfigValuesKeyUsageBaseKeyUsageKeyUsageOptions struct {
	// The key may be used to sign certificates.
	// +optional
	CertSign *bool `json:"certSign,omitempty" tf:"cert_sign"`
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	// +optional
	ContentCommitment *bool `json:"contentCommitment,omitempty" tf:"content_commitment"`
	// The key may be used sign certificate revocation lists.
	// +optional
	CrlSign *bool `json:"crlSign,omitempty" tf:"crl_sign"`
	// The key may be used to encipher data.
	// +optional
	DataEncipherment *bool `json:"dataEncipherment,omitempty" tf:"data_encipherment"`
	// The key may be used to decipher only.
	// +optional
	DecipherOnly *bool `json:"decipherOnly,omitempty" tf:"decipher_only"`
	// The key may be used for digital signatures.
	// +optional
	DigitalSignature *bool `json:"digitalSignature,omitempty" tf:"digital_signature"`
	// The key may be used to encipher only.
	// +optional
	EncipherOnly *bool `json:"encipherOnly,omitempty" tf:"encipher_only"`
	// The key may be used in a key agreement protocol.
	// +optional
	KeyAgreement *bool `json:"keyAgreement,omitempty" tf:"key_agreement"`
	// The key may be used to encipher other keys.
	// +optional
	KeyEncipherment *bool `json:"keyEncipherment,omitempty" tf:"key_encipherment"`
}

type CertificateSpecCertificateDescriptionConfigValuesKeyUsageBaseKeyUsage struct {
	// Describes high-level ways in which a key may be used.
	// +optional
	KeyUsageOptions []CertificateSpecCertificateDescriptionConfigValuesKeyUsageBaseKeyUsageKeyUsageOptions `json:"keyUsageOptions,omitempty" tf:"key_usage_options"`
}

type CertificateSpecCertificateDescriptionConfigValuesKeyUsageExtendedKeyUsage struct {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	// +optional
	ClientAuth *bool `json:"clientAuth,omitempty" tf:"client_auth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	// +optional
	CodeSigning *bool `json:"codeSigning,omitempty" tf:"code_signing"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	// +optional
	EmailProtection *bool `json:"emailProtection,omitempty" tf:"email_protection"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	// +optional
	OcspSigning *bool `json:"ocspSigning,omitempty" tf:"ocsp_signing"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	// +optional
	ServerAuth *bool `json:"serverAuth,omitempty" tf:"server_auth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	// +optional
	TimeStamping *bool `json:"timeStamping,omitempty" tf:"time_stamping"`
}

type CertificateSpecCertificateDescriptionConfigValuesKeyUsageUnknownExtendedKeyUsagesObectID struct {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +optional
	ObjectIDPath []int64 `json:"objectIDPath,omitempty" tf:"object_id_path"`
}

type CertificateSpecCertificateDescriptionConfigValuesKeyUsageUnknownExtendedKeyUsages struct {
	// Required. Describes how some of the technical fields in a certificate should be populated.
	// +optional
	ObectID []CertificateSpecCertificateDescriptionConfigValuesKeyUsageUnknownExtendedKeyUsagesObectID `json:"obectID,omitempty" tf:"obect_id"`
}

type CertificateSpecCertificateDescriptionConfigValuesKeyUsage struct {
	// Describes high-level ways in which a key may be used.
	// +optional
	BaseKeyUsage []CertificateSpecCertificateDescriptionConfigValuesKeyUsageBaseKeyUsage `json:"baseKeyUsage,omitempty" tf:"base_key_usage"`
	// Describes high-level ways in which a key may be used.
	// +optional
	ExtendedKeyUsage []CertificateSpecCertificateDescriptionConfigValuesKeyUsageExtendedKeyUsage `json:"extendedKeyUsage,omitempty" tf:"extended_key_usage"`
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +optional
	UnknownExtendedKeyUsages []CertificateSpecCertificateDescriptionConfigValuesKeyUsageUnknownExtendedKeyUsages `json:"unknownExtendedKeyUsages,omitempty" tf:"unknown_extended_key_usages"`
}

type CertificateSpecCertificateDescriptionConfigValues struct {
	// Indicates the intended use for keys that correspond to a certificate.
	// +optional
	KeyUsage []CertificateSpecCertificateDescriptionConfigValuesKeyUsage `json:"keyUsage,omitempty" tf:"key_usage"`
}

type CertificateSpecCertificateDescriptionPublicKey struct {
	// The format of the public key. Currently, only PEM format is supported.
	// +optional
	Format *string `json:"format,omitempty" tf:"format"`
	// Required. A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 SubjectPublicKeyInfo structure containing an algorithm identifier and a key. A base64-encoded string.
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
}

type CertificateSpecCertificateDescriptionSubjectDescriptionSubject struct {
	// The "common name" of the distinguished name.
	// +optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name"`
	// The country code of the subject.
	// +optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code"`
	// The locality or city of the subject.
	// +optional
	Locality *string `json:"locality,omitempty" tf:"locality"`
	// The organization of the subject.
	// +optional
	Organization *string `json:"organization,omitempty" tf:"organization"`
	// The organizationalUnit of the subject.
	// +optional
	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit"`
	// The postalCode or city of the subject.
	// +optional
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code"`
	// The province of the subject.
	// +optional
	Province *string `json:"province,omitempty" tf:"province"`
	// The streetAddress or city of the subject.
	// +optional
	StreetAddress *string `json:"streetAddress,omitempty" tf:"street_address"`
}

type CertificateSpecCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectID struct {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +optional
	ObjectIDPath []int64 `json:"objectIDPath,omitempty" tf:"object_id_path"`
}

type CertificateSpecCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSans struct {
	// Required. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
	// +optional
	Critical *bool `json:"critical,omitempty" tf:"critical"`
	// Describes how some of the technical fields in a certificate should be populated.
	// +optional
	ObectID []CertificateSpecCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectID `json:"obectID,omitempty" tf:"obect_id"`
	// The value of this X.509 extension.
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type CertificateSpecCertificateDescriptionSubjectDescriptionSubjectAltName struct {
	// Contains additional subject alternative name values.
	// +optional
	CustomSans []CertificateSpecCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSans `json:"customSans,omitempty" tf:"custom_sans"`
	// Contains only valid, fully-qualified host names.
	// +optional
	DnsNames []string `json:"dnsNames,omitempty" tf:"dns_names"`
	// Contains only valid RFC 2822 E-mail addresses.
	// +optional
	EmailAddresses []string `json:"emailAddresses,omitempty" tf:"email_addresses"`
	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	// +optional
	IpAddresses []string `json:"ipAddresses,omitempty" tf:"ip_addresses"`
	// Contains only valid RFC 3986 URIs.
	// +optional
	Uris []string `json:"uris,omitempty" tf:"uris"`
}

type CertificateSpecCertificateDescriptionSubjectDescription struct {
	// The serial number encoded in lowercase hexadecimal.
	// +optional
	HexSerialNumber *string `json:"hexSerialNumber,omitempty" tf:"hex_serial_number"`
	// For convenience, the actual lifetime of an issued certificate. Corresponds to 'notAfterTime' - 'notBeforeTime'.
	// +optional
	Lifetime *string `json:"lifetime,omitempty" tf:"lifetime"`
	// The time at which the certificate expires.
	// +optional
	NotAfterTime *string `json:"notAfterTime,omitempty" tf:"not_after_time"`
	// The time at which the certificate becomes valid.
	// +optional
	NotBeforeTime *string `json:"notBeforeTime,omitempty" tf:"not_before_time"`
	// Contains distinguished name fields such as the location and organization.
	// +optional
	Subject []CertificateSpecCertificateDescriptionSubjectDescriptionSubject `json:"subject,omitempty" tf:"subject"`
	// The subject alternative name fields.
	// +optional
	SubjectAltName []CertificateSpecCertificateDescriptionSubjectDescriptionSubjectAltName `json:"subjectAltName,omitempty" tf:"subject_alt_name"`
}

type CertificateSpecCertificateDescriptionSubjectKeyID struct {
	// Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
	// +optional
	KeyID *string `json:"keyID,omitempty" tf:"key_id"`
}

type CertificateSpecCertificateDescription struct {
	// Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access" extension in the certificate.
	// +optional
	AiaIssuingCertificateUrls []string `json:"aiaIssuingCertificateUrls,omitempty" tf:"aia_issuing_certificate_urls"`
	// Identifies the subjectKeyId of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
	// +optional
	AuthorityKeyID []CertificateSpecCertificateDescriptionAuthorityKeyID `json:"authorityKeyID,omitempty" tf:"authority_key_id"`
	// The hash of the x.509 certificate.
	// +optional
	CertFingerprint []CertificateSpecCertificateDescriptionCertFingerprint `json:"certFingerprint,omitempty" tf:"cert_fingerprint"`
	// Describes some of the technical fields in a certificate.
	// +optional
	ConfigValues []CertificateSpecCertificateDescriptionConfigValues `json:"configValues,omitempty" tf:"config_values"`
	// Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
	// +optional
	CrlDistributionPoints []string `json:"crlDistributionPoints,omitempty" tf:"crl_distribution_points"`
	// A PublicKey describes a public key.
	// +optional
	PublicKey []CertificateSpecCertificateDescriptionPublicKey `json:"publicKey,omitempty" tf:"public_key"`
	// Describes some of the values in a certificate that are related to the subject and lifetime.
	// +optional
	SubjectDescription []CertificateSpecCertificateDescriptionSubjectDescription `json:"subjectDescription,omitempty" tf:"subject_description"`
	// Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
	// +optional
	SubjectKeyID []CertificateSpecCertificateDescriptionSubjectKeyID `json:"subjectKeyID,omitempty" tf:"subject_key_id"`
}

type CertificateSpecConfigPublicKey struct {
	// The format of the public key. Currently, only PEM format is supported. Possible values: ["KEY_TYPE_UNSPECIFIED", "PEM"]
	Format *string `json:"format" tf:"format"`
	// Required. A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 SubjectPublicKeyInfo structure containing an algorithm identifier and a key. A base64-encoded string.
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
}

type CertificateSpecConfigSubjectConfigSubject struct {
	// The common name of the distinguished name.
	CommonName *string `json:"commonName" tf:"common_name"`
	// The country code of the subject.
	// +optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code"`
	// The locality or city of the subject.
	// +optional
	Locality *string `json:"locality,omitempty" tf:"locality"`
	// The organization of the subject.
	Organization *string `json:"organization" tf:"organization"`
	// The organizational unit of the subject.
	// +optional
	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit"`
	// The postal code of the subject.
	// +optional
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code"`
	// The province, territory, or regional state of the subject.
	// +optional
	Province *string `json:"province,omitempty" tf:"province"`
	// The street address of the subject.
	// +optional
	StreetAddress *string `json:"streetAddress,omitempty" tf:"street_address"`
}

type CertificateSpecConfigSubjectConfigSubjectAltName struct {
	// Contains only valid, fully-qualified host names.
	// +optional
	DnsNames []string `json:"dnsNames,omitempty" tf:"dns_names"`
	// Contains only valid RFC 2822 E-mail addresses.
	// +optional
	EmailAddresses []string `json:"emailAddresses,omitempty" tf:"email_addresses"`
	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	// +optional
	IpAddresses []string `json:"ipAddresses,omitempty" tf:"ip_addresses"`
	// Contains only valid RFC 3986 URIs.
	// +optional
	Uris []string `json:"uris,omitempty" tf:"uris"`
}

type CertificateSpecConfigSubjectConfig struct {
	// Contains distinguished name fields such as the location and organization.
	Subject *CertificateSpecConfigSubjectConfigSubject `json:"subject" tf:"subject"`
	// The subject alternative name fields.
	// +optional
	SubjectAltName *CertificateSpecConfigSubjectConfigSubjectAltName `json:"subjectAltName,omitempty" tf:"subject_alt_name"`
}

type CertificateSpecConfigX509ConfigAdditionalExtensionsObjectID struct {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	ObjectIDPath []int64 `json:"objectIDPath" tf:"object_id_path"`
}

type CertificateSpecConfigX509ConfigAdditionalExtensions struct {
	// Indicates whether or not this extension is critical (i.e., if the client does not know how to
	// handle this extension, the client should consider this to be an error).
	Critical *bool `json:"critical" tf:"critical"`
	// Describes values that are relevant in a CA certificate.
	ObjectID *CertificateSpecConfigX509ConfigAdditionalExtensionsObjectID `json:"objectID" tf:"object_id"`
	// The value of this X.509 extension. A base64-encoded string.
	Value *string `json:"value" tf:"value"`
}

type CertificateSpecConfigX509ConfigCaOptions struct {
	// When true, the "CA" in Basic Constraints extension will be set to true.
	// +optional
	IsCa *bool `json:"isCa,omitempty" tf:"is_ca"`
	// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
	// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
	// +optional
	MaxIssuerPathLength *int64 `json:"maxIssuerPathLength,omitempty" tf:"max_issuer_path_length"`
	// When true, the "CA" in Basic Constraints extension will be set to false.
	// If both 'is_ca' and 'non_ca' are unset, the extension will be omitted from the CA certificate.
	// +optional
	NonCa *bool `json:"nonCa,omitempty" tf:"non_ca"`
	// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
	// if both 'max_issuer_path_length' and 'zero_max_issuer_path_length' are unset,
	// the max path length will be omitted from the CA certificate.
	// +optional
	ZeroMaxIssuerPathLength *bool `json:"zeroMaxIssuerPathLength,omitempty" tf:"zero_max_issuer_path_length"`
}

type CertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage struct {
	// The key may be used to sign certificates.
	// +optional
	CertSign *bool `json:"certSign,omitempty" tf:"cert_sign"`
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	// +optional
	ContentCommitment *bool `json:"contentCommitment,omitempty" tf:"content_commitment"`
	// The key may be used sign certificate revocation lists.
	// +optional
	CrlSign *bool `json:"crlSign,omitempty" tf:"crl_sign"`
	// The key may be used to encipher data.
	// +optional
	DataEncipherment *bool `json:"dataEncipherment,omitempty" tf:"data_encipherment"`
	// The key may be used to decipher only.
	// +optional
	DecipherOnly *bool `json:"decipherOnly,omitempty" tf:"decipher_only"`
	// The key may be used for digital signatures.
	// +optional
	DigitalSignature *bool `json:"digitalSignature,omitempty" tf:"digital_signature"`
	// The key may be used to encipher only.
	// +optional
	EncipherOnly *bool `json:"encipherOnly,omitempty" tf:"encipher_only"`
	// The key may be used in a key agreement protocol.
	// +optional
	KeyAgreement *bool `json:"keyAgreement,omitempty" tf:"key_agreement"`
	// The key may be used to encipher other keys.
	// +optional
	KeyEncipherment *bool `json:"keyEncipherment,omitempty" tf:"key_encipherment"`
}

type CertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage struct {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	// +optional
	ClientAuth *bool `json:"clientAuth,omitempty" tf:"client_auth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	// +optional
	CodeSigning *bool `json:"codeSigning,omitempty" tf:"code_signing"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	// +optional
	EmailProtection *bool `json:"emailProtection,omitempty" tf:"email_protection"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	// +optional
	OcspSigning *bool `json:"ocspSigning,omitempty" tf:"ocsp_signing"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	// +optional
	ServerAuth *bool `json:"serverAuth,omitempty" tf:"server_auth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	// +optional
	TimeStamping *bool `json:"timeStamping,omitempty" tf:"time_stamping"`
}

type CertificateSpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages struct {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	ObjectIDPath []int64 `json:"objectIDPath" tf:"object_id_path"`
}

type CertificateSpecConfigX509ConfigKeyUsage struct {
	// Describes high-level ways in which a key may be used.
	BaseKeyUsage *CertificateSpecConfigX509ConfigKeyUsageBaseKeyUsage `json:"baseKeyUsage" tf:"base_key_usage"`
	// Describes high-level ways in which a key may be used.
	ExtendedKeyUsage *CertificateSpecConfigX509ConfigKeyUsageExtendedKeyUsage `json:"extendedKeyUsage" tf:"extended_key_usage"`
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +optional
	UnknownExtendedKeyUsages []CertificateSpecConfigX509ConfigKeyUsageUnknownExtendedKeyUsages `json:"unknownExtendedKeyUsages,omitempty" tf:"unknown_extended_key_usages"`
}

type CertificateSpecConfigX509ConfigPolicyIDS struct {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	ObjectIDPath []int64 `json:"objectIDPath" tf:"object_id_path"`
}

type CertificateSpecConfigX509Config struct {
	// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
	// +optional
	AdditionalExtensions []CertificateSpecConfigX509ConfigAdditionalExtensions `json:"additionalExtensions,omitempty" tf:"additional_extensions"`
	// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
	// "Authority Information Access" extension in the certificate.
	// +optional
	AiaOcspServers []string `json:"aiaOcspServers,omitempty" tf:"aia_ocsp_servers"`
	// Describes values that are relevant in a CA certificate.
	// +optional
	CaOptions *CertificateSpecConfigX509ConfigCaOptions `json:"caOptions,omitempty" tf:"ca_options"`
	// Indicates the intended use for keys that correspond to a certificate.
	KeyUsage *CertificateSpecConfigX509ConfigKeyUsage `json:"keyUsage" tf:"key_usage"`
	// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	// +optional
	PolicyIDS []CertificateSpecConfigX509ConfigPolicyIDS `json:"policyIDS,omitempty" tf:"policy_ids"`
}

type CertificateSpecConfig struct {
	// A PublicKey describes a public key.
	PublicKey *CertificateSpecConfigPublicKey `json:"publicKey" tf:"public_key"`
	// Specifies some of the values in a certificate that are related to the subject.
	SubjectConfig *CertificateSpecConfigSubjectConfig `json:"subjectConfig" tf:"subject_config"`
	// Describes how some of the technical X.509 fields in a certificate should be populated.
	X509Config *CertificateSpecConfigX509Config `json:"x509Config" tf:"x509_config"`
}

type CertificateSpecRevocationDetails struct {
	// Indicates why a Certificate was revoked.
	// +optional
	RevocationState *string `json:"revocationState,omitempty" tf:"revocation_state"`
	// The time at which this Certificate was revoked.
	// +optional
	RevocationTime *string `json:"revocationTime,omitempty" tf:"revocation_time"`
}

type CertificateSpec struct {
	State *CertificateSpecResource `json:"state,omitempty" tf:"-"`

	Resource CertificateSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type CertificateSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Certificate Authority name.
	// +optional
	CertificateAuthority *string `json:"certificateAuthority,omitempty" tf:"certificate_authority"`
	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if this field is present.
	// +optional
	CertificateDescription []CertificateSpecCertificateDescription `json:"certificateDescription,omitempty" tf:"certificate_description"`
	// The resource name for a CertificateTemplate used to issue this certificate,
	// in the format 'projects/*/locations/*/certificateTemplates/*'. If this is specified,
	// the caller must have the necessary permission to use this template. If this is
	// omitted, no template will be used. This template must be in the same location
	// as the Certificate.
	// +optional
	CertificateTemplate *string `json:"certificateTemplate,omitempty" tf:"certificate_template"`
	// The config used to create a self-signed X.509 certificate or CSR.
	// +optional
	Config *CertificateSpecConfig `json:"config,omitempty" tf:"config"`
	// The time that this resource was created on the server.
	// This is in RFC3339 text format.
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// Labels with user-defined metadata to apply to this resource.
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	// +optional
	Lifetime *string `json:"lifetime,omitempty" tf:"lifetime"`
	// Location of the Certificate. A full list of valid locations can be found by
	// running 'gcloud privateca locations list'.
	Location *string `json:"location" tf:"location"`
	// The name for this Certificate.
	Name *string `json:"name" tf:"name"`
	// Output only. The pem-encoded, signed X.509 certificate.
	// +optional
	PemCertificate *string `json:"pemCertificate,omitempty" tf:"pem_certificate"`
	// Required. Expected to be in leaf-to-root order according to RFC 5246.
	// +optional
	PemCertificates []string `json:"pemCertificates,omitempty" tf:"pem_certificates"`
	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	// +optional
	PemCsr *string `json:"pemCsr,omitempty" tf:"pem_csr"`
	// The name of the CaPool this Certificate belongs to.
	Pool *string `json:"pool" tf:"pool"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Output only. Details regarding the revocation of this Certificate. This Certificate is
	// considered revoked if and only if this field is present.
	// +optional
	RevocationDetails []CertificateSpecRevocationDetails `json:"revocationDetails,omitempty" tf:"revocation_details"`
	// Output only. The time at which this CertificateAuthority was updated.
	// This is in RFC3339 text format.
	// +optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time"`
}

type CertificateStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CertificateList is a list of Certificates
type CertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Certificate CRD objects
	Items []Certificate `json:"items,omitempty"`
}
