/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecAndroidSettings{}).Type1()): EnterpriseKeySpecAndroidSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecIosSettings{}).Type1()):     EnterpriseKeySpecIosSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecTestingOptions{}).Type1()):  EnterpriseKeySpecTestingOptionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecWebSettings{}).Type1()):     EnterpriseKeySpecWebSettingsCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecAndroidSettings{}).Type1()): EnterpriseKeySpecAndroidSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecIosSettings{}).Type1()):     EnterpriseKeySpecIosSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecTestingOptions{}).Type1()):  EnterpriseKeySpecTestingOptionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecWebSettings{}).Type1()):     EnterpriseKeySpecWebSettingsCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type EnterpriseKeySpecAndroidSettingsCodec struct {
}

func (EnterpriseKeySpecAndroidSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EnterpriseKeySpecAndroidSettings)(ptr) == nil
}

func (EnterpriseKeySpecAndroidSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EnterpriseKeySpecAndroidSettings)(ptr)
	var objs []EnterpriseKeySpecAndroidSettings
	if obj != nil {
		objs = []EnterpriseKeySpecAndroidSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecAndroidSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EnterpriseKeySpecAndroidSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EnterpriseKeySpecAndroidSettings)(ptr) = EnterpriseKeySpecAndroidSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EnterpriseKeySpecAndroidSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecAndroidSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EnterpriseKeySpecAndroidSettings)(ptr) = objs[0]
			} else {
				*(*EnterpriseKeySpecAndroidSettings)(ptr) = EnterpriseKeySpecAndroidSettings{}
			}
		} else {
			*(*EnterpriseKeySpecAndroidSettings)(ptr) = EnterpriseKeySpecAndroidSettings{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj EnterpriseKeySpecAndroidSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecAndroidSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*EnterpriseKeySpecAndroidSettings)(ptr) = obj
		} else {
			*(*EnterpriseKeySpecAndroidSettings)(ptr) = EnterpriseKeySpecAndroidSettings{}
		}
	default:
		iter.ReportError("decode EnterpriseKeySpecAndroidSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EnterpriseKeySpecIosSettingsCodec struct {
}

func (EnterpriseKeySpecIosSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EnterpriseKeySpecIosSettings)(ptr) == nil
}

func (EnterpriseKeySpecIosSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EnterpriseKeySpecIosSettings)(ptr)
	var objs []EnterpriseKeySpecIosSettings
	if obj != nil {
		objs = []EnterpriseKeySpecIosSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecIosSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EnterpriseKeySpecIosSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EnterpriseKeySpecIosSettings)(ptr) = EnterpriseKeySpecIosSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EnterpriseKeySpecIosSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecIosSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EnterpriseKeySpecIosSettings)(ptr) = objs[0]
			} else {
				*(*EnterpriseKeySpecIosSettings)(ptr) = EnterpriseKeySpecIosSettings{}
			}
		} else {
			*(*EnterpriseKeySpecIosSettings)(ptr) = EnterpriseKeySpecIosSettings{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj EnterpriseKeySpecIosSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecIosSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*EnterpriseKeySpecIosSettings)(ptr) = obj
		} else {
			*(*EnterpriseKeySpecIosSettings)(ptr) = EnterpriseKeySpecIosSettings{}
		}
	default:
		iter.ReportError("decode EnterpriseKeySpecIosSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EnterpriseKeySpecTestingOptionsCodec struct {
}

func (EnterpriseKeySpecTestingOptionsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EnterpriseKeySpecTestingOptions)(ptr) == nil
}

func (EnterpriseKeySpecTestingOptionsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EnterpriseKeySpecTestingOptions)(ptr)
	var objs []EnterpriseKeySpecTestingOptions
	if obj != nil {
		objs = []EnterpriseKeySpecTestingOptions{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecTestingOptions{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EnterpriseKeySpecTestingOptionsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EnterpriseKeySpecTestingOptions)(ptr) = EnterpriseKeySpecTestingOptions{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EnterpriseKeySpecTestingOptions

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecTestingOptions{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EnterpriseKeySpecTestingOptions)(ptr) = objs[0]
			} else {
				*(*EnterpriseKeySpecTestingOptions)(ptr) = EnterpriseKeySpecTestingOptions{}
			}
		} else {
			*(*EnterpriseKeySpecTestingOptions)(ptr) = EnterpriseKeySpecTestingOptions{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj EnterpriseKeySpecTestingOptions

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecTestingOptions{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*EnterpriseKeySpecTestingOptions)(ptr) = obj
		} else {
			*(*EnterpriseKeySpecTestingOptions)(ptr) = EnterpriseKeySpecTestingOptions{}
		}
	default:
		iter.ReportError("decode EnterpriseKeySpecTestingOptions", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EnterpriseKeySpecWebSettingsCodec struct {
}

func (EnterpriseKeySpecWebSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EnterpriseKeySpecWebSettings)(ptr) == nil
}

func (EnterpriseKeySpecWebSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EnterpriseKeySpecWebSettings)(ptr)
	var objs []EnterpriseKeySpecWebSettings
	if obj != nil {
		objs = []EnterpriseKeySpecWebSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecWebSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EnterpriseKeySpecWebSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EnterpriseKeySpecWebSettings)(ptr) = EnterpriseKeySpecWebSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EnterpriseKeySpecWebSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecWebSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EnterpriseKeySpecWebSettings)(ptr) = objs[0]
			} else {
				*(*EnterpriseKeySpecWebSettings)(ptr) = EnterpriseKeySpecWebSettings{}
			}
		} else {
			*(*EnterpriseKeySpecWebSettings)(ptr) = EnterpriseKeySpecWebSettings{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj EnterpriseKeySpecWebSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnterpriseKeySpecWebSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*EnterpriseKeySpecWebSettings)(ptr) = obj
		} else {
			*(*EnterpriseKeySpecWebSettings)(ptr) = EnterpriseKeySpecWebSettings{}
		}
	default:
		iter.ReportError("decode EnterpriseKeySpecWebSettings", "unexpected JSON type")
	}
}
