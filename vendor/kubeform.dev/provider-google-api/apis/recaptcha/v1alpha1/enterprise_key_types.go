/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type EnterpriseKey struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EnterpriseKeySpec   `json:"spec,omitempty"`
	Status            EnterpriseKeyStatus `json:"status,omitempty"`
}

type EnterpriseKeySpecAndroidSettings struct {
	// If set to true, it means allowed_package_names will not be enforced.
	// +optional
	AllowAllPackageNames *bool `json:"allowAllPackageNames,omitempty" tf:"allow_all_package_names"`
	// Android package names of apps allowed to use the key. Example: 'com.companyname.appname'
	// +optional
	AllowedPackageNames []string `json:"allowedPackageNames,omitempty" tf:"allowed_package_names"`
}

type EnterpriseKeySpecIosSettings struct {
	// If set to true, it means allowed_bundle_ids will not be enforced.
	// +optional
	AllowAllBundleIDS *bool `json:"allowAllBundleIDS,omitempty" tf:"allow_all_bundle_ids"`
	// iOS bundle ids of apps allowed to use the key. Example: 'com.companyname.productname.appname'
	// +optional
	AllowedBundleIDS []string `json:"allowedBundleIDS,omitempty" tf:"allowed_bundle_ids"`
}

type EnterpriseKeySpecTestingOptions struct {
	// For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge if UNSOLVABLE_CHALLENGE. Possible values: TESTING_CHALLENGE_UNSPECIFIED, NOCAPTCHA, UNSOLVABLE_CHALLENGE
	// +optional
	TestingChallenge *string `json:"testingChallenge,omitempty" tf:"testing_challenge"`
	// All assessments for this Key will return this score. Must be between 0 (likely not legitimate) and 1 (likely legitimate) inclusive.
	// +optional
	TestingScore *float64 `json:"testingScore,omitempty" tf:"testing_score"`
}

type EnterpriseKeySpecWebSettings struct {
	// If set to true, it means allowed_domains will not be enforced.
	// +optional
	AllowAllDomains *bool `json:"allowAllDomains,omitempty" tf:"allow_all_domains"`
	// If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type.
	// +optional
	AllowAmpTraffic *bool `json:"allowAmpTraffic,omitempty" tf:"allow_amp_traffic"`
	// Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: 'example.com' or 'subdomain.example.com'
	// +optional
	AllowedDomains []string `json:"allowedDomains,omitempty" tf:"allowed_domains"`
	// Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE. Possible values: CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED, USABILITY, BALANCE, SECURITY
	// +optional
	ChallengeSecurityPreference *string `json:"challengeSecurityPreference,omitempty" tf:"challenge_security_preference"`
	// Required. Describes how this key is integrated with the website. Possible values: SCORE, CHECKBOX, INVISIBLE
	IntegrationType *string `json:"integrationType" tf:"integration_type"`
}

type EnterpriseKeySpec struct {
	State *EnterpriseKeySpecResource `json:"state,omitempty" tf:"-"`

	Resource EnterpriseKeySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type EnterpriseKeySpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Settings for keys that can be used by Android apps.
	// +optional
	AndroidSettings *EnterpriseKeySpecAndroidSettings `json:"androidSettings,omitempty" tf:"android_settings"`
	// The timestamp corresponding to the creation of this Key.
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// Human-readable display name of this key. Modifiable by user.
	DisplayName *string `json:"displayName" tf:"display_name"`
	// Settings for keys that can be used by iOS apps.
	// +optional
	IosSettings *EnterpriseKeySpecIosSettings `json:"iosSettings,omitempty" tf:"ios_settings"`
	// See [Creating and managing labels](https://cloud.google.com/recaptcha-enterprise/docs/labels).
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// The resource name for the Key in the format "projects/{project}/keys/{key}".
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The project for the resource
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Options for user acceptance testing.
	// +optional
	TestingOptions *EnterpriseKeySpecTestingOptions `json:"testingOptions,omitempty" tf:"testing_options"`
	// Settings for keys that can be used by websites.
	// +optional
	WebSettings *EnterpriseKeySpecWebSettings `json:"webSettings,omitempty" tf:"web_settings"`
}

type EnterpriseKeyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// EnterpriseKeyList is a list of EnterpriseKeys
type EnterpriseKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of EnterpriseKey CRD objects
	Items []EnterpriseKey `json:"items,omitempty"`
}
